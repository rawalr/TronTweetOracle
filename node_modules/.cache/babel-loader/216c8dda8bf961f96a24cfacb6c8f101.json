{"ast":null,"code":"import _slicedToArray from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/roshni16/TronLink-Demo-Messages/src/components/App/index.js\";\nimport React from 'react';\nimport Message from 'components/Message';\nimport Featured from 'components/Featured';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport banner from 'assets/banner.png';\nimport './App.scss';\nvar FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      tronWeb: {\n        installed: false,\n        loggedIn: false\n      },\n      currentMessage: {\n        message: '',\n        loading: false\n      },\n      messages: {\n        recent: {},\n        featured: []\n      }\n    };\n    _this.onMessageEdit = _this.onMessageEdit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMessageSend = _this.onMessageSend.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMessageTip = _this.onMessageTip.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new Promise(function (resolve) {\n                  var tronWebState = {\n                    installed: !!window.tronWeb,\n                    loggedIn: window.tronWeb && window.tronWeb.ready\n                  };\n\n                  if (tronWebState.installed) {\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    return resolve();\n                  }\n\n                  var tries = 0;\n                  var timer = setInterval(function () {\n                    if (tries >= 10) {\n                      var TRONGRID_API = 'https://api.trongrid.io';\n                      window.tronWeb = new TronWeb(TRONGRID_API, TRONGRID_API, TRONGRID_API);\n\n                      _this2.setState({\n                        tronWeb: {\n                          installed: false,\n                          loggedIn: false\n                        }\n                      });\n\n                      clearInterval(timer);\n                      return resolve();\n                    }\n\n                    tronWebState.installed = !!window.tronWeb;\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n                    if (!tronWebState.installed) return tries++;\n\n                    _this2.setState({\n                      tronWeb: tronWebState\n                    });\n\n                    resolve();\n                  }, 100);\n                });\n\n              case 2:\n                if (!this.state.tronWeb.loggedIn) {\n                  // Set default address (foundation address) used for contract calls\n                  // Directly overwrites the address object as TronLink disabled the\n                  // function call\n                  window.tronWeb.defaultAddress = {\n                    hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                    base58: FOUNDATION_ADDRESS\n                  };\n                  window.tronWeb.on('addressChanged', function () {\n                    if (_this2.state.tronWeb.loggedIn) return;\n\n                    _this2.setState({\n                      tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                      }\n                    });\n                  });\n                }\n\n                _context.next = 5;\n                return Utils.setTronWeb(window.tronWeb);\n\n              case 5:\n                this.startEventListener();\n                this.fetchMessages();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }() // Polls blockchain for smart contract events\n\n  }, {\n    key: \"startEventListener\",\n    value: function startEventListener() {\n      var _this3 = this;\n\n      Utils.contract.MessagePosted().watch(function (err, _ref) {\n        var result = _ref.result;\n        if (err) return console.error('Failed to bind event listener:', err);\n        console.log('Detected new message:', result.id);\n\n        _this3.fetchMessage(+result.id);\n      });\n      /*Utils.contract.MessageTipped().watch((err, { result }) => {\n          if(err)\n              return console.error('Failed to bind event listener:', err);\n           console.log('Message was tipped:', result.id);\n          this.fetchMessage(+result.id);\n      });\n       Utils.contract.MessageAddedToTopPosts().watch((err, { result }) => {\n          if(err)\n              return console.error('Failed to bind event listener:', err);\n           console.log('Message was added to featured posts:', result.id);\n          this.fetchMessage(+result.id);\n           const {\n              recent,\n              featured\n          } = this.state.messages;\n           if(featured.includes(+result.id))\n              return;\n           this.setState({\n              messages: {\n                  recent: this.state.messages.recent,\n                  featured: [ ...featured, +result.id ]\n              }\n          });\n      });\n       Utils.contract.MessageRemovedFromTopPosts().watch((err, { result }) => {\n          if(err)\n              return console.error('Failed to bind event listener:', err);\n           console.log('Message was removed from featured posts:', result.id);\n          this.fetchMessage(+result.id);\n           const {\n              recent,\n              featured\n          } = this.state.messages;\n           if(!featured.includes(+result.id))\n              return;\n           this.setState({\n              messages: {\n                  recent: this.state.messages.recent,\n                  featured: featured.filter(messageID => messageID !== +result.id)\n              }\n          });\n      });*/\n    }\n  }, {\n    key: \"fetchMessages\",\n    value: function () {\n      var _fetchMessages = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = this;\n                _context2.next = 3;\n                return Utils.fetchMessages();\n\n              case 3:\n                _context2.t1 = _context2.sent;\n                _context2.t2 = {\n                  messages: _context2.t1\n                };\n\n                _context2.t0.setState.call(_context2.t0, _context2.t2);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function fetchMessages() {\n        return _fetchMessages.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"fetchMessage\",\n    value: function () {\n      var _fetchMessage = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(messageID) {\n        var _ref2, recent, featured, message;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Utils.fetchMessage(messageID, this.state.messages);\n\n              case 2:\n                _ref2 = _context3.sent;\n                recent = _ref2.recent;\n                featured = _ref2.featured;\n                message = _ref2.message;\n                this.setState({\n                  messages: {\n                    recent: recent,\n                    featured: featured\n                  }\n                });\n                return _context3.abrupt(\"return\", message);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function fetchMessage(_x) {\n        return _fetchMessage.apply(this, arguments);\n      };\n    }() // Stores value of textarea to state\n\n  }, {\n    key: \"onMessageEdit\",\n    value: function onMessageEdit(_ref3) {\n      var value = _ref3.target.value;\n      if (this.state.currentMessage.loading) return;\n      this.setState({\n        currentMessage: {\n          message: value,\n          loading: false\n        }\n      });\n    } // Submits message to the blockchain\n\n  }, {\n    key: \"onMessageSend\",\n    value: function onMessageSend() {\n      var _this4 = this;\n\n      var _this$state$currentMe = this.state.currentMessage,\n          loading = _this$state$currentMe.loading,\n          message = _this$state$currentMe.message;\n      if (loading) return;\n      if (!message.trim().length) return;\n      this.setState({\n        currentMessage: {\n          loading: true,\n          message: message\n        }\n      });\n      Utils.contract.postMessage(message).send({\n        shouldPollResponse: true,\n        callValue: 0\n      }).then(function (res) {\n        return Swal({\n          title: 'Post Created',\n          type: 'success'\n        });\n      }).catch(function (err) {\n        return Swal({\n          title: 'Post Failed',\n          type: 'error'\n        });\n      }).then(function () {\n        _this4.setState({\n          currentMessage: {\n            loading: false,\n            message: message\n          }\n        });\n      });\n    } // Tips a message with a specific amount\n\n  }, {\n    key: \"onMessageTip\",\n    value: function () {\n      var _onMessageTip = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(messageID) {\n        var messages, _ref4, value;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                messages = _objectSpread({}, this.state.messages.recent, this.state.messages.featured);\n\n                if (messages.hasOwnProperty(messageID)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (this.state.tronWeb.loggedIn) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                if (!(messages[messageID].owner === Utils.tronWeb.defaultAddress.base58)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 7:\n                _context4.next = 9;\n                return Swal({\n                  title: 'Tip Message',\n                  text: 'Enter tip amount in TRX',\n                  confirmButtonText: 'Tip',\n                  input: 'text',\n                  showCancelButton: true,\n                  showLoaderOnConfirm: true,\n                  reverseButtons: true,\n                  allowOutsideClick: function allowOutsideClick() {\n                    return !Swal.isLoading();\n                  },\n                  allowEscapeKey: function allowEscapeKey() {\n                    return !Swal.isLoading();\n                  },\n                  preConfirm: function preConfirm(amount) {\n                    if (isNaN(amount) || amount <= 0) {\n                      Swal.showValidationMessage('Invalid tip amount provided');\n                      return false;\n                    }\n\n                    return Utils.contract.tipMessage(+messageID).send({\n                      callValue: Number(amount) * 1000000\n                    }).then(function () {\n                      return true;\n                    }).catch(function (err) {\n                      Swal.showValidationMessage(err);\n                    });\n                  }\n                });\n\n              case 9:\n                _ref4 = _context4.sent;\n                value = _ref4.value;\n                value && Swal({\n                  title: 'Message Tipped',\n                  type: 'success'\n                });\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function onMessageTip(_x2) {\n        return _onMessageTip.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"renderMessageInput\",\n    value: function renderMessageInput() {\n      if (!this.state.tronWeb.installed) return React.createElement(TronLinkGuide, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      });\n      if (!this.state.tronWeb.loggedIn) return React.createElement(TronLinkGuide, {\n        installed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      });\n      return React.createElement(\"div\", {\n        className: 'messageInput' + (this.state.currentMessage.loading ? ' loading' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        placeholder: \"Enter your message to post\",\n        value: this.state.currentMessage.message,\n        onChange: this.onMessageEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"Posting a message will cost 1 TRX and network fees\"), React.createElement(\"div\", {\n        className: 'sendButton' + (!!this.state.currentMessage.message.trim().length ? '' : ' disabled'),\n        onClick: this.onMessageSend,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, \"Post Message\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$state$messages = this.state.messages,\n          recent = _this$state$messages.recent,\n          featured = _this$state$messages.featured;\n      var messages = Object.entries(recent).sort(function (a, b) {\n        return b[1].timestamp - a[1].timestamp;\n      }).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            messageID = _ref6[0],\n            message = _ref6[1];\n\n        return React.createElement(Message, {\n          message: message,\n          featured: featured.includes(+messageID),\n          key: messageID,\n          messageID: messageID,\n          tippable: message.owner !== Utils.tronWeb.defaultAddress.base58,\n          requiresTronLink: !_this5.state.tronWeb.installed,\n          onTip: _this5.onMessageTip,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"kontainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, \"Tron Message Board\"), \" is a DApp which allows you to post messages along with tipping others or receiving tips. There is no additional cost associated when tipping people, however you do have to pay network fees.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }), \"Want to build your own DApp? The code to this demo is available on\\xA0\", React.createElement(\"a\", {\n        href: \"https://github.com/TronWatch/TronLink-Demo-Messages/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, \"GitHub\"), \".\")), this.renderMessageInput(), React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, \"Featured\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, \"The top 20 messages, sorted by the total tips\")), React.createElement(Featured, {\n        recent: recent,\n        featured: featured,\n        currentAddress: Utils.tronWeb && Utils.tronWeb.defaultAddress.base58,\n        tronLinkInstalled: this.state.tronWeb.installed,\n        onTip: this.onMessageTip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, \"Recent\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, \"Click any message to send the user a tip\")), React.createElement(\"div\", {\n        className: \"messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, messages));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/roshni16/TronLink-Demo-Messages/src/components/App/index.js"],"names":["React","Message","Featured","TronLinkGuide","TronWeb","Utils","Swal","banner","FOUNDATION_ADDRESS","App","props","state","tronWeb","installed","loggedIn","currentMessage","message","loading","messages","recent","featured","onMessageEdit","bind","onMessageSend","onMessageTip","Promise","resolve","tronWebState","window","ready","setState","tries","timer","setInterval","TRONGRID_API","clearInterval","defaultAddress","hex","address","toHex","base58","on","setTronWeb","startEventListener","fetchMessages","contract","MessagePosted","watch","err","result","console","error","log","id","fetchMessage","messageID","value","target","trim","length","postMessage","send","shouldPollResponse","callValue","then","res","title","type","catch","hasOwnProperty","owner","text","confirmButtonText","input","showCancelButton","showLoaderOnConfirm","reverseButtons","allowOutsideClick","isLoading","allowEscapeKey","preConfirm","amount","isNaN","showValidationMessage","tipMessage","Number","Object","entries","sort","a","b","timestamp","map","includes","renderMessageInput","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Message from 'components/Message';\nimport Featured from 'components/Featured';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\nimport banner from 'assets/banner.png';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\n\nclass App extends React.Component {\n    state = {\n        tronWeb: {\n            installed: false,\n            loggedIn: false\n        },\n        currentMessage: {\n            message: '',\n            loading: false\n        },\n        messages: {\n            recent: {},\n            featured: []\n        }\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.onMessageEdit = this.onMessageEdit.bind(this);\n        this.onMessageSend = this.onMessageSend.bind(this);\n        this.onMessageTip = this.onMessageTip.bind(this);\n    }\n\n    async componentDidMount() {\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState\n                });\n\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n        await Utils.setTronWeb(window.tronWeb);\n\n        this.startEventListener();\n        this.fetchMessages();\n    }\n\n    // Polls blockchain for smart contract events\n    startEventListener() {\n        Utils.contract.MessagePosted().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Detected new message:', result.id);\n            this.fetchMessage(+result.id);\n        });\n\n        /*Utils.contract.MessageTipped().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was tipped:', result.id);\n            this.fetchMessage(+result.id);\n        });\n\n        Utils.contract.MessageAddedToTopPosts().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was added to featured posts:', result.id);\n            this.fetchMessage(+result.id);\n\n            const {\n                recent,\n                featured\n            } = this.state.messages;\n\n            if(featured.includes(+result.id))\n                return;\n\n            this.setState({\n                messages: {\n                    recent: this.state.messages.recent,\n                    featured: [ ...featured, +result.id ]\n                }\n            });\n        });\n\n        Utils.contract.MessageRemovedFromTopPosts().watch((err, { result }) => {\n            if(err)\n                return console.error('Failed to bind event listener:', err);\n\n            console.log('Message was removed from featured posts:', result.id);\n            this.fetchMessage(+result.id);\n\n            const {\n                recent,\n                featured\n            } = this.state.messages;\n\n            if(!featured.includes(+result.id))\n                return;\n\n            this.setState({\n                messages: {\n                    recent: this.state.messages.recent,\n                    featured: featured.filter(messageID => messageID !== +result.id)\n                }\n            });\n        });*/\n    }\n\n    async fetchMessages() {\n        this.setState({\n            messages: await Utils.fetchMessages()\n        });\n    }\n\n    async fetchMessage(messageID) {\n        const {\n            recent,\n            featured,\n            message\n        } = await Utils.fetchMessage(messageID, this.state.messages);\n\n        this.setState({\n            messages: {\n                recent,\n                featured\n            }\n        });\n\n        return message;\n    }\n\n    // Stores value of textarea to state\n    onMessageEdit({ target: { value } }) {\n        if(this.state.currentMessage.loading)\n            return;\n\n        this.setState({\n            currentMessage: {\n                message: value,\n                loading: false\n            }\n        });\n    }\n\n    // Submits message to the blockchain\n    onMessageSend() {\n        const {\n            loading,\n            message\n        } = this.state.currentMessage;\n\n        if(loading)\n            return;\n\n        if(!message.trim().length)\n            return;\n\n        this.setState({\n            currentMessage: {\n                loading: true,\n                message\n            }\n        });\n\n        Utils.contract.postMessage(message).send({\n            shouldPollResponse: true,\n            callValue: 0\n        }).then(res => Swal({\n            title: 'Post Created',\n            type: 'success'\n        })).catch(err => Swal({\n            title: 'Post Failed',\n            type: 'error'\n        })).then(() => {\n            this.setState({\n                currentMessage: {\n                    loading: false,\n                    message\n                }\n            });\n        });\n    }\n\n    // Tips a message with a specific amount\n    async onMessageTip(messageID) {\n        const messages = {\n            ...this.state.messages.recent,\n            ...this.state.messages.featured\n        };\n\n        if(!messages.hasOwnProperty(messageID))\n            return;\n\n        if(!this.state.tronWeb.loggedIn)\n            return;\n\n        if(messages[messageID].owner === Utils.tronWeb.defaultAddress.base58)\n            return;\n\n        const { value } = await Swal({\n            title: 'Tip Message',\n            text: 'Enter tip amount in TRX',\n            confirmButtonText: 'Tip',\n            input: 'text',\n            showCancelButton: true,\n            showLoaderOnConfirm: true,\n            reverseButtons: true,\n            allowOutsideClick: () => !Swal.isLoading(),\n            allowEscapeKey: () => !Swal.isLoading(),\n            preConfirm: amount => {\n                if(isNaN(amount) || amount <= 0) {\n                    Swal.showValidationMessage('Invalid tip amount provided');\n                    return false;\n                }\n\n                return Utils.contract.tipMessage(+messageID).send({\n                    callValue: Number(amount) * 1000000\n                }).then(() => true).catch(err => {\n                    Swal.showValidationMessage(err);\n                });\n            }\n        });\n\n        value && Swal({\n            title: 'Message Tipped',\n            type: 'success'\n        });\n    }\n\n    renderMessageInput() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n            <div className={ 'messageInput' + (this.state.currentMessage.loading ? ' loading' : '') }>\n                <textarea\n                    placeholder='Enter your message to post'\n                    value={ this.state.currentMessage.message }\n                    onChange={ this.onMessageEdit }></textarea>\n                <div className='footer'>\n                    <div className='warning'>\n                        Posting a message will cost 1 TRX and network fees\n                    </div>\n                    <div\n                        className={ 'sendButton' + (!!this.state.currentMessage.message.trim().length ? '' : ' disabled') }\n                        onClick={ this.onMessageSend }\n                    >\n                        Post Message\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            recent,\n            featured\n        } = this.state.messages;\n\n        const messages = Object.entries(recent).sort((a, b) => b[1].timestamp - a[1].timestamp).map(([ messageID, message ]) => (\n            <Message\n                message={ message }\n                featured={ featured.includes(+messageID) }\n                key={ messageID }\n                messageID={ messageID }\n                tippable={ message.owner !== Utils.tronWeb.defaultAddress.base58 }\n                requiresTronLink={ !this.state.tronWeb.installed }\n                onTip={ this.onMessageTip } />\n        ));\n\n        return (\n            <div className='kontainer'>\n                <div className='header white'>\n                    <p>\n                        <strong>Tron Message Board</strong> is a DApp which allows you to post messages\n                        along with tipping others or receiving tips. There is no additional cost associated\n                        when tipping people, however you do have to pay network fees.<br/><br/>\n\n                        Want to build your own DApp? The code to this demo is available on&nbsp;\n                        <a href='https://github.com/TronWatch/TronLink-Demo-Messages/' target='_blank' rel='noopener noreferrer'>\n                            GitHub\n                        </a>.\n                    </p>\n                </div>\n\n                { this.renderMessageInput() }\n\n                <div className='header'>\n                    <h1>Featured</h1>\n                    <span>The top 20 messages, sorted by the total tips</span>\n                </div>\n                <Featured\n                    recent={ recent }\n                    featured={ featured }\n                    currentAddress={ Utils.tronWeb && Utils.tronWeb.defaultAddress.base58 }\n                    tronLinkInstalled={ this.state.tronWeb.installed }\n                    onTip={ this.onMessageTip } />\n\n                <div className='header'>\n                    <h1>Recent</h1>\n                    <span>Click any message to send the user a tip</span>\n                </div>\n                <div className='messages'>\n                    { messages }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}