{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.ethers = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.version = \"4.0.7\";\n    }, {}],\n    2: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var properties_1 = require(\"./utils/properties\");\n\n      var Signer =\n      /** @class */\n      function () {\n        function Signer() {\n          properties_1.setType(this, 'Signer');\n        }\n\n        Signer.isSigner = function (value) {\n          return properties_1.isType(value, 'Signer');\n        };\n\n        return Signer;\n      }();\n\n      exports.Signer = Signer; //defineReadOnly(Signer, 'inherits', inheritable(Signer));\n    }, {\n      \"./utils/properties\": 72\n    }],\n    3: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bignumber_1 = require(\"./utils/bignumber\");\n\n      var AddressZero = '0x0000000000000000000000000000000000000000';\n      exports.AddressZero = AddressZero;\n      var HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\n      exports.HashZero = HashZero; // NFKD (decomposed)\n      //const EtherSymbol = '\\uD835\\uDF63';\n      // NFKC (composed)\n\n      var EtherSymbol = \"\\u039E\";\n      exports.EtherSymbol = EtherSymbol;\n      var NegativeOne = bignumber_1.bigNumberify(-1);\n      exports.NegativeOne = NegativeOne;\n      var Zero = bignumber_1.bigNumberify(0);\n      exports.Zero = Zero;\n      var One = bignumber_1.bigNumberify(1);\n      exports.One = One;\n      var Two = bignumber_1.bigNumberify(2);\n      exports.Two = Two;\n      var WeiPerEther = bignumber_1.bigNumberify('1000000000000000000');\n      exports.WeiPerEther = WeiPerEther;\n      var MaxUint256 = bignumber_1.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n      exports.MaxUint256 = MaxUint256;\n    }, {\n      \"./utils/bignumber\": 61\n    }],\n    4: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var constants_1 = require(\"./constants\");\n\n      var errors = __importStar(require(\"./errors\"));\n\n      var abi_coder_1 = require(\"./utils/abi-coder\");\n\n      var address_1 = require(\"./utils/address\");\n\n      var bignumber_1 = require(\"./utils/bignumber\");\n\n      var bytes_1 = require(\"./utils/bytes\");\n\n      var interface_1 = require(\"./utils/interface\");\n\n      var properties_1 = require(\"./utils/properties\"); ///////////////////////////////\n      // Imported Abstracts\n\n\n      var abstract_provider_1 = require(\"./providers/abstract-provider\");\n\n      var abstract_signer_1 = require(\"./abstract-signer\"); ///////////////////////////////\n\n\n      var VoidSigner =\n      /** @class */\n      function (_super) {\n        __extends(VoidSigner, _super);\n\n        function VoidSigner(address, provider) {\n          var _this = _super.call(this) || this;\n\n          properties_1.defineReadOnly(_this, 'address', address);\n          properties_1.defineReadOnly(_this, 'provider', provider);\n          return _this;\n        }\n\n        VoidSigner.prototype.getAddress = function () {\n          return Promise.resolve(this.address);\n        };\n\n        VoidSigner.prototype._fail = function (message, operation) {\n          return Promise.resolve().then(function () {\n            errors.throwError(message, errors.UNSUPPORTED_OPERATION, {\n              operation: operation\n            });\n          });\n        };\n\n        VoidSigner.prototype.signMessage = function (message) {\n          return this._fail('VoidSigner cannot sign messages', 'signMessage');\n        };\n\n        VoidSigner.prototype.sendTransaction = function (transaction) {\n          return this._fail('VoidSigner cannot sign transactions', 'sendTransaction');\n        };\n\n        VoidSigner.prototype.connect = function (provider) {\n          return new VoidSigner(this.address, provider);\n        };\n\n        return VoidSigner;\n      }(abstract_signer_1.Signer);\n\n      exports.VoidSigner = VoidSigner;\n      var allowedTransactionKeys = {\n        chainId: true,\n        data: true,\n        from: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        value: true\n      }; // Recursively replaces ENS names with promises to resolve the name and\n      // stalls until all promises have returned\n      // @TODO: Expand this to resolve any promises too\n\n      function resolveAddresses(provider, value, paramType) {\n        if (Array.isArray(paramType)) {\n          var promises_1 = [];\n          paramType.forEach(function (paramType, index) {\n            var v = null;\n\n            if (Array.isArray(value)) {\n              v = value[index];\n            } else {\n              v = value[paramType.name];\n            }\n\n            promises_1.push(resolveAddresses(provider, v, paramType));\n          });\n          return Promise.all(promises_1);\n        }\n\n        if (paramType.type === 'address') {\n          return provider.resolveName(value);\n        }\n\n        if (paramType.type === 'tuple') {\n          return resolveAddresses(provider, value, paramType.components);\n        } // Strips one level of array indexing off the end to recuse into\n\n\n        var isArrayMatch = paramType.type.match(/(.*)(\\[[0-9]*\\]$)/);\n\n        if (isArrayMatch) {\n          if (!Array.isArray(value)) {\n            throw new Error('invalid value for array');\n          }\n\n          var promises = [];\n          var subParamType = {\n            components: paramType.components,\n            type: isArrayMatch[1]\n          };\n          value.forEach(function (v) {\n            promises.push(resolveAddresses(provider, v, subParamType));\n          });\n          return Promise.all(promises);\n        }\n\n        return Promise.resolve(value);\n      }\n\n      function runMethod(contract, functionName, estimateOnly) {\n        var method = contract.interface.functions[functionName];\n        return function () {\n          var _this = this;\n\n          var params = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n          }\n\n          var tx = {};\n          var blockTag = null; // If 1 extra parameter was passed in, it contains overrides\n\n          if (params.length === method.inputs.length + 1 && typeof params[params.length - 1] === 'object') {\n            tx = properties_1.shallowCopy(params.pop());\n\n            if (tx.blockTag != null) {\n              blockTag = tx.blockTag;\n              delete tx.blockTag;\n            } // Check for unexpected keys (e.g. using \"gas\" instead of \"gasLimit\")\n\n\n            for (var key in tx) {\n              if (!allowedTransactionKeys[key]) {\n                throw new Error('unknown transaction override ' + key);\n              }\n            }\n          }\n\n          if (params.length != method.inputs.length) {\n            throw new Error('incorrect number of arguments');\n          } // Check overrides make sense\n\n\n          ['data', 'to'].forEach(function (key) {\n            if (tx[key] != null) {\n              errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {\n                operation: key\n              });\n            }\n          }); // Send to the contract address (after checking the contract is deployed)\n\n          tx.to = contract.deployed().then(function () {\n            return contract.addressPromise;\n          });\n          return resolveAddresses(contract.provider, params, method.inputs).then(function (params) {\n            tx.data = method.encode(params);\n\n            if (method.type === 'call') {\n              // Call (constant functions) always cost 0 ether\n              if (estimateOnly) {\n                return Promise.resolve(constants_1.Zero);\n              }\n\n              if (!contract.provider) {\n                errors.throwError('call (constant functions) require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {\n                  operation: 'call'\n                });\n              } // Check overrides make sense\n\n\n              ['gasLimit', 'gasPrice', 'value'].forEach(function (key) {\n                if (tx[key] != null) {\n                  throw new Error('call cannot override ' + key);\n                }\n              });\n\n              if (tx.from == null && contract.signer) {\n                tx.from = contract.signer.getAddress();\n              }\n\n              return contract.provider.call(tx, blockTag).then(function (value) {\n                if (bytes_1.hexDataLength(value) % 32 === 4 && bytes_1.hexDataSlice(value, 0, 4) === '0x08c379a0') {\n                  var reason = abi_coder_1.defaultAbiCoder.decode(['string'], bytes_1.hexDataSlice(value, 4));\n                  errors.throwError('call revert exception', errors.CALL_EXCEPTION, {\n                    address: contract.address,\n                    args: params,\n                    method: method.signature,\n                    errorSignature: 'Error(string)',\n                    errorArgs: [reason],\n                    reason: reason,\n                    transaction: tx\n                  });\n                }\n\n                try {\n                  var result = method.decode(value);\n\n                  if (method.outputs.length === 1) {\n                    result = result[0];\n                  }\n\n                  return result;\n                } catch (error) {\n                  if (value === '0x' && method.outputs.length > 0) {\n                    errors.throwError('call exception', errors.CALL_EXCEPTION, {\n                      address: contract.address,\n                      method: method.signature,\n                      args: params\n                    });\n                  }\n\n                  throw error;\n                }\n              });\n            } else if (method.type === 'transaction') {\n              // Only computing the transaction estimate\n              if (estimateOnly) {\n                if (!contract.provider) {\n                  errors.throwError('estimate gas require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {\n                    operation: 'estimateGas'\n                  });\n                }\n\n                if (tx.from == null && contract.signer) {\n                  tx.from = contract.signer.getAddress();\n                }\n\n                return contract.provider.estimateGas(tx);\n              }\n\n              if (tx.gasLimit == null && method.gas != null) {\n                tx.gasLimit = bignumber_1.bigNumberify(method.gas).add(21000);\n              }\n\n              if (!contract.signer) {\n                errors.throwError('sending a transaction require a signer', errors.UNSUPPORTED_OPERATION, {\n                  operation: 'sendTransaction'\n                });\n              } // Make sure they aren't overriding something they shouldn't\n\n\n              if (tx.from != null) {\n                errors.throwError('cannot override from in a transaction', errors.UNSUPPORTED_OPERATION, {\n                  operation: 'sendTransaction'\n                });\n              }\n\n              return contract.signer.sendTransaction(tx).then(function (tx) {\n                var wait = tx.wait.bind(tx);\n\n                tx.wait = function (confirmations) {\n                  return wait(confirmations).then(function (receipt) {\n                    receipt.events = receipt.logs.map(function (log) {\n                      var event = properties_1.deepCopy(log);\n\n                      var parsed = _this.interface.parseLog(log);\n\n                      if (parsed) {\n                        event.args = parsed.values;\n                        event.decode = parsed.decode;\n                        event.event = parsed.name;\n                        event.eventSignature = parsed.signature;\n                      }\n\n                      event.removeListener = function () {\n                        return _this.provider;\n                      };\n\n                      event.getBlock = function () {\n                        return _this.provider.getBlock(receipt.blockHash);\n                      };\n\n                      event.getTransaction = function () {\n                        return _this.provider.getTransaction(receipt.transactionHash);\n                      };\n\n                      event.getTransactionReceipt = function () {\n                        return Promise.resolve(receipt);\n                      };\n\n                      return event;\n                    });\n                    return receipt;\n                  });\n                };\n\n                return tx;\n              });\n            }\n\n            throw new Error('invalid type - ' + method.type);\n            return null;\n          });\n        };\n      }\n\n      function getEventTag(filter) {\n        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n          return '*';\n        }\n\n        return (filter.address || '*') + '@' + (filter.topics ? filter.topics.join(':') : '');\n      }\n\n      var Contract =\n      /** @class */\n      function () {\n        // https://github.com/Microsoft/TypeScript/issues/5453\n        // Once this issue is resolved (there are open PR) we can do this nicer\n        // by making addressOrName default to null for 2 operand calls. :)\n        function Contract(addressOrName, contractInterface, signerOrProvider) {\n          var _this = this;\n\n          errors.checkNew(this, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n          //address = getAddress(address);\n\n          if (interface_1.Interface.isInterface(contractInterface)) {\n            properties_1.defineReadOnly(this, 'interface', contractInterface);\n          } else {\n            properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));\n          }\n\n          if (abstract_signer_1.Signer.isSigner(signerOrProvider)) {\n            properties_1.defineReadOnly(this, 'provider', signerOrProvider.provider);\n            properties_1.defineReadOnly(this, 'signer', signerOrProvider);\n          } else if (abstract_provider_1.Provider.isProvider(signerOrProvider)) {\n            properties_1.defineReadOnly(this, 'provider', signerOrProvider);\n            properties_1.defineReadOnly(this, 'signer', null);\n          } else {\n            errors.throwError('invalid signer or provider', errors.INVALID_ARGUMENT, {\n              arg: 'signerOrProvider',\n              value: signerOrProvider\n            });\n          }\n\n          properties_1.defineReadOnly(this, 'estimate', {});\n          properties_1.defineReadOnly(this, 'functions', {});\n          properties_1.defineReadOnly(this, 'filters', {});\n          Object.keys(this.interface.events).forEach(function (eventName) {\n            var event = _this.interface.events[eventName];\n            properties_1.defineReadOnly(_this.filters, eventName, function () {\n              var args = [];\n\n              for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n              }\n\n              return {\n                address: _this.address,\n                topics: event.encodeTopics(args)\n              };\n            });\n          });\n          this._events = [];\n          properties_1.defineReadOnly(this, 'address', addressOrName);\n\n          if (this.provider) {\n            properties_1.defineReadOnly(this, 'addressPromise', this.provider.resolveName(addressOrName).then(function (address) {\n              if (address == null) {\n                throw new Error('name not found');\n              }\n\n              return address;\n            }).catch(function (error) {\n              console.log('ERROR: Cannot find Contract - ' + addressOrName);\n              throw error;\n            }));\n          } else {\n            try {\n              properties_1.defineReadOnly(this, 'addressPromise', Promise.resolve(address_1.getAddress(addressOrName)));\n            } catch (error) {\n              // Without a provider, we cannot use ENS names\n              errors.throwError('provider is required to use non-address contract address', errors.INVALID_ARGUMENT, {\n                argument: 'addressOrName',\n                value: addressOrName\n              });\n            }\n          }\n\n          Object.keys(this.interface.functions).forEach(function (name) {\n            var run = runMethod(_this, name, false);\n\n            if (_this[name] == null) {\n              properties_1.defineReadOnly(_this, name, run);\n            } else {\n              console.log('WARNING: Multiple definitions for ' + name);\n            }\n\n            if (_this.functions[name] == null) {\n              properties_1.defineReadOnly(_this.functions, name, run);\n              properties_1.defineReadOnly(_this.estimate, name, runMethod(_this, name, true));\n            }\n          });\n        } // @TODO: Allow timeout?\n\n\n        Contract.prototype.deployed = function () {\n          var _this = this;\n\n          if (!this._deployed) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n              this._deployed = this.deployTransaction.wait().then(function () {\n                return _this;\n              });\n            } else {\n              // @TODO: Once we allow a timeout to be passed in, we will wait\n              // up to that many blocks for getCode\n              // Otherwise, poll for our code to be deployed\n              this._deployed = this.provider.getCode(this.address).then(function (code) {\n                if (code === '0x') {\n                  errors.throwError('contract not deployed', errors.UNSUPPORTED_OPERATION, {\n                    contractAddress: _this.address,\n                    operation: 'getDeployed'\n                  });\n                }\n\n                return _this;\n              });\n            }\n          }\n\n          return this._deployed;\n        }; // @TODO:\n        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n        // @TODO:\n        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n\n        Contract.prototype.fallback = function (overrides) {\n          var _this = this;\n\n          if (!this.signer) {\n            errors.throwError('sending a transaction require a signer', errors.UNSUPPORTED_OPERATION, {\n              operation: 'sendTransaction(fallback)'\n            });\n          }\n\n          var tx = properties_1.shallowCopy(overrides || {});\n          ['from', 'to'].forEach(function (key) {\n            if (tx[key] == null) {\n              return;\n            }\n\n            errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {\n              operation: key\n            });\n          });\n          tx.to = this.addressPromise;\n          return this.deployed().then(function () {\n            return _this.signer.sendTransaction(tx);\n          });\n        }; // Reconnect to a different signer or provider\n\n\n        Contract.prototype.connect = function (signerOrProvider) {\n          if (typeof signerOrProvider === 'string') {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n          }\n\n          var contract = new Contract(this.address, this.interface, signerOrProvider);\n\n          if (this.deployTransaction) {\n            properties_1.defineReadOnly(contract, 'deployTransaction', this.deployTransaction);\n          }\n\n          return contract;\n        }; // Re-attach to a different on=chain instance of this contract\n\n\n        Contract.prototype.attach = function (addressOrName) {\n          return new Contract(addressOrName, this.interface, this.signer || this.provider);\n        };\n\n        Contract.isIndexed = function (value) {\n          return interface_1.Interface.isIndexed(value);\n        };\n\n        Contract.prototype._getEventFilter = function (eventName) {\n          var _this = this;\n\n          if (typeof eventName === 'string') {\n            // Listen for any event\n            if (eventName === '*') {\n              return {\n                prepareEvent: function prepareEvent(e) {\n                  var parsed = _this.interface.parseLog(e);\n\n                  if (parsed) {\n                    e.args = parsed.values;\n                    e.decode = parsed.decode;\n                    e.event = parsed.name;\n                    e.eventSignature = parsed.signature;\n                  }\n\n                  return [e];\n                },\n                eventTag: '*',\n                filter: {\n                  address: this.address\n                }\n              };\n            } // Normalize the eventName\n\n\n            if (eventName.indexOf('(') !== -1) {\n              eventName = abi_coder_1.formatSignature(abi_coder_1.parseSignature('event ' + eventName));\n            }\n\n            var event_1 = this.interface.events[eventName];\n\n            if (!event_1) {\n              errors.throwError('unknown event - ' + eventName, errors.INVALID_ARGUMENT, {\n                argumnet: 'eventName',\n                value: eventName\n              });\n            }\n\n            var filter_1 = {\n              address: this.address,\n              topics: [event_1.topic]\n            };\n            return {\n              prepareEvent: function prepareEvent(e) {\n                var args = event_1.decode(e.data, e.topics);\n                e.args = args;\n                var result = Array.prototype.slice.call(args);\n                result.push(e);\n                return result;\n              },\n              event: event_1,\n              eventTag: getEventTag(filter_1),\n              filter: filter_1\n            };\n          }\n\n          var filter = {\n            address: this.address\n          }; // Find the matching event in the ABI; if none, we still allow filtering\n          // since it may be a filter for an otherwise unknown event\n\n          var event = null;\n\n          if (eventName.topics && eventName.topics[0]) {\n            filter.topics = eventName.topics;\n\n            for (var name_1 in this.interface.events) {\n              if (name_1.indexOf('(') === -1) {\n                continue;\n              }\n\n              var e = this.interface.events[name_1];\n\n              if (e.topic === eventName.topics[0].toLowerCase()) {\n                event = e;\n                break;\n              }\n            }\n          }\n\n          return {\n            prepareEvent: function prepareEvent(e) {\n              if (!event) {\n                return [e];\n              }\n\n              var args = event.decode(e.data, e.topics);\n              e.args = args;\n              var result = Array.prototype.slice.call(args);\n              result.push(e);\n              return result;\n            },\n            event: event,\n            eventTag: getEventTag(filter),\n            filter: filter\n          };\n        };\n\n        Contract.prototype._addEventListener = function (eventFilter, listener, once) {\n          var _this = this;\n\n          if (!this.provider) {\n            errors.throwError('events require a provider or a signer with a provider', errors.UNSUPPORTED_OPERATION, {\n              operation: 'once'\n            });\n          }\n\n          var wrappedListener = function wrappedListener(log) {\n            var event = properties_1.deepCopy(log);\n            var args = eventFilter.prepareEvent(event);\n\n            if (eventFilter.event) {\n              event.decode = eventFilter.event.decode;\n              event.event = eventFilter.event.name;\n              event.eventSignature = eventFilter.event.signature;\n            }\n\n            event.removeListener = function () {\n              _this.removeListener(eventFilter.filter, listener);\n            };\n\n            event.getBlock = function () {\n              return _this.provider.getBlock(log.blockHash);\n            };\n\n            event.getTransaction = function () {\n              return _this.provider.getTransaction(log.transactionHash);\n            };\n\n            event.getTransactionReceipt = function () {\n              return _this.provider.getTransactionReceipt(log.transactionHash);\n            };\n\n            _this.emit.apply(_this, [eventFilter.filter].concat(args));\n          };\n\n          this.provider.on(eventFilter.filter, wrappedListener);\n\n          this._events.push({\n            eventFilter: eventFilter,\n            listener: listener,\n            wrappedListener: wrappedListener,\n            once: once\n          });\n        };\n\n        Contract.prototype.on = function (event, listener) {\n          this._addEventListener(this._getEventFilter(event), listener, false);\n\n          return this;\n        };\n\n        Contract.prototype.once = function (event, listener) {\n          this._addEventListener(this._getEventFilter(event), listener, true);\n\n          return this;\n        };\n\n        Contract.prototype.addListener = function (eventName, listener) {\n          return this.on(eventName, listener);\n        };\n\n        Contract.prototype.emit = function (eventName) {\n          var _this = this;\n\n          var args = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n          }\n\n          if (!this.provider) {\n            return false;\n          }\n\n          var result = false;\n\n          var eventFilter = this._getEventFilter(eventName);\n\n          this._events = this._events.filter(function (event) {\n            // Not this event (keep it for later)\n            if (event.eventFilter.eventTag !== eventFilter.eventTag) {\n              return true;\n            } // Call the callback in the next event loop\n\n\n            setTimeout(function () {\n              event.listener.apply(_this, args);\n            }, 0);\n            result = true; // Reschedule it if it not \"once\"\n\n            return !event.once;\n          });\n          return result;\n        };\n\n        Contract.prototype.listenerCount = function (eventName) {\n          if (!this.provider) {\n            return 0;\n          }\n\n          var eventFilter = this._getEventFilter(eventName);\n\n          return this._events.filter(function (event) {\n            return event.eventFilter.eventTag === eventFilter.eventTag;\n          }).length;\n        };\n\n        Contract.prototype.listeners = function (eventName) {\n          if (!this.provider) {\n            return [];\n          }\n\n          var eventFilter = this._getEventFilter(eventName);\n\n          return this._events.filter(function (event) {\n            return event.eventFilter.eventTag === eventFilter.eventTag;\n          }).map(function (event) {\n            return event.listener;\n          });\n        };\n\n        Contract.prototype.removeAllListeners = function (eventName) {\n          if (!this.provider) {\n            return this;\n          }\n\n          var eventFilter = this._getEventFilter(eventName);\n\n          this._events = this._events.filter(function (event) {\n            return event.eventFilter.eventTag !== eventFilter.eventTag;\n          });\n          return this;\n        };\n\n        Contract.prototype.removeListener = function (eventName, listener) {\n          var _this = this;\n\n          if (!this.provider) {\n            return this;\n          }\n\n          var found = false;\n\n          var eventFilter = this._getEventFilter(eventName);\n\n          this._events = this._events.filter(function (event) {\n            // Make sure this event and listener match\n            if (event.eventFilter.eventTag !== eventFilter.eventTag) {\n              return true;\n            }\n\n            if (event.listener !== listener) {\n              return true;\n            }\n\n            _this.provider.removeListener(event.eventFilter.filter, event.wrappedListener); // Already found a matching event in a previous loop\n\n\n            if (found) {\n              return true;\n            } // REmove this event (returning false filters us out)\n\n\n            found = true;\n            return false;\n          });\n          return this;\n        };\n\n        return Contract;\n      }();\n\n      exports.Contract = Contract;\n\n      var ContractFactory =\n      /** @class */\n      function () {\n        function ContractFactory(contractInterface, bytecode, signer) {\n          var bytecodeHex = null; // Allow the bytecode object from the Solidity compiler\n\n          if (typeof bytecode === 'string') {\n            bytecodeHex = bytecode;\n          } else if (bytes_1.isArrayish(bytecode)) {\n            bytecodeHex = bytes_1.hexlify(bytecode);\n          } else if (typeof bytecode.object === 'string') {\n            bytecodeHex = bytecode.object;\n          } else {\n            errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, {\n              arg: 'bytecode',\n              value: bytecode\n            });\n          } // Make sure it is 0x prefixed\n\n\n          if (bytecodeHex.substring(0, 2) !== '0x') {\n            bytecodeHex = '0x' + bytecodeHex;\n          }\n\n          if (!bytes_1.isHexString(bytecodeHex)) {\n            errors.throwError('bytecode must be a valid hex string', errors.INVALID_ARGUMENT, {\n              arg: 'bytecode',\n              value: bytecode\n            });\n          }\n\n          if (bytecodeHex.length % 2 !== 0) {\n            errors.throwError('bytecode must be valid data (even length)', errors.INVALID_ARGUMENT, {\n              arg: 'bytecode',\n              value: bytecode\n            });\n          }\n\n          properties_1.defineReadOnly(this, 'bytecode', bytecodeHex);\n\n          if (interface_1.Interface.isInterface(contractInterface)) {\n            properties_1.defineReadOnly(this, 'interface', contractInterface);\n          } else {\n            properties_1.defineReadOnly(this, 'interface', new interface_1.Interface(contractInterface));\n          }\n\n          if (signer && !abstract_signer_1.Signer.isSigner(signer)) {\n            errors.throwError('invalid signer', errors.INVALID_ARGUMENT, {\n              arg: 'signer',\n              value: null\n            });\n          }\n\n          properties_1.defineReadOnly(this, 'signer', signer || null);\n        }\n\n        ContractFactory.prototype.getDeployTransaction = function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n          if (args.length === this.interface.deployFunction.inputs.length + 1) {\n            tx = properties_1.shallowCopy(args.pop());\n\n            for (var key in tx) {\n              if (!allowedTransactionKeys[key]) {\n                throw new Error('unknown transaction override ' + key);\n              }\n            }\n          } // Do not allow these to be overridden in a deployment transaction\n\n\n          ['data', 'from', 'to'].forEach(function (key) {\n            if (tx[key] == null) {\n              return;\n            }\n\n            errors.throwError('cannot override ' + key, errors.UNSUPPORTED_OPERATION, {\n              operation: key\n            });\n          }); // Make sure the call matches the constructor signature\n\n          errors.checkArgumentCount(args.length, this.interface.deployFunction.inputs.length, 'in Contract constructor'); // Set the data to the bytecode + the encoded constructor arguments\n\n          tx.data = this.interface.deployFunction.encode(this.bytecode, args);\n          return tx;\n        };\n\n        ContractFactory.prototype.deploy = function () {\n          var _this = this;\n\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          } // Get the deployment transaction (with optional overrides)\n\n\n          var tx = this.getDeployTransaction.apply(this, args); // Send the deployment transaction\n\n          return this.signer.sendTransaction(tx).then(function (tx) {\n            var contract = new Contract(address_1.getContractAddress(tx), _this.interface, _this.signer);\n            properties_1.defineReadOnly(contract, 'deployTransaction', tx);\n            return contract;\n          });\n        };\n\n        ContractFactory.prototype.attach = function (address) {\n          return new Contract(address, this.interface, this.signer);\n        };\n\n        ContractFactory.prototype.connect = function (signer) {\n          return new ContractFactory(this.interface, this.bytecode, signer);\n        };\n\n        ContractFactory.fromSolidity = function (compilerOutput, signer) {\n          if (compilerOutput == null) {\n            errors.throwError('missing compiler output', errors.MISSING_ARGUMENT, {\n              argument: 'compilerOutput'\n            });\n          }\n\n          if (typeof compilerOutput === 'string') {\n            compilerOutput = JSON.parse(compilerOutput);\n          }\n\n          var abi = compilerOutput.abi;\n          var bytecode = null;\n\n          if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n          } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n          }\n\n          return new ContractFactory(abi, bytecode, signer);\n        };\n\n        return ContractFactory;\n      }();\n\n      exports.ContractFactory = ContractFactory;\n    }, {\n      \"./abstract-signer\": 2,\n      \"./constants\": 3,\n      \"./errors\": 5,\n      \"./providers/abstract-provider\": 49,\n      \"./utils/abi-coder\": 58,\n      \"./utils/address\": 59,\n      \"./utils/bignumber\": 61,\n      \"./utils/bytes\": 62,\n      \"./utils/interface\": 67,\n      \"./utils/properties\": 72\n    }],\n    5: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _version_1 = require(\"./_version\"); // Unknown Error\n\n\n      exports.UNKNOWN_ERROR = 'UNKNOWN_ERROR'; // Not implemented\n\n      exports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED'; // Missing new operator to an object\n      //  - name: The name of the class\n\n      exports.MISSING_NEW = 'MISSING_NEW'; // Call exception\n      //  - transaction: the transaction\n      //  - address?: the contract address\n      //  - args?: The arguments passed into the function\n      //  - method?: The Solidity method signature\n      //  - errorSignature?: The EIP848 error signature\n      //  - errorArgs?: The EIP848 error parameters\n      //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n      exports.CALL_EXCEPTION = 'CALL_EXCEPTION'; // Invalid argument (e.g. value is incompatible with type) to a function:\n      //   - arg: The argument name that was invalid\n      //   - value: The value of the argument\n\n      exports.INVALID_ARGUMENT = 'INVALID_ARGUMENT'; // Missing argument to a function:\n      //   - count: The number of arguments received\n      //   - expectedCount: The number of arguments expected\n\n      exports.MISSING_ARGUMENT = 'MISSING_ARGUMENT'; // Too many arguments\n      //   - count: The number of arguments received\n      //   - expectedCount: The number of arguments expected\n\n      exports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT'; // Numeric Fault\n      //   - operation: the operation being executed\n      //   - fault: the reason this faulted\n\n      exports.NUMERIC_FAULT = 'NUMERIC_FAULT'; // Insufficien funds (< value + gasLimit * gasPrice)\n      //   - transaction: the transaction attempted\n\n      exports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS'; // Nonce has already been used\n      //   - transaction: the transaction attempted\n\n      exports.NONCE_EXPIRED = 'NONCE_EXPIRED'; // The replacement fee for the transaction is too low\n      //   - transaction: the transaction attempted\n\n      exports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED'; // Unsupported operation\n      //   - operation\n\n      exports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\n      var _permanentCensorErrors = false;\n      var _censorErrors = false; // @TODO: Enum\n\n      function throwError(message, code, params) {\n        if (_censorErrors) {\n          throw new Error('unknown error');\n        }\n\n        if (!code) {\n          code = exports.UNKNOWN_ERROR;\n        }\n\n        if (!params) {\n          params = {};\n        }\n\n        var messageDetails = [];\n        Object.keys(params).forEach(function (key) {\n          try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n          } catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n          }\n        });\n        messageDetails.push(\"version=\" + _version_1.version);\n        var reason = message;\n\n        if (messageDetails.length) {\n          message += ' (' + messageDetails.join(', ') + ')';\n        } // @TODO: Any??\n\n\n        var error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n          error[key] = params[key];\n        });\n        throw error;\n      }\n\n      exports.throwError = throwError;\n\n      function checkNew(self, kind) {\n        if (!(self instanceof kind)) {\n          throwError('missing new', exports.MISSING_NEW, {\n            name: kind.name\n          });\n        }\n      }\n\n      exports.checkNew = checkNew;\n\n      function checkArgumentCount(count, expectedCount, suffix) {\n        if (!suffix) {\n          suffix = '';\n        }\n\n        if (count < expectedCount) {\n          throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount\n          });\n        }\n\n        if (count > expectedCount) {\n          throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount\n          });\n        }\n      }\n\n      exports.checkArgumentCount = checkArgumentCount;\n\n      function setCensorship(censorship, permanent) {\n        if (_permanentCensorErrors) {\n          throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, {\n            operation: 'setCersorship'\n          });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n      }\n\n      exports.setCensorship = setCensorship;\n    }, {\n      \"./_version\": 1\n    }],\n    6: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var contract_1 = require(\"./contract\");\n\n      exports.Contract = contract_1.Contract;\n      exports.ContractFactory = contract_1.ContractFactory;\n      exports.VoidSigner = contract_1.VoidSigner;\n\n      var abstract_signer_1 = require(\"./abstract-signer\");\n\n      exports.Signer = abstract_signer_1.Signer;\n\n      var wallet_1 = require(\"./wallet\");\n\n      exports.Wallet = wallet_1.Wallet;\n\n      var constants = __importStar(require(\"./constants\"));\n\n      exports.constants = constants;\n\n      var errors = __importStar(require(\"./errors\"));\n\n      exports.errors = errors;\n\n      var providers = __importStar(require(\"./providers\"));\n\n      exports.providers = providers;\n\n      var utils = __importStar(require(\"./utils\"));\n\n      exports.utils = utils;\n\n      var wordlists = __importStar(require(\"./wordlists\"));\n\n      exports.wordlists = wordlists; ////////////////////////\n      // Compile-Time Constants\n      // This is empty in node, and used by browserify to inject extra goodies\n\n      var shims_1 = require(\"./utils/shims\");\n\n      exports.platform = shims_1.platform; // This is generated by \"npm run dist\"\n\n      var _version_1 = require(\"./_version\");\n\n      exports.version = _version_1.version; ////////////////////////\n      // Helper Functions\n\n      function getDefaultProvider(network) {\n        return new providers.FallbackProvider([new providers.InfuraProvider(network), new providers.EtherscanProvider(network)]);\n      }\n\n      exports.getDefaultProvider = getDefaultProvider;\n    }, {\n      \"./_version\": 1,\n      \"./abstract-signer\": 2,\n      \"./constants\": 3,\n      \"./contract\": 4,\n      \"./errors\": 5,\n      \"./providers\": 53,\n      \"./utils\": 66,\n      \"./utils/shims\": 78,\n      \"./wallet\": 86,\n      \"./wordlists\": 87\n    }],\n    7: [function (require, module, exports) {\n      \"use strict\";\n\n      function __export(m) {\n        for (var p in m) {\n          if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n      }\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var ethers = __importStar(require(\"./ethers\"));\n\n      exports.ethers = ethers;\n\n      __export(require(\"./ethers\"));\n    }, {\n      \"./ethers\": 6\n    }],\n    8: [function (require, module, exports) {\n      \"use strict\";\n\n      (function (root) {\n        function checkInt(value) {\n          return parseInt(value) === value;\n        }\n\n        function checkInts(arrayish) {\n          if (!checkInt(arrayish.length)) {\n            return false;\n          }\n\n          for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function coerceArray(arg, copy) {\n          // ArrayBuffer view\n          if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n            if (copy) {\n              if (arg.slice) {\n                arg = arg.slice();\n              } else {\n                arg = Array.prototype.slice.call(arg);\n              }\n            }\n\n            return arg;\n          } // It's an array; check it is a valid representation of a byte\n\n\n          if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n              throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n          } // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n\n\n          if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n          }\n\n          throw new Error('unsupported array-like object');\n        }\n\n        function createArray(length) {\n          return new Uint8Array(length);\n        }\n\n        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n          if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n              sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n              sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n          }\n\n          targetArray.set(sourceArray, targetStart);\n        }\n\n        var convertUtf8 = function () {\n          function toBytes(text) {\n            var result = [],\n                i = 0;\n            text = encodeURI(text);\n\n            while (i < text.length) {\n              var c = text.charCodeAt(i++); // if it is a % sign, encode the following 2 bytes as a hex value\n\n              if (c === 37) {\n                result.push(parseInt(text.substr(i, 2), 16));\n                i += 2; // otherwise, just the actual byte\n              } else {\n                result.push(c);\n              }\n            }\n\n            return coerceArray(result);\n          }\n\n          function fromBytes(bytes) {\n            var result = [],\n                i = 0;\n\n            while (i < bytes.length) {\n              var c = bytes[i];\n\n              if (c < 128) {\n                result.push(String.fromCharCode(c));\n                i++;\n              } else if (c > 191 && c < 224) {\n                result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));\n                i += 2;\n              } else {\n                result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));\n                i += 3;\n              }\n            }\n\n            return result.join('');\n          }\n\n          return {\n            toBytes: toBytes,\n            fromBytes: fromBytes\n          };\n        }();\n\n        var convertHex = function () {\n          function toBytes(text) {\n            var result = [];\n\n            for (var i = 0; i < text.length; i += 2) {\n              result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n          } // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n\n\n          var Hex = '0123456789abcdef';\n\n          function fromBytes(bytes) {\n            var result = [];\n\n            for (var i = 0; i < bytes.length; i++) {\n              var v = bytes[i];\n              result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n            }\n\n            return result.join('');\n          }\n\n          return {\n            toBytes: toBytes,\n            fromBytes: fromBytes\n          };\n        }(); // Number of rounds by keysize\n\n\n        var numberOfRounds = {\n          16: 10,\n          24: 12,\n          32: 14 // Round constant words\n\n        };\n        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91]; // S-box and Inverse S-box (S is for Substitution)\n\n        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n        var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]; // Transformations for encryption\n\n        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c]; // Transformations for decryption\n\n        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0]; // Transformations for decryption key expansion\n\n        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n        function convertToInt32(bytes) {\n          var result = [];\n\n          for (var i = 0; i < bytes.length; i += 4) {\n            result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n          }\n\n          return result;\n        }\n\n        var AES = function AES(key) {\n          if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n          });\n\n          this._prepare();\n        };\n\n        AES.prototype._prepare = function () {\n          var rounds = numberOfRounds[this.key.length];\n\n          if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n          } // encryption round keys\n\n\n          this._Ke = []; // decryption round keys\n\n          this._Kd = [];\n\n          for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n\n            this._Kd.push([0, 0, 0, 0]);\n          }\n\n          var roundKeyCount = (rounds + 1) * 4;\n          var KC = this.key.length / 4; // convert the key into ints\n\n          var tk = convertToInt32(this.key); // copy values into round key arrays\n\n          var index;\n\n          for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n          } // key expansion (fips-197 section 5.2)\n\n\n          var rconpointer = 0;\n          var t = KC,\n              tt;\n\n          while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n            rconpointer += 1; // key expansion (for non-256 bit)\n\n            if (KC != 8) {\n              for (var i = 1; i < KC; i++) {\n                tk[i] ^= tk[i - 1];\n              } // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n\n            } else {\n              for (var i = 1; i < KC / 2; i++) {\n                tk[i] ^= tk[i - 1];\n              }\n\n              tt = tk[KC / 2 - 1];\n              tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n\n              for (var i = KC / 2 + 1; i < KC; i++) {\n                tk[i] ^= tk[i - 1];\n              }\n            } // copy values into round key arrays\n\n\n            var i = 0,\n                r,\n                c;\n\n            while (i < KC && t < roundKeyCount) {\n              r = t >> 2;\n              c = t % 4;\n              this._Ke[r][c] = tk[i];\n              this._Kd[rounds - r][c] = tk[i++];\n              t++;\n            }\n          } // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n\n\n          for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n              tt = this._Kd[r][c];\n              this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n            }\n          }\n        };\n\n        AES.prototype.encrypt = function (plaintext) {\n          if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n          }\n\n          var rounds = this._Ke.length - 1;\n          var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n          var t = convertToInt32(plaintext);\n\n          for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n          } // apply round transforms\n\n\n          for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n              a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];\n            }\n\n            t = a.slice();\n          } // the last round is special\n\n\n          var result = createArray(16),\n              tt;\n\n          for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n          }\n\n          return result;\n        };\n\n        AES.prototype.decrypt = function (ciphertext) {\n          if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n          }\n\n          var rounds = this._Kd.length - 1;\n          var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n          var t = convertToInt32(ciphertext);\n\n          for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n          } // apply round transforms\n\n\n          for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n              a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];\n            }\n\n            t = a.slice();\n          } // the last round is special\n\n\n          var result = createArray(16),\n              tt;\n\n          for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n            result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n            result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n          }\n\n          return result;\n        };\n        /**\n         *  Mode Of Operation - Electonic Codebook (ECB)\n         */\n\n\n        var ModeOfOperationECB = function ModeOfOperationECB(key) {\n          if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          this.description = \"Electronic Code Block\";\n          this.name = \"ecb\";\n          this._aes = new AES(key);\n        };\n\n        ModeOfOperationECB.prototype.encrypt = function (plaintext) {\n          plaintext = coerceArray(plaintext);\n\n          if (plaintext.length % 16 !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n          }\n\n          var ciphertext = createArray(plaintext.length);\n          var block = createArray(16);\n\n          for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n          }\n\n          return ciphertext;\n        };\n\n        ModeOfOperationECB.prototype.decrypt = function (ciphertext) {\n          ciphertext = coerceArray(ciphertext);\n\n          if (ciphertext.length % 16 !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n          }\n\n          var plaintext = createArray(ciphertext.length);\n          var block = createArray(16);\n\n          for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n          }\n\n          return plaintext;\n        };\n        /**\n         *  Mode Of Operation - Cipher Block Chaining (CBC)\n         */\n\n\n        var ModeOfOperationCBC = function ModeOfOperationCBC(key, iv) {\n          if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          this.description = \"Cipher Block Chaining\";\n          this.name = \"cbc\";\n\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n          }\n\n          this._lastCipherblock = coerceArray(iv, true);\n          this._aes = new AES(key);\n        };\n\n        ModeOfOperationCBC.prototype.encrypt = function (plaintext) {\n          plaintext = coerceArray(plaintext);\n\n          if (plaintext.length % 16 !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n          }\n\n          var ciphertext = createArray(plaintext.length);\n          var block = createArray(16);\n\n          for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n              block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n          }\n\n          return ciphertext;\n        };\n\n        ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {\n          ciphertext = coerceArray(ciphertext);\n\n          if (ciphertext.length % 16 !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n          }\n\n          var plaintext = createArray(ciphertext.length);\n          var block = createArray(16);\n\n          for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n              plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n          }\n\n          return plaintext;\n        };\n        /**\n         *  Mode Of Operation - Cipher Feedback (CFB)\n         */\n\n\n        var ModeOfOperationCFB = function ModeOfOperationCFB(key, iv, segmentSize) {\n          if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          this.description = \"Cipher Feedback\";\n          this.name = \"cfb\";\n\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n          }\n\n          if (!segmentSize) {\n            segmentSize = 1;\n          }\n\n          this.segmentSize = segmentSize;\n          this._shiftRegister = coerceArray(iv, true);\n          this._aes = new AES(key);\n        };\n\n        ModeOfOperationCFB.prototype.encrypt = function (plaintext) {\n          if (plaintext.length % this.segmentSize != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n          }\n\n          var encrypted = coerceArray(plaintext, true);\n          var xorSegment;\n\n          for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n              encrypted[i + j] ^= xorSegment[j];\n            } // Shift the register\n\n\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n          }\n\n          return encrypted;\n        };\n\n        ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {\n          if (ciphertext.length % this.segmentSize != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n          }\n\n          var plaintext = coerceArray(ciphertext, true);\n          var xorSegment;\n\n          for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n              plaintext[i + j] ^= xorSegment[j];\n            } // Shift the register\n\n\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n          }\n\n          return plaintext;\n        };\n        /**\n         *  Mode Of Operation - Output Feedback (OFB)\n         */\n\n\n        var ModeOfOperationOFB = function ModeOfOperationOFB(key, iv) {\n          if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          this.description = \"Output Feedback\";\n          this.name = \"ofb\";\n\n          if (!iv) {\n            iv = createArray(16);\n          } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n          }\n\n          this._lastPrecipher = coerceArray(iv, true);\n          this._lastPrecipherIndex = 16;\n          this._aes = new AES(key);\n        };\n\n        ModeOfOperationOFB.prototype.encrypt = function (plaintext) {\n          var encrypted = coerceArray(plaintext, true);\n\n          for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n              this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n              this._lastPrecipherIndex = 0;\n            }\n\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n          }\n\n          return encrypted;\n        }; // Decryption is symetric\n\n\n        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n        /**\n         *  Counter object for CTR common mode of operation\n         */\n\n        var Counter = function Counter(initialValue) {\n          if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n          } // We allow 0, but anything false-ish uses the default 1\n\n\n          if (initialValue !== 0 && !initialValue) {\n            initialValue = 1;\n          }\n\n          if (typeof initialValue === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n          } else {\n            this.setBytes(initialValue);\n          }\n        };\n\n        Counter.prototype.setValue = function (value) {\n          if (typeof value !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n          }\n\n          for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n          }\n        };\n\n        Counter.prototype.setBytes = function (bytes) {\n          bytes = coerceArray(bytes, true);\n\n          if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n          }\n\n          this._counter = bytes;\n        };\n\n        Counter.prototype.increment = function () {\n          for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n              this._counter[i] = 0;\n            } else {\n              this._counter[i]++;\n              break;\n            }\n          }\n        };\n        /**\n         *  Mode Of Operation - Counter (CTR)\n         */\n\n\n        var ModeOfOperationCTR = function ModeOfOperationCTR(key, counter) {\n          if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n          }\n\n          this.description = \"Counter\";\n          this.name = \"ctr\";\n\n          if (!(counter instanceof Counter)) {\n            counter = new Counter(counter);\n          }\n\n          this._counter = counter;\n          this._remainingCounter = null;\n          this._remainingCounterIndex = 16;\n          this._aes = new AES(key);\n        };\n\n        ModeOfOperationCTR.prototype.encrypt = function (plaintext) {\n          var encrypted = coerceArray(plaintext, true);\n\n          for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n              this._remainingCounter = this._aes.encrypt(this._counter._counter);\n              this._remainingCounterIndex = 0;\n\n              this._counter.increment();\n            }\n\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n          }\n\n          return encrypted;\n        }; // Decryption is symetric\n\n\n        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt; ///////////////////////\n        // Padding\n        // See:https://tools.ietf.org/html/rfc2315\n\n        function pkcs7pad(data) {\n          data = coerceArray(data, true);\n          var padder = 16 - data.length % 16;\n          var result = createArray(data.length + padder);\n          copyArray(data, result);\n\n          for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n          }\n\n          return result;\n        }\n\n        function pkcs7strip(data) {\n          data = coerceArray(data, true);\n\n          if (data.length < 16) {\n            throw new Error('PKCS#7 invalid length');\n          }\n\n          var padder = data[data.length - 1];\n\n          if (padder > 16) {\n            throw new Error('PKCS#7 padding byte out of range');\n          }\n\n          var length = data.length - padder;\n\n          for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n              throw new Error('PKCS#7 invalid padding byte');\n            }\n          }\n\n          var result = createArray(length);\n          copyArray(data, result, 0, 0, length);\n          return result;\n        } ///////////////////////\n        // Exporting\n        // The block cipher\n\n\n        var aesjs = {\n          AES: AES,\n          Counter: Counter,\n          ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n          },\n          utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n          },\n          padding: {\n            pkcs7: {\n              pad: pkcs7pad,\n              strip: pkcs7strip\n            }\n          },\n          _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray\n          }\n        }; // node.js\n\n        if (typeof exports !== 'undefined') {\n          module.exports = aesjs; // RequireJS/AMD\n          // http://www.requirejs.org/docs/api.html\n          // https://github.com/amdjs/amdjs-api/wiki/AMD\n        } else if (typeof define === 'function' && define.amd) {\n          define(aesjs); // Web Browsers\n        } else {\n          // If there was an existing library at \"aesjs\" make sure it's still available\n          if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n          }\n\n          root.aesjs = aesjs;\n        }\n      })(this);\n    }, {}],\n    9: [function (require, module, exports) {\n      (function (module, exports) {\n        'use strict'; // Utils\n\n        function assert(val, msg) {\n          if (!val) throw new Error(msg || 'Assertion failed');\n        } // Could use `inherits` module, but don't want to move from single file\n        // architecture yet.\n\n\n        function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n\n          var TempCtor = function TempCtor() {};\n\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        } // BN\n\n\n        function BN(number, base, endian) {\n          if (BN.isBN(number)) {\n            return number;\n          }\n\n          this.negative = 0;\n          this.words = null;\n          this.length = 0; // Reduction context\n\n          this.red = null;\n\n          if (number !== null) {\n            if (base === 'le' || base === 'be') {\n              endian = base;\n              base = 10;\n            }\n\n            this._init(number || 0, base || 10, endian || 'be');\n          }\n        }\n\n        if (typeof module === 'object') {\n          module.exports = BN;\n        } else {\n          exports.BN = BN;\n        }\n\n        BN.BN = BN;\n        BN.wordSize = 26;\n        var Buffer;\n\n        try {\n          Buffer = require('buffer').Buffer;\n        } catch (e) {}\n\n        BN.isBN = function isBN(num) {\n          if (num instanceof BN) {\n            return true;\n          }\n\n          return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n        };\n\n        BN.max = function max(left, right) {\n          if (left.cmp(right) > 0) return left;\n          return right;\n        };\n\n        BN.min = function min(left, right) {\n          if (left.cmp(right) < 0) return left;\n          return right;\n        };\n\n        BN.prototype._init = function init(number, base, endian) {\n          if (typeof number === 'number') {\n            return this._initNumber(number, base, endian);\n          }\n\n          if (typeof number === 'object') {\n            return this._initArray(number, base, endian);\n          }\n\n          if (base === 'hex') {\n            base = 16;\n          }\n\n          assert(base === (base | 0) && base >= 2 && base <= 36);\n          number = number.toString().replace(/\\s+/g, '');\n          var start = 0;\n\n          if (number[0] === '-') {\n            start++;\n          }\n\n          if (base === 16) {\n            this._parseHex(number, start);\n          } else {\n            this._parseBase(number, base, start);\n          }\n\n          if (number[0] === '-') {\n            this.negative = 1;\n          }\n\n          this.strip();\n          if (endian !== 'le') return;\n\n          this._initArray(this.toArray(), base, endian);\n        };\n\n        BN.prototype._initNumber = function _initNumber(number, base, endian) {\n          if (number < 0) {\n            this.negative = 1;\n            number = -number;\n          }\n\n          if (number < 0x4000000) {\n            this.words = [number & 0x3ffffff];\n            this.length = 1;\n          } else if (number < 0x10000000000000) {\n            this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n            this.length = 2;\n          } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n            this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n            this.length = 3;\n          }\n\n          if (endian !== 'le') return; // Reverse the bytes\n\n          this._initArray(this.toArray(), base, endian);\n        };\n\n        BN.prototype._initArray = function _initArray(number, base, endian) {\n          // Perhaps a Uint8Array\n          assert(typeof number.length === 'number');\n\n          if (number.length <= 0) {\n            this.words = [0];\n            this.length = 1;\n            return this;\n          }\n\n          this.length = Math.ceil(number.length / 3);\n          this.words = new Array(this.length);\n\n          for (var i = 0; i < this.length; i++) {\n            this.words[i] = 0;\n          }\n\n          var j, w;\n          var off = 0;\n\n          if (endian === 'be') {\n            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n              this.words[j] |= w << off & 0x3ffffff;\n              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n              off += 24;\n\n              if (off >= 26) {\n                off -= 26;\n                j++;\n              }\n            }\n          } else if (endian === 'le') {\n            for (i = 0, j = 0; i < number.length; i += 3) {\n              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n              this.words[j] |= w << off & 0x3ffffff;\n              this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n              off += 24;\n\n              if (off >= 26) {\n                off -= 26;\n                j++;\n              }\n            }\n          }\n\n          return this.strip();\n        };\n\n        function parseHex(str, start, end) {\n          var r = 0;\n          var len = Math.min(str.length, end);\n\n          for (var i = start; i < len; i++) {\n            var c = str.charCodeAt(i) - 48;\n            r <<= 4; // 'a' - 'f'\n\n            if (c >= 49 && c <= 54) {\n              r |= c - 49 + 0xa; // 'A' - 'F'\n            } else if (c >= 17 && c <= 22) {\n              r |= c - 17 + 0xa; // '0' - '9'\n            } else {\n              r |= c & 0xf;\n            }\n          }\n\n          return r;\n        }\n\n        BN.prototype._parseHex = function _parseHex(number, start) {\n          // Create possibly bigger array to ensure that it fits the number\n          this.length = Math.ceil((number.length - start) / 6);\n          this.words = new Array(this.length);\n\n          for (var i = 0; i < this.length; i++) {\n            this.words[i] = 0;\n          }\n\n          var j, w; // Scan 24-bit chunks and add them to the number\n\n          var off = 0;\n\n          for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n            w = parseHex(number, i, i + 6);\n            this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n\n          if (i + 6 !== start) {\n            w = parseHex(number, start, i + 6);\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n          }\n\n          this.strip();\n        };\n\n        function parseBase(str, start, end, mul) {\n          var r = 0;\n          var len = Math.min(str.length, end);\n\n          for (var i = start; i < len; i++) {\n            var c = str.charCodeAt(i) - 48;\n            r *= mul; // 'a'\n\n            if (c >= 49) {\n              r += c - 49 + 0xa; // 'A'\n            } else if (c >= 17) {\n              r += c - 17 + 0xa; // '0' - '9'\n            } else {\n              r += c;\n            }\n          }\n\n          return r;\n        }\n\n        BN.prototype._parseBase = function _parseBase(number, base, start) {\n          // Initialize as zero\n          this.words = [0];\n          this.length = 1; // Find length of limb in base\n\n          for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n            limbLen++;\n          }\n\n          limbLen--;\n          limbPow = limbPow / base | 0;\n          var total = number.length - start;\n          var mod = total % limbLen;\n          var end = Math.min(total, total - mod) + start;\n          var word = 0;\n\n          for (var i = start; i < end; i += limbLen) {\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n\n            if (this.words[0] + word < 0x4000000) {\n              this.words[0] += word;\n            } else {\n              this._iaddn(word);\n            }\n          }\n\n          if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n\n            for (i = 0; i < mod; i++) {\n              pow *= base;\n            }\n\n            this.imuln(pow);\n\n            if (this.words[0] + word < 0x4000000) {\n              this.words[0] += word;\n            } else {\n              this._iaddn(word);\n            }\n          }\n        };\n\n        BN.prototype.copy = function copy(dest) {\n          dest.words = new Array(this.length);\n\n          for (var i = 0; i < this.length; i++) {\n            dest.words[i] = this.words[i];\n          }\n\n          dest.length = this.length;\n          dest.negative = this.negative;\n          dest.red = this.red;\n        };\n\n        BN.prototype.clone = function clone() {\n          var r = new BN(null);\n          this.copy(r);\n          return r;\n        };\n\n        BN.prototype._expand = function _expand(size) {\n          while (this.length < size) {\n            this.words[this.length++] = 0;\n          }\n\n          return this;\n        }; // Remove leading `0` from `this`\n\n\n        BN.prototype.strip = function strip() {\n          while (this.length > 1 && this.words[this.length - 1] === 0) {\n            this.length--;\n          }\n\n          return this._normSign();\n        };\n\n        BN.prototype._normSign = function _normSign() {\n          // -0 = 0\n          if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n          }\n\n          return this;\n        };\n\n        BN.prototype.inspect = function inspect() {\n          return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n        };\n        /*\n         var zeros = [];\n        var groupSizes = [];\n        var groupBases = [];\n         var s = '';\n        var i = -1;\n        while (++i < BN.wordSize) {\n          zeros[i] = s;\n          s += '0';\n        }\n        groupSizes[0] = 0;\n        groupSizes[1] = 0;\n        groupBases[0] = 0;\n        groupBases[1] = 0;\n        var base = 2 - 1;\n        while (++base < 36 + 1) {\n          var groupSize = 0;\n          var groupBase = 1;\n          while (groupBase < (1 << BN.wordSize) / base) {\n            groupBase *= base;\n            groupSize += 1;\n          }\n          groupSizes[base] = groupSize;\n          groupBases[base] = groupBase;\n        }\n         */\n\n\n        var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n        var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n        var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n        BN.prototype.toString = function toString(base, padding) {\n          base = base || 10;\n          padding = padding | 0 || 1;\n          var out;\n\n          if (base === 16 || base === 'hex') {\n            out = '';\n            var off = 0;\n            var carry = 0;\n\n            for (var i = 0; i < this.length; i++) {\n              var w = this.words[i];\n              var word = ((w << off | carry) & 0xffffff).toString(16);\n              carry = w >>> 24 - off & 0xffffff;\n\n              if (carry !== 0 || i !== this.length - 1) {\n                out = zeros[6 - word.length] + word + out;\n              } else {\n                out = word + out;\n              }\n\n              off += 2;\n\n              if (off >= 26) {\n                off -= 26;\n                i--;\n              }\n            }\n\n            if (carry !== 0) {\n              out = carry.toString(16) + out;\n            }\n\n            while (out.length % padding !== 0) {\n              out = '0' + out;\n            }\n\n            if (this.negative !== 0) {\n              out = '-' + out;\n            }\n\n            return out;\n          }\n\n          if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n            var groupBase = groupBases[base];\n            out = '';\n            var c = this.clone();\n            c.negative = 0;\n\n            while (!c.isZero()) {\n              var r = c.modn(groupBase).toString(base);\n              c = c.idivn(groupBase);\n\n              if (!c.isZero()) {\n                out = zeros[groupSize - r.length] + r + out;\n              } else {\n                out = r + out;\n              }\n            }\n\n            if (this.isZero()) {\n              out = '0' + out;\n            }\n\n            while (out.length % padding !== 0) {\n              out = '0' + out;\n            }\n\n            if (this.negative !== 0) {\n              out = '-' + out;\n            }\n\n            return out;\n          }\n\n          assert(false, 'Base should be between 2 and 36');\n        };\n\n        BN.prototype.toNumber = function toNumber() {\n          var ret = this.words[0];\n\n          if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n          } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n          } else if (this.length > 2) {\n            assert(false, 'Number can only safely store up to 53 bits');\n          }\n\n          return this.negative !== 0 ? -ret : ret;\n        };\n\n        BN.prototype.toJSON = function toJSON() {\n          return this.toString(16);\n        };\n\n        BN.prototype.toBuffer = function toBuffer(endian, length) {\n          assert(typeof Buffer !== 'undefined');\n          return this.toArrayLike(Buffer, endian, length);\n        };\n\n        BN.prototype.toArray = function toArray(endian, length) {\n          return this.toArrayLike(Array, endian, length);\n        };\n\n        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n          var byteLength = this.byteLength();\n          var reqLength = length || Math.max(1, byteLength);\n          assert(byteLength <= reqLength, 'byte array longer than desired length');\n          assert(reqLength > 0, 'Requested array length <= 0');\n          this.strip();\n          var littleEndian = endian === 'le';\n          var res = new ArrayType(reqLength);\n          var b, i;\n          var q = this.clone();\n\n          if (!littleEndian) {\n            // Assume big-endian\n            for (i = 0; i < reqLength - byteLength; i++) {\n              res[i] = 0;\n            }\n\n            for (i = 0; !q.isZero(); i++) {\n              b = q.andln(0xff);\n              q.iushrn(8);\n              res[reqLength - i - 1] = b;\n            }\n          } else {\n            for (i = 0; !q.isZero(); i++) {\n              b = q.andln(0xff);\n              q.iushrn(8);\n              res[i] = b;\n            }\n\n            for (; i < reqLength; i++) {\n              res[i] = 0;\n            }\n          }\n\n          return res;\n        };\n\n        if (Math.clz32) {\n          BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n          };\n        } else {\n          BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n\n            if (t >= 0x1000) {\n              r += 13;\n              t >>>= 13;\n            }\n\n            if (t >= 0x40) {\n              r += 7;\n              t >>>= 7;\n            }\n\n            if (t >= 0x8) {\n              r += 4;\n              t >>>= 4;\n            }\n\n            if (t >= 0x02) {\n              r += 2;\n              t >>>= 2;\n            }\n\n            return r + t;\n          };\n        }\n\n        BN.prototype._zeroBits = function _zeroBits(w) {\n          // Short-cut\n          if (w === 0) return 26;\n          var t = w;\n          var r = 0;\n\n          if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n          }\n\n          if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n          }\n\n          if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n          }\n\n          if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n          }\n\n          if ((t & 0x1) === 0) {\n            r++;\n          }\n\n          return r;\n        }; // Return number of used bits in a BN\n\n\n        BN.prototype.bitLength = function bitLength() {\n          var w = this.words[this.length - 1];\n\n          var hi = this._countBits(w);\n\n          return (this.length - 1) * 26 + hi;\n        };\n\n        function toBitArray(num) {\n          var w = new Array(num.bitLength());\n\n          for (var bit = 0; bit < w.length; bit++) {\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n          }\n\n          return w;\n        } // Number of trailing zero bits\n\n\n        BN.prototype.zeroBits = function zeroBits() {\n          if (this.isZero()) return 0;\n          var r = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var b = this._zeroBits(this.words[i]);\n\n            r += b;\n            if (b !== 26) break;\n          }\n\n          return r;\n        };\n\n        BN.prototype.byteLength = function byteLength() {\n          return Math.ceil(this.bitLength() / 8);\n        };\n\n        BN.prototype.toTwos = function toTwos(width) {\n          if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n          }\n\n          return this.clone();\n        };\n\n        BN.prototype.fromTwos = function fromTwos(width) {\n          if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n          }\n\n          return this.clone();\n        };\n\n        BN.prototype.isNeg = function isNeg() {\n          return this.negative !== 0;\n        }; // Return negative clone of `this`\n\n\n        BN.prototype.neg = function neg() {\n          return this.clone().ineg();\n        };\n\n        BN.prototype.ineg = function ineg() {\n          if (!this.isZero()) {\n            this.negative ^= 1;\n          }\n\n          return this;\n        }; // Or `num` with `this` in-place\n\n\n        BN.prototype.iuor = function iuor(num) {\n          while (this.length < num.length) {\n            this.words[this.length++] = 0;\n          }\n\n          for (var i = 0; i < num.length; i++) {\n            this.words[i] = this.words[i] | num.words[i];\n          }\n\n          return this.strip();\n        };\n\n        BN.prototype.ior = function ior(num) {\n          assert((this.negative | num.negative) === 0);\n          return this.iuor(num);\n        }; // Or `num` with `this`\n\n\n        BN.prototype.or = function or(num) {\n          if (this.length > num.length) return this.clone().ior(num);\n          return num.clone().ior(this);\n        };\n\n        BN.prototype.uor = function uor(num) {\n          if (this.length > num.length) return this.clone().iuor(num);\n          return num.clone().iuor(this);\n        }; // And `num` with `this` in-place\n\n\n        BN.prototype.iuand = function iuand(num) {\n          // b = min-length(num, this)\n          var b;\n\n          if (this.length > num.length) {\n            b = num;\n          } else {\n            b = this;\n          }\n\n          for (var i = 0; i < b.length; i++) {\n            this.words[i] = this.words[i] & num.words[i];\n          }\n\n          this.length = b.length;\n          return this.strip();\n        };\n\n        BN.prototype.iand = function iand(num) {\n          assert((this.negative | num.negative) === 0);\n          return this.iuand(num);\n        }; // And `num` with `this`\n\n\n        BN.prototype.and = function and(num) {\n          if (this.length > num.length) return this.clone().iand(num);\n          return num.clone().iand(this);\n        };\n\n        BN.prototype.uand = function uand(num) {\n          if (this.length > num.length) return this.clone().iuand(num);\n          return num.clone().iuand(this);\n        }; // Xor `num` with `this` in-place\n\n\n        BN.prototype.iuxor = function iuxor(num) {\n          // a.length > b.length\n          var a;\n          var b;\n\n          if (this.length > num.length) {\n            a = this;\n            b = num;\n          } else {\n            a = num;\n            b = this;\n          }\n\n          for (var i = 0; i < b.length; i++) {\n            this.words[i] = a.words[i] ^ b.words[i];\n          }\n\n          if (this !== a) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n\n          this.length = a.length;\n          return this.strip();\n        };\n\n        BN.prototype.ixor = function ixor(num) {\n          assert((this.negative | num.negative) === 0);\n          return this.iuxor(num);\n        }; // Xor `num` with `this`\n\n\n        BN.prototype.xor = function xor(num) {\n          if (this.length > num.length) return this.clone().ixor(num);\n          return num.clone().ixor(this);\n        };\n\n        BN.prototype.uxor = function uxor(num) {\n          if (this.length > num.length) return this.clone().iuxor(num);\n          return num.clone().iuxor(this);\n        }; // Not ``this`` with ``width`` bitwidth\n\n\n        BN.prototype.inotn = function inotn(width) {\n          assert(typeof width === 'number' && width >= 0);\n          var bytesNeeded = Math.ceil(width / 26) | 0;\n          var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n          this._expand(bytesNeeded);\n\n          if (bitsLeft > 0) {\n            bytesNeeded--;\n          } // Handle complete words\n\n\n          for (var i = 0; i < bytesNeeded; i++) {\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n          } // Handle the residue\n\n\n          if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n          } // And remove leading zeroes\n\n\n          return this.strip();\n        };\n\n        BN.prototype.notn = function notn(width) {\n          return this.clone().inotn(width);\n        }; // Set `bit` of `this`\n\n\n        BN.prototype.setn = function setn(bit, val) {\n          assert(typeof bit === 'number' && bit >= 0);\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n\n          this._expand(off + 1);\n\n          if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n          } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n          }\n\n          return this.strip();\n        }; // Add `num` to `this` in-place\n\n\n        BN.prototype.iadd = function iadd(num) {\n          var r; // negative + positive\n\n          if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign(); // positive + negative\n          } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n          } // a.length > b.length\n\n\n          var a, b;\n\n          if (this.length > num.length) {\n            a = this;\n            b = num;\n          } else {\n            a = num;\n            b = this;\n          }\n\n          var carry = 0;\n\n          for (var i = 0; i < b.length; i++) {\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n          }\n\n          for (; carry !== 0 && i < a.length; i++) {\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n          }\n\n          this.length = a.length;\n\n          if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++; // Copy the rest of the words\n          } else if (a !== this) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n\n          return this;\n        }; // Add `num` to `this`\n\n\n        BN.prototype.add = function add(num) {\n          var res;\n\n          if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n          } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n          }\n\n          if (this.length > num.length) return this.clone().iadd(num);\n          return num.clone().iadd(this);\n        }; // Subtract `num` from `this` in-place\n\n\n        BN.prototype.isub = function isub(num) {\n          // this - (-num) = this + num\n          if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign(); // -this - num = -(this + num)\n          } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n          } // At this point both numbers are positive\n\n\n          var cmp = this.cmp(num); // Optimization - zeroify\n\n          if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n          } // a > b\n\n\n          var a, b;\n\n          if (cmp > 0) {\n            a = this;\n            b = num;\n          } else {\n            a = num;\n            b = this;\n          }\n\n          var carry = 0;\n\n          for (var i = 0; i < b.length; i++) {\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n          }\n\n          for (; carry !== 0 && i < a.length; i++) {\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n          } // Copy rest of the words\n\n\n          if (carry === 0 && i < a.length && a !== this) {\n            for (; i < a.length; i++) {\n              this.words[i] = a.words[i];\n            }\n          }\n\n          this.length = Math.max(this.length, i);\n\n          if (a !== this) {\n            this.negative = 1;\n          }\n\n          return this.strip();\n        }; // Subtract `num` from `this`\n\n\n        BN.prototype.sub = function sub(num) {\n          return this.clone().isub(num);\n        };\n\n        function smallMulTo(self, num, out) {\n          out.negative = num.negative ^ self.negative;\n          var len = self.length + num.length | 0;\n          out.length = len;\n          len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n          var a = self.words[0] | 0;\n          var b = num.words[0] | 0;\n          var r = a * b;\n          var lo = r & 0x3ffffff;\n          var carry = r / 0x4000000 | 0;\n          out.words[0] = lo;\n\n          for (var k = 1; k < len; k++) {\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n\n            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n              var i = k - j | 0;\n              a = self.words[i] | 0;\n              b = num.words[j] | 0;\n              r = a * b + rword;\n              ncarry += r / 0x4000000 | 0;\n              rword = r & 0x3ffffff;\n            }\n\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n          }\n\n          if (carry !== 0) {\n            out.words[k] = carry | 0;\n          } else {\n            out.length--;\n          }\n\n          return out.strip();\n        } // TODO(indutny): it may be reasonable to omit it for users who don't need\n        // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n        // multiplication (like elliptic secp256k1).\n\n\n        var comb10MulTo = function comb10MulTo(self, num, out) {\n          var a = self.words;\n          var b = num.words;\n          var o = out.words;\n          var c = 0;\n          var lo;\n          var mid;\n          var hi;\n          var a0 = a[0] | 0;\n          var al0 = a0 & 0x1fff;\n          var ah0 = a0 >>> 13;\n          var a1 = a[1] | 0;\n          var al1 = a1 & 0x1fff;\n          var ah1 = a1 >>> 13;\n          var a2 = a[2] | 0;\n          var al2 = a2 & 0x1fff;\n          var ah2 = a2 >>> 13;\n          var a3 = a[3] | 0;\n          var al3 = a3 & 0x1fff;\n          var ah3 = a3 >>> 13;\n          var a4 = a[4] | 0;\n          var al4 = a4 & 0x1fff;\n          var ah4 = a4 >>> 13;\n          var a5 = a[5] | 0;\n          var al5 = a5 & 0x1fff;\n          var ah5 = a5 >>> 13;\n          var a6 = a[6] | 0;\n          var al6 = a6 & 0x1fff;\n          var ah6 = a6 >>> 13;\n          var a7 = a[7] | 0;\n          var al7 = a7 & 0x1fff;\n          var ah7 = a7 >>> 13;\n          var a8 = a[8] | 0;\n          var al8 = a8 & 0x1fff;\n          var ah8 = a8 >>> 13;\n          var a9 = a[9] | 0;\n          var al9 = a9 & 0x1fff;\n          var ah9 = a9 >>> 13;\n          var b0 = b[0] | 0;\n          var bl0 = b0 & 0x1fff;\n          var bh0 = b0 >>> 13;\n          var b1 = b[1] | 0;\n          var bl1 = b1 & 0x1fff;\n          var bh1 = b1 >>> 13;\n          var b2 = b[2] | 0;\n          var bl2 = b2 & 0x1fff;\n          var bh2 = b2 >>> 13;\n          var b3 = b[3] | 0;\n          var bl3 = b3 & 0x1fff;\n          var bh3 = b3 >>> 13;\n          var b4 = b[4] | 0;\n          var bl4 = b4 & 0x1fff;\n          var bh4 = b4 >>> 13;\n          var b5 = b[5] | 0;\n          var bl5 = b5 & 0x1fff;\n          var bh5 = b5 >>> 13;\n          var b6 = b[6] | 0;\n          var bl6 = b6 & 0x1fff;\n          var bh6 = b6 >>> 13;\n          var b7 = b[7] | 0;\n          var bl7 = b7 & 0x1fff;\n          var bh7 = b7 >>> 13;\n          var b8 = b[8] | 0;\n          var bl8 = b8 & 0x1fff;\n          var bh8 = b8 >>> 13;\n          var b9 = b[9] | 0;\n          var bl9 = b9 & 0x1fff;\n          var bh9 = b9 >>> 13;\n          out.negative = self.negative ^ num.negative;\n          out.length = 19;\n          /* k = 0 */\n\n          lo = Math.imul(al0, bl0);\n          mid = Math.imul(al0, bh0);\n          mid = mid + Math.imul(ah0, bl0) | 0;\n          hi = Math.imul(ah0, bh0);\n          var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n          w0 &= 0x3ffffff;\n          /* k = 1 */\n\n          lo = Math.imul(al1, bl0);\n          mid = Math.imul(al1, bh0);\n          mid = mid + Math.imul(ah1, bl0) | 0;\n          hi = Math.imul(ah1, bh0);\n          lo = lo + Math.imul(al0, bl1) | 0;\n          mid = mid + Math.imul(al0, bh1) | 0;\n          mid = mid + Math.imul(ah0, bl1) | 0;\n          hi = hi + Math.imul(ah0, bh1) | 0;\n          var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n          w1 &= 0x3ffffff;\n          /* k = 2 */\n\n          lo = Math.imul(al2, bl0);\n          mid = Math.imul(al2, bh0);\n          mid = mid + Math.imul(ah2, bl0) | 0;\n          hi = Math.imul(ah2, bh0);\n          lo = lo + Math.imul(al1, bl1) | 0;\n          mid = mid + Math.imul(al1, bh1) | 0;\n          mid = mid + Math.imul(ah1, bl1) | 0;\n          hi = hi + Math.imul(ah1, bh1) | 0;\n          lo = lo + Math.imul(al0, bl2) | 0;\n          mid = mid + Math.imul(al0, bh2) | 0;\n          mid = mid + Math.imul(ah0, bl2) | 0;\n          hi = hi + Math.imul(ah0, bh2) | 0;\n          var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n          w2 &= 0x3ffffff;\n          /* k = 3 */\n\n          lo = Math.imul(al3, bl0);\n          mid = Math.imul(al3, bh0);\n          mid = mid + Math.imul(ah3, bl0) | 0;\n          hi = Math.imul(ah3, bh0);\n          lo = lo + Math.imul(al2, bl1) | 0;\n          mid = mid + Math.imul(al2, bh1) | 0;\n          mid = mid + Math.imul(ah2, bl1) | 0;\n          hi = hi + Math.imul(ah2, bh1) | 0;\n          lo = lo + Math.imul(al1, bl2) | 0;\n          mid = mid + Math.imul(al1, bh2) | 0;\n          mid = mid + Math.imul(ah1, bl2) | 0;\n          hi = hi + Math.imul(ah1, bh2) | 0;\n          lo = lo + Math.imul(al0, bl3) | 0;\n          mid = mid + Math.imul(al0, bh3) | 0;\n          mid = mid + Math.imul(ah0, bl3) | 0;\n          hi = hi + Math.imul(ah0, bh3) | 0;\n          var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n          w3 &= 0x3ffffff;\n          /* k = 4 */\n\n          lo = Math.imul(al4, bl0);\n          mid = Math.imul(al4, bh0);\n          mid = mid + Math.imul(ah4, bl0) | 0;\n          hi = Math.imul(ah4, bh0);\n          lo = lo + Math.imul(al3, bl1) | 0;\n          mid = mid + Math.imul(al3, bh1) | 0;\n          mid = mid + Math.imul(ah3, bl1) | 0;\n          hi = hi + Math.imul(ah3, bh1) | 0;\n          lo = lo + Math.imul(al2, bl2) | 0;\n          mid = mid + Math.imul(al2, bh2) | 0;\n          mid = mid + Math.imul(ah2, bl2) | 0;\n          hi = hi + Math.imul(ah2, bh2) | 0;\n          lo = lo + Math.imul(al1, bl3) | 0;\n          mid = mid + Math.imul(al1, bh3) | 0;\n          mid = mid + Math.imul(ah1, bl3) | 0;\n          hi = hi + Math.imul(ah1, bh3) | 0;\n          lo = lo + Math.imul(al0, bl4) | 0;\n          mid = mid + Math.imul(al0, bh4) | 0;\n          mid = mid + Math.imul(ah0, bl4) | 0;\n          hi = hi + Math.imul(ah0, bh4) | 0;\n          var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n          w4 &= 0x3ffffff;\n          /* k = 5 */\n\n          lo = Math.imul(al5, bl0);\n          mid = Math.imul(al5, bh0);\n          mid = mid + Math.imul(ah5, bl0) | 0;\n          hi = Math.imul(ah5, bh0);\n          lo = lo + Math.imul(al4, bl1) | 0;\n          mid = mid + Math.imul(al4, bh1) | 0;\n          mid = mid + Math.imul(ah4, bl1) | 0;\n          hi = hi + Math.imul(ah4, bh1) | 0;\n          lo = lo + Math.imul(al3, bl2) | 0;\n          mid = mid + Math.imul(al3, bh2) | 0;\n          mid = mid + Math.imul(ah3, bl2) | 0;\n          hi = hi + Math.imul(ah3, bh2) | 0;\n          lo = lo + Math.imul(al2, bl3) | 0;\n          mid = mid + Math.imul(al2, bh3) | 0;\n          mid = mid + Math.imul(ah2, bl3) | 0;\n          hi = hi + Math.imul(ah2, bh3) | 0;\n          lo = lo + Math.imul(al1, bl4) | 0;\n          mid = mid + Math.imul(al1, bh4) | 0;\n          mid = mid + Math.imul(ah1, bl4) | 0;\n          hi = hi + Math.imul(ah1, bh4) | 0;\n          lo = lo + Math.imul(al0, bl5) | 0;\n          mid = mid + Math.imul(al0, bh5) | 0;\n          mid = mid + Math.imul(ah0, bl5) | 0;\n          hi = hi + Math.imul(ah0, bh5) | 0;\n          var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n          w5 &= 0x3ffffff;\n          /* k = 6 */\n\n          lo = Math.imul(al6, bl0);\n          mid = Math.imul(al6, bh0);\n          mid = mid + Math.imul(ah6, bl0) | 0;\n          hi = Math.imul(ah6, bh0);\n          lo = lo + Math.imul(al5, bl1) | 0;\n          mid = mid + Math.imul(al5, bh1) | 0;\n          mid = mid + Math.imul(ah5, bl1) | 0;\n          hi = hi + Math.imul(ah5, bh1) | 0;\n          lo = lo + Math.imul(al4, bl2) | 0;\n          mid = mid + Math.imul(al4, bh2) | 0;\n          mid = mid + Math.imul(ah4, bl2) | 0;\n          hi = hi + Math.imul(ah4, bh2) | 0;\n          lo = lo + Math.imul(al3, bl3) | 0;\n          mid = mid + Math.imul(al3, bh3) | 0;\n          mid = mid + Math.imul(ah3, bl3) | 0;\n          hi = hi + Math.imul(ah3, bh3) | 0;\n          lo = lo + Math.imul(al2, bl4) | 0;\n          mid = mid + Math.imul(al2, bh4) | 0;\n          mid = mid + Math.imul(ah2, bl4) | 0;\n          hi = hi + Math.imul(ah2, bh4) | 0;\n          lo = lo + Math.imul(al1, bl5) | 0;\n          mid = mid + Math.imul(al1, bh5) | 0;\n          mid = mid + Math.imul(ah1, bl5) | 0;\n          hi = hi + Math.imul(ah1, bh5) | 0;\n          lo = lo + Math.imul(al0, bl6) | 0;\n          mid = mid + Math.imul(al0, bh6) | 0;\n          mid = mid + Math.imul(ah0, bl6) | 0;\n          hi = hi + Math.imul(ah0, bh6) | 0;\n          var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n          w6 &= 0x3ffffff;\n          /* k = 7 */\n\n          lo = Math.imul(al7, bl0);\n          mid = Math.imul(al7, bh0);\n          mid = mid + Math.imul(ah7, bl0) | 0;\n          hi = Math.imul(ah7, bh0);\n          lo = lo + Math.imul(al6, bl1) | 0;\n          mid = mid + Math.imul(al6, bh1) | 0;\n          mid = mid + Math.imul(ah6, bl1) | 0;\n          hi = hi + Math.imul(ah6, bh1) | 0;\n          lo = lo + Math.imul(al5, bl2) | 0;\n          mid = mid + Math.imul(al5, bh2) | 0;\n          mid = mid + Math.imul(ah5, bl2) | 0;\n          hi = hi + Math.imul(ah5, bh2) | 0;\n          lo = lo + Math.imul(al4, bl3) | 0;\n          mid = mid + Math.imul(al4, bh3) | 0;\n          mid = mid + Math.imul(ah4, bl3) | 0;\n          hi = hi + Math.imul(ah4, bh3) | 0;\n          lo = lo + Math.imul(al3, bl4) | 0;\n          mid = mid + Math.imul(al3, bh4) | 0;\n          mid = mid + Math.imul(ah3, bl4) | 0;\n          hi = hi + Math.imul(ah3, bh4) | 0;\n          lo = lo + Math.imul(al2, bl5) | 0;\n          mid = mid + Math.imul(al2, bh5) | 0;\n          mid = mid + Math.imul(ah2, bl5) | 0;\n          hi = hi + Math.imul(ah2, bh5) | 0;\n          lo = lo + Math.imul(al1, bl6) | 0;\n          mid = mid + Math.imul(al1, bh6) | 0;\n          mid = mid + Math.imul(ah1, bl6) | 0;\n          hi = hi + Math.imul(ah1, bh6) | 0;\n          lo = lo + Math.imul(al0, bl7) | 0;\n          mid = mid + Math.imul(al0, bh7) | 0;\n          mid = mid + Math.imul(ah0, bl7) | 0;\n          hi = hi + Math.imul(ah0, bh7) | 0;\n          var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n          w7 &= 0x3ffffff;\n          /* k = 8 */\n\n          lo = Math.imul(al8, bl0);\n          mid = Math.imul(al8, bh0);\n          mid = mid + Math.imul(ah8, bl0) | 0;\n          hi = Math.imul(ah8, bh0);\n          lo = lo + Math.imul(al7, bl1) | 0;\n          mid = mid + Math.imul(al7, bh1) | 0;\n          mid = mid + Math.imul(ah7, bl1) | 0;\n          hi = hi + Math.imul(ah7, bh1) | 0;\n          lo = lo + Math.imul(al6, bl2) | 0;\n          mid = mid + Math.imul(al6, bh2) | 0;\n          mid = mid + Math.imul(ah6, bl2) | 0;\n          hi = hi + Math.imul(ah6, bh2) | 0;\n          lo = lo + Math.imul(al5, bl3) | 0;\n          mid = mid + Math.imul(al5, bh3) | 0;\n          mid = mid + Math.imul(ah5, bl3) | 0;\n          hi = hi + Math.imul(ah5, bh3) | 0;\n          lo = lo + Math.imul(al4, bl4) | 0;\n          mid = mid + Math.imul(al4, bh4) | 0;\n          mid = mid + Math.imul(ah4, bl4) | 0;\n          hi = hi + Math.imul(ah4, bh4) | 0;\n          lo = lo + Math.imul(al3, bl5) | 0;\n          mid = mid + Math.imul(al3, bh5) | 0;\n          mid = mid + Math.imul(ah3, bl5) | 0;\n          hi = hi + Math.imul(ah3, bh5) | 0;\n          lo = lo + Math.imul(al2, bl6) | 0;\n          mid = mid + Math.imul(al2, bh6) | 0;\n          mid = mid + Math.imul(ah2, bl6) | 0;\n          hi = hi + Math.imul(ah2, bh6) | 0;\n          lo = lo + Math.imul(al1, bl7) | 0;\n          mid = mid + Math.imul(al1, bh7) | 0;\n          mid = mid + Math.imul(ah1, bl7) | 0;\n          hi = hi + Math.imul(ah1, bh7) | 0;\n          lo = lo + Math.imul(al0, bl8) | 0;\n          mid = mid + Math.imul(al0, bh8) | 0;\n          mid = mid + Math.imul(ah0, bl8) | 0;\n          hi = hi + Math.imul(ah0, bh8) | 0;\n          var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n          w8 &= 0x3ffffff;\n          /* k = 9 */\n\n          lo = Math.imul(al9, bl0);\n          mid = Math.imul(al9, bh0);\n          mid = mid + Math.imul(ah9, bl0) | 0;\n          hi = Math.imul(ah9, bh0);\n          lo = lo + Math.imul(al8, bl1) | 0;\n          mid = mid + Math.imul(al8, bh1) | 0;\n          mid = mid + Math.imul(ah8, bl1) | 0;\n          hi = hi + Math.imul(ah8, bh1) | 0;\n          lo = lo + Math.imul(al7, bl2) | 0;\n          mid = mid + Math.imul(al7, bh2) | 0;\n          mid = mid + Math.imul(ah7, bl2) | 0;\n          hi = hi + Math.imul(ah7, bh2) | 0;\n          lo = lo + Math.imul(al6, bl3) | 0;\n          mid = mid + Math.imul(al6, bh3) | 0;\n          mid = mid + Math.imul(ah6, bl3) | 0;\n          hi = hi + Math.imul(ah6, bh3) | 0;\n          lo = lo + Math.imul(al5, bl4) | 0;\n          mid = mid + Math.imul(al5, bh4) | 0;\n          mid = mid + Math.imul(ah5, bl4) | 0;\n          hi = hi + Math.imul(ah5, bh4) | 0;\n          lo = lo + Math.imul(al4, bl5) | 0;\n          mid = mid + Math.imul(al4, bh5) | 0;\n          mid = mid + Math.imul(ah4, bl5) | 0;\n          hi = hi + Math.imul(ah4, bh5) | 0;\n          lo = lo + Math.imul(al3, bl6) | 0;\n          mid = mid + Math.imul(al3, bh6) | 0;\n          mid = mid + Math.imul(ah3, bl6) | 0;\n          hi = hi + Math.imul(ah3, bh6) | 0;\n          lo = lo + Math.imul(al2, bl7) | 0;\n          mid = mid + Math.imul(al2, bh7) | 0;\n          mid = mid + Math.imul(ah2, bl7) | 0;\n          hi = hi + Math.imul(ah2, bh7) | 0;\n          lo = lo + Math.imul(al1, bl8) | 0;\n          mid = mid + Math.imul(al1, bh8) | 0;\n          mid = mid + Math.imul(ah1, bl8) | 0;\n          hi = hi + Math.imul(ah1, bh8) | 0;\n          lo = lo + Math.imul(al0, bl9) | 0;\n          mid = mid + Math.imul(al0, bh9) | 0;\n          mid = mid + Math.imul(ah0, bl9) | 0;\n          hi = hi + Math.imul(ah0, bh9) | 0;\n          var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n          w9 &= 0x3ffffff;\n          /* k = 10 */\n\n          lo = Math.imul(al9, bl1);\n          mid = Math.imul(al9, bh1);\n          mid = mid + Math.imul(ah9, bl1) | 0;\n          hi = Math.imul(ah9, bh1);\n          lo = lo + Math.imul(al8, bl2) | 0;\n          mid = mid + Math.imul(al8, bh2) | 0;\n          mid = mid + Math.imul(ah8, bl2) | 0;\n          hi = hi + Math.imul(ah8, bh2) | 0;\n          lo = lo + Math.imul(al7, bl3) | 0;\n          mid = mid + Math.imul(al7, bh3) | 0;\n          mid = mid + Math.imul(ah7, bl3) | 0;\n          hi = hi + Math.imul(ah7, bh3) | 0;\n          lo = lo + Math.imul(al6, bl4) | 0;\n          mid = mid + Math.imul(al6, bh4) | 0;\n          mid = mid + Math.imul(ah6, bl4) | 0;\n          hi = hi + Math.imul(ah6, bh4) | 0;\n          lo = lo + Math.imul(al5, bl5) | 0;\n          mid = mid + Math.imul(al5, bh5) | 0;\n          mid = mid + Math.imul(ah5, bl5) | 0;\n          hi = hi + Math.imul(ah5, bh5) | 0;\n          lo = lo + Math.imul(al4, bl6) | 0;\n          mid = mid + Math.imul(al4, bh6) | 0;\n          mid = mid + Math.imul(ah4, bl6) | 0;\n          hi = hi + Math.imul(ah4, bh6) | 0;\n          lo = lo + Math.imul(al3, bl7) | 0;\n          mid = mid + Math.imul(al3, bh7) | 0;\n          mid = mid + Math.imul(ah3, bl7) | 0;\n          hi = hi + Math.imul(ah3, bh7) | 0;\n          lo = lo + Math.imul(al2, bl8) | 0;\n          mid = mid + Math.imul(al2, bh8) | 0;\n          mid = mid + Math.imul(ah2, bl8) | 0;\n          hi = hi + Math.imul(ah2, bh8) | 0;\n          lo = lo + Math.imul(al1, bl9) | 0;\n          mid = mid + Math.imul(al1, bh9) | 0;\n          mid = mid + Math.imul(ah1, bl9) | 0;\n          hi = hi + Math.imul(ah1, bh9) | 0;\n          var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n          w10 &= 0x3ffffff;\n          /* k = 11 */\n\n          lo = Math.imul(al9, bl2);\n          mid = Math.imul(al9, bh2);\n          mid = mid + Math.imul(ah9, bl2) | 0;\n          hi = Math.imul(ah9, bh2);\n          lo = lo + Math.imul(al8, bl3) | 0;\n          mid = mid + Math.imul(al8, bh3) | 0;\n          mid = mid + Math.imul(ah8, bl3) | 0;\n          hi = hi + Math.imul(ah8, bh3) | 0;\n          lo = lo + Math.imul(al7, bl4) | 0;\n          mid = mid + Math.imul(al7, bh4) | 0;\n          mid = mid + Math.imul(ah7, bl4) | 0;\n          hi = hi + Math.imul(ah7, bh4) | 0;\n          lo = lo + Math.imul(al6, bl5) | 0;\n          mid = mid + Math.imul(al6, bh5) | 0;\n          mid = mid + Math.imul(ah6, bl5) | 0;\n          hi = hi + Math.imul(ah6, bh5) | 0;\n          lo = lo + Math.imul(al5, bl6) | 0;\n          mid = mid + Math.imul(al5, bh6) | 0;\n          mid = mid + Math.imul(ah5, bl6) | 0;\n          hi = hi + Math.imul(ah5, bh6) | 0;\n          lo = lo + Math.imul(al4, bl7) | 0;\n          mid = mid + Math.imul(al4, bh7) | 0;\n          mid = mid + Math.imul(ah4, bl7) | 0;\n          hi = hi + Math.imul(ah4, bh7) | 0;\n          lo = lo + Math.imul(al3, bl8) | 0;\n          mid = mid + Math.imul(al3, bh8) | 0;\n          mid = mid + Math.imul(ah3, bl8) | 0;\n          hi = hi + Math.imul(ah3, bh8) | 0;\n          lo = lo + Math.imul(al2, bl9) | 0;\n          mid = mid + Math.imul(al2, bh9) | 0;\n          mid = mid + Math.imul(ah2, bl9) | 0;\n          hi = hi + Math.imul(ah2, bh9) | 0;\n          var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n          w11 &= 0x3ffffff;\n          /* k = 12 */\n\n          lo = Math.imul(al9, bl3);\n          mid = Math.imul(al9, bh3);\n          mid = mid + Math.imul(ah9, bl3) | 0;\n          hi = Math.imul(ah9, bh3);\n          lo = lo + Math.imul(al8, bl4) | 0;\n          mid = mid + Math.imul(al8, bh4) | 0;\n          mid = mid + Math.imul(ah8, bl4) | 0;\n          hi = hi + Math.imul(ah8, bh4) | 0;\n          lo = lo + Math.imul(al7, bl5) | 0;\n          mid = mid + Math.imul(al7, bh5) | 0;\n          mid = mid + Math.imul(ah7, bl5) | 0;\n          hi = hi + Math.imul(ah7, bh5) | 0;\n          lo = lo + Math.imul(al6, bl6) | 0;\n          mid = mid + Math.imul(al6, bh6) | 0;\n          mid = mid + Math.imul(ah6, bl6) | 0;\n          hi = hi + Math.imul(ah6, bh6) | 0;\n          lo = lo + Math.imul(al5, bl7) | 0;\n          mid = mid + Math.imul(al5, bh7) | 0;\n          mid = mid + Math.imul(ah5, bl7) | 0;\n          hi = hi + Math.imul(ah5, bh7) | 0;\n          lo = lo + Math.imul(al4, bl8) | 0;\n          mid = mid + Math.imul(al4, bh8) | 0;\n          mid = mid + Math.imul(ah4, bl8) | 0;\n          hi = hi + Math.imul(ah4, bh8) | 0;\n          lo = lo + Math.imul(al3, bl9) | 0;\n          mid = mid + Math.imul(al3, bh9) | 0;\n          mid = mid + Math.imul(ah3, bl9) | 0;\n          hi = hi + Math.imul(ah3, bh9) | 0;\n          var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n          w12 &= 0x3ffffff;\n          /* k = 13 */\n\n          lo = Math.imul(al9, bl4);\n          mid = Math.imul(al9, bh4);\n          mid = mid + Math.imul(ah9, bl4) | 0;\n          hi = Math.imul(ah9, bh4);\n          lo = lo + Math.imul(al8, bl5) | 0;\n          mid = mid + Math.imul(al8, bh5) | 0;\n          mid = mid + Math.imul(ah8, bl5) | 0;\n          hi = hi + Math.imul(ah8, bh5) | 0;\n          lo = lo + Math.imul(al7, bl6) | 0;\n          mid = mid + Math.imul(al7, bh6) | 0;\n          mid = mid + Math.imul(ah7, bl6) | 0;\n          hi = hi + Math.imul(ah7, bh6) | 0;\n          lo = lo + Math.imul(al6, bl7) | 0;\n          mid = mid + Math.imul(al6, bh7) | 0;\n          mid = mid + Math.imul(ah6, bl7) | 0;\n          hi = hi + Math.imul(ah6, bh7) | 0;\n          lo = lo + Math.imul(al5, bl8) | 0;\n          mid = mid + Math.imul(al5, bh8) | 0;\n          mid = mid + Math.imul(ah5, bl8) | 0;\n          hi = hi + Math.imul(ah5, bh8) | 0;\n          lo = lo + Math.imul(al4, bl9) | 0;\n          mid = mid + Math.imul(al4, bh9) | 0;\n          mid = mid + Math.imul(ah4, bl9) | 0;\n          hi = hi + Math.imul(ah4, bh9) | 0;\n          var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n          w13 &= 0x3ffffff;\n          /* k = 14 */\n\n          lo = Math.imul(al9, bl5);\n          mid = Math.imul(al9, bh5);\n          mid = mid + Math.imul(ah9, bl5) | 0;\n          hi = Math.imul(ah9, bh5);\n          lo = lo + Math.imul(al8, bl6) | 0;\n          mid = mid + Math.imul(al8, bh6) | 0;\n          mid = mid + Math.imul(ah8, bl6) | 0;\n          hi = hi + Math.imul(ah8, bh6) | 0;\n          lo = lo + Math.imul(al7, bl7) | 0;\n          mid = mid + Math.imul(al7, bh7) | 0;\n          mid = mid + Math.imul(ah7, bl7) | 0;\n          hi = hi + Math.imul(ah7, bh7) | 0;\n          lo = lo + Math.imul(al6, bl8) | 0;\n          mid = mid + Math.imul(al6, bh8) | 0;\n          mid = mid + Math.imul(ah6, bl8) | 0;\n          hi = hi + Math.imul(ah6, bh8) | 0;\n          lo = lo + Math.imul(al5, bl9) | 0;\n          mid = mid + Math.imul(al5, bh9) | 0;\n          mid = mid + Math.imul(ah5, bl9) | 0;\n          hi = hi + Math.imul(ah5, bh9) | 0;\n          var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n          w14 &= 0x3ffffff;\n          /* k = 15 */\n\n          lo = Math.imul(al9, bl6);\n          mid = Math.imul(al9, bh6);\n          mid = mid + Math.imul(ah9, bl6) | 0;\n          hi = Math.imul(ah9, bh6);\n          lo = lo + Math.imul(al8, bl7) | 0;\n          mid = mid + Math.imul(al8, bh7) | 0;\n          mid = mid + Math.imul(ah8, bl7) | 0;\n          hi = hi + Math.imul(ah8, bh7) | 0;\n          lo = lo + Math.imul(al7, bl8) | 0;\n          mid = mid + Math.imul(al7, bh8) | 0;\n          mid = mid + Math.imul(ah7, bl8) | 0;\n          hi = hi + Math.imul(ah7, bh8) | 0;\n          lo = lo + Math.imul(al6, bl9) | 0;\n          mid = mid + Math.imul(al6, bh9) | 0;\n          mid = mid + Math.imul(ah6, bl9) | 0;\n          hi = hi + Math.imul(ah6, bh9) | 0;\n          var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n          w15 &= 0x3ffffff;\n          /* k = 16 */\n\n          lo = Math.imul(al9, bl7);\n          mid = Math.imul(al9, bh7);\n          mid = mid + Math.imul(ah9, bl7) | 0;\n          hi = Math.imul(ah9, bh7);\n          lo = lo + Math.imul(al8, bl8) | 0;\n          mid = mid + Math.imul(al8, bh8) | 0;\n          mid = mid + Math.imul(ah8, bl8) | 0;\n          hi = hi + Math.imul(ah8, bh8) | 0;\n          lo = lo + Math.imul(al7, bl9) | 0;\n          mid = mid + Math.imul(al7, bh9) | 0;\n          mid = mid + Math.imul(ah7, bl9) | 0;\n          hi = hi + Math.imul(ah7, bh9) | 0;\n          var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n          w16 &= 0x3ffffff;\n          /* k = 17 */\n\n          lo = Math.imul(al9, bl8);\n          mid = Math.imul(al9, bh8);\n          mid = mid + Math.imul(ah9, bl8) | 0;\n          hi = Math.imul(ah9, bh8);\n          lo = lo + Math.imul(al8, bl9) | 0;\n          mid = mid + Math.imul(al8, bh9) | 0;\n          mid = mid + Math.imul(ah8, bl9) | 0;\n          hi = hi + Math.imul(ah8, bh9) | 0;\n          var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n          w17 &= 0x3ffffff;\n          /* k = 18 */\n\n          lo = Math.imul(al9, bl9);\n          mid = Math.imul(al9, bh9);\n          mid = mid + Math.imul(ah9, bl9) | 0;\n          hi = Math.imul(ah9, bh9);\n          var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n          w18 &= 0x3ffffff;\n          o[0] = w0;\n          o[1] = w1;\n          o[2] = w2;\n          o[3] = w3;\n          o[4] = w4;\n          o[5] = w5;\n          o[6] = w6;\n          o[7] = w7;\n          o[8] = w8;\n          o[9] = w9;\n          o[10] = w10;\n          o[11] = w11;\n          o[12] = w12;\n          o[13] = w13;\n          o[14] = w14;\n          o[15] = w15;\n          o[16] = w16;\n          o[17] = w17;\n          o[18] = w18;\n\n          if (c !== 0) {\n            o[19] = c;\n            out.length++;\n          }\n\n          return out;\n        }; // Polyfill comb\n\n\n        if (!Math.imul) {\n          comb10MulTo = smallMulTo;\n        }\n\n        function bigMulTo(self, num, out) {\n          out.negative = num.negative ^ self.negative;\n          out.length = self.length + num.length;\n          var carry = 0;\n          var hncarry = 0;\n\n          for (var k = 0; k < out.length - 1; k++) {\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n\n            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n              var i = k - j;\n              var a = self.words[i] | 0;\n              var b = num.words[j] | 0;\n              var r = a * b;\n              var lo = r & 0x3ffffff;\n              ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n              lo = lo + rword | 0;\n              rword = lo & 0x3ffffff;\n              ncarry = ncarry + (lo >>> 26) | 0;\n              hncarry += ncarry >>> 26;\n              ncarry &= 0x3ffffff;\n            }\n\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n          }\n\n          if (carry !== 0) {\n            out.words[k] = carry;\n          } else {\n            out.length--;\n          }\n\n          return out.strip();\n        }\n\n        function jumboMulTo(self, num, out) {\n          var fftm = new FFTM();\n          return fftm.mulp(self, num, out);\n        }\n\n        BN.prototype.mulTo = function mulTo(num, out) {\n          var res;\n          var len = this.length + num.length;\n\n          if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n          } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n          } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n          } else {\n            res = jumboMulTo(this, num, out);\n          }\n\n          return res;\n        }; // Cooley-Tukey algorithm for FFT\n        // slightly revisited to rely on looping instead of recursion\n\n\n        function FFTM(x, y) {\n          this.x = x;\n          this.y = y;\n        }\n\n        FFTM.prototype.makeRBT = function makeRBT(N) {\n          var t = new Array(N);\n          var l = BN.prototype._countBits(N) - 1;\n\n          for (var i = 0; i < N; i++) {\n            t[i] = this.revBin(i, l, N);\n          }\n\n          return t;\n        }; // Returns binary-reversed representation of `x`\n\n\n        FFTM.prototype.revBin = function revBin(x, l, N) {\n          if (x === 0 || x === N - 1) return x;\n          var rb = 0;\n\n          for (var i = 0; i < l; i++) {\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n          }\n\n          return rb;\n        }; // Performs \"tweedling\" phase, therefore 'emulating'\n        // behaviour of the recursive algorithm\n\n\n        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n          for (var i = 0; i < N; i++) {\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n          }\n        };\n\n        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n          this.permute(rbt, rws, iws, rtws, itws, N);\n\n          for (var s = 1; s < N; s <<= 1) {\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n\n            for (var p = 0; p < N; p += l) {\n              var rtwdf_ = rtwdf;\n              var itwdf_ = itwdf;\n\n              for (var j = 0; j < s; j++) {\n                var re = rtws[p + j];\n                var ie = itws[p + j];\n                var ro = rtws[p + j + s];\n                var io = itws[p + j + s];\n                var rx = rtwdf_ * ro - itwdf_ * io;\n                io = rtwdf_ * io + itwdf_ * ro;\n                ro = rx;\n                rtws[p + j] = re + ro;\n                itws[p + j] = ie + io;\n                rtws[p + j + s] = re - ro;\n                itws[p + j + s] = ie - io;\n                /* jshint maxdepth : false */\n\n                if (j !== l) {\n                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                  rtwdf_ = rx;\n                }\n              }\n            }\n          }\n        };\n\n        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n          var N = Math.max(m, n) | 1;\n          var odd = N & 1;\n          var i = 0;\n\n          for (N = N / 2 | 0; N; N = N >>> 1) {\n            i++;\n          }\n\n          return 1 << i + 1 + odd;\n        };\n\n        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n          if (N <= 1) return;\n\n          for (var i = 0; i < N / 2; i++) {\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n          }\n        };\n\n        FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n          var carry = 0;\n\n          for (var i = 0; i < N / 2; i++) {\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n\n            if (w < 0x4000000) {\n              carry = 0;\n            } else {\n              carry = w / 0x4000000 | 0;\n            }\n          }\n\n          return ws;\n        };\n\n        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n          var carry = 0;\n\n          for (var i = 0; i < len; i++) {\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n          } // Pad with zeroes\n\n\n          for (i = 2 * len; i < N; ++i) {\n            rws[i] = 0;\n          }\n\n          assert(carry === 0);\n          assert((carry & ~0x1fff) === 0);\n        };\n\n        FFTM.prototype.stub = function stub(N) {\n          var ph = new Array(N);\n\n          for (var i = 0; i < N; i++) {\n            ph[i] = 0;\n          }\n\n          return ph;\n        };\n\n        FFTM.prototype.mulp = function mulp(x, y, out) {\n          var N = 2 * this.guessLen13b(x.length, y.length);\n          var rbt = this.makeRBT(N);\n\n          var _ = this.stub(N);\n\n          var rws = new Array(N);\n          var rwst = new Array(N);\n          var iwst = new Array(N);\n          var nrws = new Array(N);\n          var nrwst = new Array(N);\n          var niwst = new Array(N);\n          var rmws = out.words;\n          rmws.length = N;\n          this.convert13b(x.words, x.length, rws, N);\n          this.convert13b(y.words, y.length, nrws, N);\n          this.transform(rws, _, rwst, iwst, N, rbt);\n          this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n          for (var i = 0; i < N; i++) {\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n          }\n\n          this.conjugate(rwst, iwst, N);\n          this.transform(rwst, iwst, rmws, _, N, rbt);\n          this.conjugate(rmws, _, N);\n          this.normalize13b(rmws, N);\n          out.negative = x.negative ^ y.negative;\n          out.length = x.length + y.length;\n          return out.strip();\n        }; // Multiply `this` by `num`\n\n\n        BN.prototype.mul = function mul(num) {\n          var out = new BN(null);\n          out.words = new Array(this.length + num.length);\n          return this.mulTo(num, out);\n        }; // Multiply employing FFT\n\n\n        BN.prototype.mulf = function mulf(num) {\n          var out = new BN(null);\n          out.words = new Array(this.length + num.length);\n          return jumboMulTo(this, num, out);\n        }; // In-place Multiplication\n\n\n        BN.prototype.imul = function imul(num) {\n          return this.clone().mulTo(num, this);\n        };\n\n        BN.prototype.imuln = function imuln(num) {\n          assert(typeof num === 'number');\n          assert(num < 0x4000000); // Carry\n\n          var carry = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n          }\n\n          if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n          }\n\n          return this;\n        };\n\n        BN.prototype.muln = function muln(num) {\n          return this.clone().imuln(num);\n        }; // `this` * `this`\n\n\n        BN.prototype.sqr = function sqr() {\n          return this.mul(this);\n        }; // `this` * `this` in-place\n\n\n        BN.prototype.isqr = function isqr() {\n          return this.imul(this.clone());\n        }; // Math.pow(`this`, `num`)\n\n\n        BN.prototype.pow = function pow(num) {\n          var w = toBitArray(num);\n          if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n          var res = this;\n\n          for (var i = 0; i < w.length; i++, res = res.sqr()) {\n            if (w[i] !== 0) break;\n          }\n\n          if (++i < w.length) {\n            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n              if (w[i] === 0) continue;\n              res = res.mul(q);\n            }\n          }\n\n          return res;\n        }; // Shift-left in-place\n\n\n        BN.prototype.iushln = function iushln(bits) {\n          assert(typeof bits === 'number' && bits >= 0);\n          var r = bits % 26;\n          var s = (bits - r) / 26;\n          var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n          var i;\n\n          if (r !== 0) {\n            var carry = 0;\n\n            for (i = 0; i < this.length; i++) {\n              var newCarry = this.words[i] & carryMask;\n              var c = (this.words[i] | 0) - newCarry << r;\n              this.words[i] = c | carry;\n              carry = newCarry >>> 26 - r;\n            }\n\n            if (carry) {\n              this.words[i] = carry;\n              this.length++;\n            }\n          }\n\n          if (s !== 0) {\n            for (i = this.length - 1; i >= 0; i--) {\n              this.words[i + s] = this.words[i];\n            }\n\n            for (i = 0; i < s; i++) {\n              this.words[i] = 0;\n            }\n\n            this.length += s;\n          }\n\n          return this.strip();\n        };\n\n        BN.prototype.ishln = function ishln(bits) {\n          // TODO(indutny): implement me\n          assert(this.negative === 0);\n          return this.iushln(bits);\n        }; // Shift-right in-place\n        // NOTE: `hint` is a lowest bit before trailing zeroes\n        // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n        BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n          assert(typeof bits === 'number' && bits >= 0);\n          var h;\n\n          if (hint) {\n            h = (hint - hint % 26) / 26;\n          } else {\n            h = 0;\n          }\n\n          var r = bits % 26;\n          var s = Math.min((bits - r) / 26, this.length);\n          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n          var maskedWords = extended;\n          h -= s;\n          h = Math.max(0, h); // Extended mode, copy masked part\n\n          if (maskedWords) {\n            for (var i = 0; i < s; i++) {\n              maskedWords.words[i] = this.words[i];\n            }\n\n            maskedWords.length = s;\n          }\n\n          if (s === 0) {// No-op, we should not move anything at all\n          } else if (this.length > s) {\n            this.length -= s;\n\n            for (i = 0; i < this.length; i++) {\n              this.words[i] = this.words[i + s];\n            }\n          } else {\n            this.words[0] = 0;\n            this.length = 1;\n          }\n\n          var carry = 0;\n\n          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n          } // Push carried bits as a mask\n\n\n          if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n          }\n\n          if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n          }\n\n          return this.strip();\n        };\n\n        BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n          // TODO(indutny): implement me\n          assert(this.negative === 0);\n          return this.iushrn(bits, hint, extended);\n        }; // Shift-left\n\n\n        BN.prototype.shln = function shln(bits) {\n          return this.clone().ishln(bits);\n        };\n\n        BN.prototype.ushln = function ushln(bits) {\n          return this.clone().iushln(bits);\n        }; // Shift-right\n\n\n        BN.prototype.shrn = function shrn(bits) {\n          return this.clone().ishrn(bits);\n        };\n\n        BN.prototype.ushrn = function ushrn(bits) {\n          return this.clone().iushrn(bits);\n        }; // Test if n bit is set\n\n\n        BN.prototype.testn = function testn(bit) {\n          assert(typeof bit === 'number' && bit >= 0);\n          var r = bit % 26;\n          var s = (bit - r) / 26;\n          var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n          if (this.length <= s) return false; // Check bit and return\n\n          var w = this.words[s];\n          return !!(w & q);\n        }; // Return only lowers bits of number (in-place)\n\n\n        BN.prototype.imaskn = function imaskn(bits) {\n          assert(typeof bits === 'number' && bits >= 0);\n          var r = bits % 26;\n          var s = (bits - r) / 26;\n          assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n          if (this.length <= s) {\n            return this;\n          }\n\n          if (r !== 0) {\n            s++;\n          }\n\n          this.length = Math.min(s, this.length);\n\n          if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n          }\n\n          return this.strip();\n        }; // Return only lowers bits of number\n\n\n        BN.prototype.maskn = function maskn(bits) {\n          return this.clone().imaskn(bits);\n        }; // Add plain number `num` to `this`\n\n\n        BN.prototype.iaddn = function iaddn(num) {\n          assert(typeof num === 'number');\n          assert(num < 0x4000000);\n          if (num < 0) return this.isubn(-num); // Possible sign change\n\n          if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) < num) {\n              this.words[0] = num - (this.words[0] | 0);\n              this.negative = 0;\n              return this;\n            }\n\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n          } // Add without checks\n\n\n          return this._iaddn(num);\n        };\n\n        BN.prototype._iaddn = function _iaddn(num) {\n          this.words[0] += num; // Carry\n\n          for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n            this.words[i] -= 0x4000000;\n\n            if (i === this.length - 1) {\n              this.words[i + 1] = 1;\n            } else {\n              this.words[i + 1]++;\n            }\n          }\n\n          this.length = Math.max(this.length, i + 1);\n          return this;\n        }; // Subtract plain number `num` from `this`\n\n\n        BN.prototype.isubn = function isubn(num) {\n          assert(typeof num === 'number');\n          assert(num < 0x4000000);\n          if (num < 0) return this.iaddn(-num);\n\n          if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n          }\n\n          this.words[0] -= num;\n\n          if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n          } else {\n            // Carry\n            for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n              this.words[i] += 0x4000000;\n              this.words[i + 1] -= 1;\n            }\n          }\n\n          return this.strip();\n        };\n\n        BN.prototype.addn = function addn(num) {\n          return this.clone().iaddn(num);\n        };\n\n        BN.prototype.subn = function subn(num) {\n          return this.clone().isubn(num);\n        };\n\n        BN.prototype.iabs = function iabs() {\n          this.negative = 0;\n          return this;\n        };\n\n        BN.prototype.abs = function abs() {\n          return this.clone().iabs();\n        };\n\n        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n          var len = num.length + shift;\n          var i;\n\n          this._expand(len);\n\n          var w;\n          var carry = 0;\n\n          for (i = 0; i < num.length; i++) {\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n          }\n\n          for (; i < this.length - shift; i++) {\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n          }\n\n          if (carry === 0) return this.strip(); // Subtraction overflow\n\n          assert(carry === -1);\n          carry = 0;\n\n          for (i = 0; i < this.length; i++) {\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n          }\n\n          this.negative = 1;\n          return this.strip();\n        };\n\n        BN.prototype._wordDiv = function _wordDiv(num, mode) {\n          var shift = this.length - num.length;\n          var a = this.clone();\n          var b = num; // Normalize\n\n          var bhi = b.words[b.length - 1] | 0;\n\n          var bhiBits = this._countBits(bhi);\n\n          shift = 26 - bhiBits;\n\n          if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n          } // Initialize quotient\n\n\n          var m = a.length - b.length;\n          var q;\n\n          if (mode !== 'mod') {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n\n            for (var i = 0; i < q.length; i++) {\n              q.words[i] = 0;\n            }\n          }\n\n          var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n          if (diff.negative === 0) {\n            a = diff;\n\n            if (q) {\n              q.words[m] = 1;\n            }\n          }\n\n          for (var j = m - 1; j >= 0; j--) {\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n            a._ishlnsubmul(b, qj, j);\n\n            while (a.negative !== 0) {\n              qj--;\n              a.negative = 0;\n\n              a._ishlnsubmul(b, 1, j);\n\n              if (!a.isZero()) {\n                a.negative ^= 1;\n              }\n            }\n\n            if (q) {\n              q.words[j] = qj;\n            }\n          }\n\n          if (q) {\n            q.strip();\n          }\n\n          a.strip(); // Denormalize\n\n          if (mode !== 'div' && shift !== 0) {\n            a.iushrn(shift);\n          }\n\n          return {\n            div: q || null,\n            mod: a\n          };\n        }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n        //       to `div` to request div only, or be absent to\n        //       request both div & mod\n        //       2) `positive` is true if unsigned mod is requested\n\n\n        BN.prototype.divmod = function divmod(num, mode, positive) {\n          assert(!num.isZero());\n\n          if (this.isZero()) {\n            return {\n              div: new BN(0),\n              mod: new BN(0)\n            };\n          }\n\n          var div, mod, res;\n\n          if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n\n            if (mode !== 'mod') {\n              div = res.div.neg();\n            }\n\n            if (mode !== 'div') {\n              mod = res.mod.neg();\n\n              if (positive && mod.negative !== 0) {\n                mod.iadd(num);\n              }\n            }\n\n            return {\n              div: div,\n              mod: mod\n            };\n          }\n\n          if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n\n            if (mode !== 'mod') {\n              div = res.div.neg();\n            }\n\n            return {\n              div: div,\n              mod: res.mod\n            };\n          }\n\n          if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n\n            if (mode !== 'div') {\n              mod = res.mod.neg();\n\n              if (positive && mod.negative !== 0) {\n                mod.isub(num);\n              }\n            }\n\n            return {\n              div: res.div,\n              mod: mod\n            };\n          } // Both numbers are positive at this point\n          // Strip both numbers to approximate shift value\n\n\n          if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n              div: new BN(0),\n              mod: this\n            };\n          } // Very short reduction\n\n\n          if (num.length === 1) {\n            if (mode === 'div') {\n              return {\n                div: this.divn(num.words[0]),\n                mod: null\n              };\n            }\n\n            if (mode === 'mod') {\n              return {\n                div: null,\n                mod: new BN(this.modn(num.words[0]))\n              };\n            }\n\n            return {\n              div: this.divn(num.words[0]),\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n\n          return this._wordDiv(num, mode);\n        }; // Find `this` / `num`\n\n\n        BN.prototype.div = function div(num) {\n          return this.divmod(num, 'div', false).div;\n        }; // Find `this` % `num`\n\n\n        BN.prototype.mod = function mod(num) {\n          return this.divmod(num, 'mod', false).mod;\n        };\n\n        BN.prototype.umod = function umod(num) {\n          return this.divmod(num, 'mod', true).mod;\n        }; // Find Round(`this` / `num`)\n\n\n        BN.prototype.divRound = function divRound(num) {\n          var dm = this.divmod(num); // Fast case - exact division\n\n          if (dm.mod.isZero()) return dm.div;\n          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n          var half = num.ushrn(1);\n          var r2 = num.andln(1);\n          var cmp = mod.cmp(half); // Round down\n\n          if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n        };\n\n        BN.prototype.modn = function modn(num) {\n          assert(num <= 0x3ffffff);\n          var p = (1 << 26) % num;\n          var acc = 0;\n\n          for (var i = this.length - 1; i >= 0; i--) {\n            acc = (p * acc + (this.words[i] | 0)) % num;\n          }\n\n          return acc;\n        }; // In-place division by number\n\n\n        BN.prototype.idivn = function idivn(num) {\n          assert(num <= 0x3ffffff);\n          var carry = 0;\n\n          for (var i = this.length - 1; i >= 0; i--) {\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n          }\n\n          return this.strip();\n        };\n\n        BN.prototype.divn = function divn(num) {\n          return this.clone().idivn(num);\n        };\n\n        BN.prototype.egcd = function egcd(p) {\n          assert(p.negative === 0);\n          assert(!p.isZero());\n          var x = this;\n          var y = p.clone();\n\n          if (x.negative !== 0) {\n            x = x.umod(p);\n          } else {\n            x = x.clone();\n          } // A * x + B * y = x\n\n\n          var A = new BN(1);\n          var B = new BN(0); // C * x + D * y = y\n\n          var C = new BN(0);\n          var D = new BN(1);\n          var g = 0;\n\n          while (x.isEven() && y.isEven()) {\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n          }\n\n          var yp = y.clone();\n          var xp = x.clone();\n\n          while (!x.isZero()) {\n            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {\n              ;\n            }\n\n            if (i > 0) {\n              x.iushrn(i);\n\n              while (i-- > 0) {\n                if (A.isOdd() || B.isOdd()) {\n                  A.iadd(yp);\n                  B.isub(xp);\n                }\n\n                A.iushrn(1);\n                B.iushrn(1);\n              }\n            }\n\n            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {\n              ;\n            }\n\n            if (j > 0) {\n              y.iushrn(j);\n\n              while (j-- > 0) {\n                if (C.isOdd() || D.isOdd()) {\n                  C.iadd(yp);\n                  D.isub(xp);\n                }\n\n                C.iushrn(1);\n                D.iushrn(1);\n              }\n            }\n\n            if (x.cmp(y) >= 0) {\n              x.isub(y);\n              A.isub(C);\n              B.isub(D);\n            } else {\n              y.isub(x);\n              C.isub(A);\n              D.isub(B);\n            }\n          }\n\n          return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n          };\n        }; // This is reduced incarnation of the binary EEA\n        // above, designated to invert members of the\n        // _prime_ fields F(p) at a maximal speed\n\n\n        BN.prototype._invmp = function _invmp(p) {\n          assert(p.negative === 0);\n          assert(!p.isZero());\n          var a = this;\n          var b = p.clone();\n\n          if (a.negative !== 0) {\n            a = a.umod(p);\n          } else {\n            a = a.clone();\n          }\n\n          var x1 = new BN(1);\n          var x2 = new BN(0);\n          var delta = b.clone();\n\n          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {\n              ;\n            }\n\n            if (i > 0) {\n              a.iushrn(i);\n\n              while (i-- > 0) {\n                if (x1.isOdd()) {\n                  x1.iadd(delta);\n                }\n\n                x1.iushrn(1);\n              }\n            }\n\n            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {\n              ;\n            }\n\n            if (j > 0) {\n              b.iushrn(j);\n\n              while (j-- > 0) {\n                if (x2.isOdd()) {\n                  x2.iadd(delta);\n                }\n\n                x2.iushrn(1);\n              }\n            }\n\n            if (a.cmp(b) >= 0) {\n              a.isub(b);\n              x1.isub(x2);\n            } else {\n              b.isub(a);\n              x2.isub(x1);\n            }\n          }\n\n          var res;\n\n          if (a.cmpn(1) === 0) {\n            res = x1;\n          } else {\n            res = x2;\n          }\n\n          if (res.cmpn(0) < 0) {\n            res.iadd(p);\n          }\n\n          return res;\n        };\n\n        BN.prototype.gcd = function gcd(num) {\n          if (this.isZero()) return num.abs();\n          if (num.isZero()) return this.abs();\n          var a = this.clone();\n          var b = num.clone();\n          a.negative = 0;\n          b.negative = 0; // Remove common factor of two\n\n          for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n            a.iushrn(1);\n            b.iushrn(1);\n          }\n\n          do {\n            while (a.isEven()) {\n              a.iushrn(1);\n            }\n\n            while (b.isEven()) {\n              b.iushrn(1);\n            }\n\n            var r = a.cmp(b);\n\n            if (r < 0) {\n              // Swap `a` and `b` to make `a` always bigger than `b`\n              var t = a;\n              a = b;\n              b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n              break;\n            }\n\n            a.isub(b);\n          } while (true);\n\n          return b.iushln(shift);\n        }; // Invert number in the field F(num)\n\n\n        BN.prototype.invm = function invm(num) {\n          return this.egcd(num).a.umod(num);\n        };\n\n        BN.prototype.isEven = function isEven() {\n          return (this.words[0] & 1) === 0;\n        };\n\n        BN.prototype.isOdd = function isOdd() {\n          return (this.words[0] & 1) === 1;\n        }; // And first word and num\n\n\n        BN.prototype.andln = function andln(num) {\n          return this.words[0] & num;\n        }; // Increment at the bit position in-line\n\n\n        BN.prototype.bincn = function bincn(bit) {\n          assert(typeof bit === 'number');\n          var r = bit % 26;\n          var s = (bit - r) / 26;\n          var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n          if (this.length <= s) {\n            this._expand(s + 1);\n\n            this.words[s] |= q;\n            return this;\n          } // Add bit and propagate, if needed\n\n\n          var carry = q;\n\n          for (var i = s; carry !== 0 && i < this.length; i++) {\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n          }\n\n          if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n          }\n\n          return this;\n        };\n\n        BN.prototype.isZero = function isZero() {\n          return this.length === 1 && this.words[0] === 0;\n        };\n\n        BN.prototype.cmpn = function cmpn(num) {\n          var negative = num < 0;\n          if (this.negative !== 0 && !negative) return -1;\n          if (this.negative === 0 && negative) return 1;\n          this.strip();\n          var res;\n\n          if (this.length > 1) {\n            res = 1;\n          } else {\n            if (negative) {\n              num = -num;\n            }\n\n            assert(num <= 0x3ffffff, 'Number is too big');\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n          }\n\n          if (this.negative !== 0) return -res | 0;\n          return res;\n        }; // Compare two numbers and return:\n        // 1 - if `this` > `num`\n        // 0 - if `this` == `num`\n        // -1 - if `this` < `num`\n\n\n        BN.prototype.cmp = function cmp(num) {\n          if (this.negative !== 0 && num.negative === 0) return -1;\n          if (this.negative === 0 && num.negative !== 0) return 1;\n          var res = this.ucmp(num);\n          if (this.negative !== 0) return -res | 0;\n          return res;\n        }; // Unsigned comparison\n\n\n        BN.prototype.ucmp = function ucmp(num) {\n          // At this point both numbers have the same sign\n          if (this.length > num.length) return 1;\n          if (this.length < num.length) return -1;\n          var res = 0;\n\n          for (var i = this.length - 1; i >= 0; i--) {\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n\n            if (a < b) {\n              res = -1;\n            } else if (a > b) {\n              res = 1;\n            }\n\n            break;\n          }\n\n          return res;\n        };\n\n        BN.prototype.gtn = function gtn(num) {\n          return this.cmpn(num) === 1;\n        };\n\n        BN.prototype.gt = function gt(num) {\n          return this.cmp(num) === 1;\n        };\n\n        BN.prototype.gten = function gten(num) {\n          return this.cmpn(num) >= 0;\n        };\n\n        BN.prototype.gte = function gte(num) {\n          return this.cmp(num) >= 0;\n        };\n\n        BN.prototype.ltn = function ltn(num) {\n          return this.cmpn(num) === -1;\n        };\n\n        BN.prototype.lt = function lt(num) {\n          return this.cmp(num) === -1;\n        };\n\n        BN.prototype.lten = function lten(num) {\n          return this.cmpn(num) <= 0;\n        };\n\n        BN.prototype.lte = function lte(num) {\n          return this.cmp(num) <= 0;\n        };\n\n        BN.prototype.eqn = function eqn(num) {\n          return this.cmpn(num) === 0;\n        };\n\n        BN.prototype.eq = function eq(num) {\n          return this.cmp(num) === 0;\n        }; //\n        // A reduce context, could be using montgomery or something better, depending\n        // on the `m` itself.\n        //\n\n\n        BN.red = function red(num) {\n          return new Red(num);\n        };\n\n        BN.prototype.toRed = function toRed(ctx) {\n          assert(!this.red, 'Already a number in reduction context');\n          assert(this.negative === 0, 'red works only with positives');\n          return ctx.convertTo(this)._forceRed(ctx);\n        };\n\n        BN.prototype.fromRed = function fromRed() {\n          assert(this.red, 'fromRed works only with numbers in reduction context');\n          return this.red.convertFrom(this);\n        };\n\n        BN.prototype._forceRed = function _forceRed(ctx) {\n          this.red = ctx;\n          return this;\n        };\n\n        BN.prototype.forceRed = function forceRed(ctx) {\n          assert(!this.red, 'Already a number in reduction context');\n          return this._forceRed(ctx);\n        };\n\n        BN.prototype.redAdd = function redAdd(num) {\n          assert(this.red, 'redAdd works only with red numbers');\n          return this.red.add(this, num);\n        };\n\n        BN.prototype.redIAdd = function redIAdd(num) {\n          assert(this.red, 'redIAdd works only with red numbers');\n          return this.red.iadd(this, num);\n        };\n\n        BN.prototype.redSub = function redSub(num) {\n          assert(this.red, 'redSub works only with red numbers');\n          return this.red.sub(this, num);\n        };\n\n        BN.prototype.redISub = function redISub(num) {\n          assert(this.red, 'redISub works only with red numbers');\n          return this.red.isub(this, num);\n        };\n\n        BN.prototype.redShl = function redShl(num) {\n          assert(this.red, 'redShl works only with red numbers');\n          return this.red.shl(this, num);\n        };\n\n        BN.prototype.redMul = function redMul(num) {\n          assert(this.red, 'redMul works only with red numbers');\n\n          this.red._verify2(this, num);\n\n          return this.red.mul(this, num);\n        };\n\n        BN.prototype.redIMul = function redIMul(num) {\n          assert(this.red, 'redMul works only with red numbers');\n\n          this.red._verify2(this, num);\n\n          return this.red.imul(this, num);\n        };\n\n        BN.prototype.redSqr = function redSqr() {\n          assert(this.red, 'redSqr works only with red numbers');\n\n          this.red._verify1(this);\n\n          return this.red.sqr(this);\n        };\n\n        BN.prototype.redISqr = function redISqr() {\n          assert(this.red, 'redISqr works only with red numbers');\n\n          this.red._verify1(this);\n\n          return this.red.isqr(this);\n        }; // Square root over p\n\n\n        BN.prototype.redSqrt = function redSqrt() {\n          assert(this.red, 'redSqrt works only with red numbers');\n\n          this.red._verify1(this);\n\n          return this.red.sqrt(this);\n        };\n\n        BN.prototype.redInvm = function redInvm() {\n          assert(this.red, 'redInvm works only with red numbers');\n\n          this.red._verify1(this);\n\n          return this.red.invm(this);\n        }; // Return negative clone of `this` % `red modulo`\n\n\n        BN.prototype.redNeg = function redNeg() {\n          assert(this.red, 'redNeg works only with red numbers');\n\n          this.red._verify1(this);\n\n          return this.red.neg(this);\n        };\n\n        BN.prototype.redPow = function redPow(num) {\n          assert(this.red && !num.red, 'redPow(normalNum)');\n\n          this.red._verify1(this);\n\n          return this.red.pow(this, num);\n        }; // Prime numbers with efficient reduction\n\n\n        var primes = {\n          k256: null,\n          p224: null,\n          p192: null,\n          p25519: null\n        }; // Pseudo-Mersenne prime\n\n        function MPrime(name, p) {\n          // P = 2 ^ N - K\n          this.name = name;\n          this.p = new BN(p, 16);\n          this.n = this.p.bitLength();\n          this.k = new BN(1).iushln(this.n).isub(this.p);\n          this.tmp = this._tmp();\n        }\n\n        MPrime.prototype._tmp = function _tmp() {\n          var tmp = new BN(null);\n          tmp.words = new Array(Math.ceil(this.n / 13));\n          return tmp;\n        };\n\n        MPrime.prototype.ireduce = function ireduce(num) {\n          // Assumes that `num` is less than `P^2`\n          // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n          var r = num;\n          var rlen;\n\n          do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n          } while (rlen > this.n);\n\n          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n          if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n          } else if (cmp > 0) {\n            r.isub(this.p);\n          } else {\n            r.strip();\n          }\n\n          return r;\n        };\n\n        MPrime.prototype.split = function split(input, out) {\n          input.iushrn(this.n, 0, out);\n        };\n\n        MPrime.prototype.imulK = function imulK(num) {\n          return num.imul(this.k);\n        };\n\n        function K256() {\n          MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n        }\n\n        inherits(K256, MPrime);\n\n        K256.prototype.split = function split(input, output) {\n          // 256 = 9 * 26 + 22\n          var mask = 0x3fffff;\n          var outLen = Math.min(input.length, 9);\n\n          for (var i = 0; i < outLen; i++) {\n            output.words[i] = input.words[i];\n          }\n\n          output.length = outLen;\n\n          if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n          } // Shift by 9 limbs\n\n\n          var prev = input.words[9];\n          output.words[output.length++] = prev & mask;\n\n          for (i = 10; i < input.length; i++) {\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n          }\n\n          prev >>>= 22;\n          input.words[i - 10] = prev;\n\n          if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n          } else {\n            input.length -= 9;\n          }\n        };\n\n        K256.prototype.imulK = function imulK(num) {\n          // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n          num.words[num.length] = 0;\n          num.words[num.length + 1] = 0;\n          num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n          var lo = 0;\n\n          for (var i = 0; i < num.length; i++) {\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n          } // Fast length reduction\n\n\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n\n            if (num.words[num.length - 1] === 0) {\n              num.length--;\n            }\n          }\n\n          return num;\n        };\n\n        function P224() {\n          MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n        }\n\n        inherits(P224, MPrime);\n\n        function P192() {\n          MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n        }\n\n        inherits(P192, MPrime);\n\n        function P25519() {\n          // 2 ^ 255 - 19\n          MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n        }\n\n        inherits(P25519, MPrime);\n\n        P25519.prototype.imulK = function imulK(num) {\n          // K = 0x13\n          var carry = 0;\n\n          for (var i = 0; i < num.length; i++) {\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n          }\n\n          if (carry !== 0) {\n            num.words[num.length++] = carry;\n          }\n\n          return num;\n        }; // Exported mostly for testing purposes, use plain name instead\n\n\n        BN._prime = function prime(name) {\n          // Cached version of prime\n          if (primes[name]) return primes[name];\n          var prime;\n\n          if (name === 'k256') {\n            prime = new K256();\n          } else if (name === 'p224') {\n            prime = new P224();\n          } else if (name === 'p192') {\n            prime = new P192();\n          } else if (name === 'p25519') {\n            prime = new P25519();\n          } else {\n            throw new Error('Unknown prime ' + name);\n          }\n\n          primes[name] = prime;\n          return prime;\n        }; //\n        // Base reduction engine\n        //\n\n\n        function Red(m) {\n          if (typeof m === 'string') {\n            var prime = BN._prime(m);\n\n            this.m = prime.p;\n            this.prime = prime;\n          } else {\n            assert(m.gtn(1), 'modulus must be greater than 1');\n            this.m = m;\n            this.prime = null;\n          }\n        }\n\n        Red.prototype._verify1 = function _verify1(a) {\n          assert(a.negative === 0, 'red works only with positives');\n          assert(a.red, 'red works only with red numbers');\n        };\n\n        Red.prototype._verify2 = function _verify2(a, b) {\n          assert((a.negative | b.negative) === 0, 'red works only with positives');\n          assert(a.red && a.red === b.red, 'red works only with red numbers');\n        };\n\n        Red.prototype.imod = function imod(a) {\n          if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n          return a.umod(this.m)._forceRed(this);\n        };\n\n        Red.prototype.neg = function neg(a) {\n          if (a.isZero()) {\n            return a.clone();\n          }\n\n          return this.m.sub(a)._forceRed(this);\n        };\n\n        Red.prototype.add = function add(a, b) {\n          this._verify2(a, b);\n\n          var res = a.add(b);\n\n          if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n          }\n\n          return res._forceRed(this);\n        };\n\n        Red.prototype.iadd = function iadd(a, b) {\n          this._verify2(a, b);\n\n          var res = a.iadd(b);\n\n          if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n          }\n\n          return res;\n        };\n\n        Red.prototype.sub = function sub(a, b) {\n          this._verify2(a, b);\n\n          var res = a.sub(b);\n\n          if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n          }\n\n          return res._forceRed(this);\n        };\n\n        Red.prototype.isub = function isub(a, b) {\n          this._verify2(a, b);\n\n          var res = a.isub(b);\n\n          if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n          }\n\n          return res;\n        };\n\n        Red.prototype.shl = function shl(a, num) {\n          this._verify1(a);\n\n          return this.imod(a.ushln(num));\n        };\n\n        Red.prototype.imul = function imul(a, b) {\n          this._verify2(a, b);\n\n          return this.imod(a.imul(b));\n        };\n\n        Red.prototype.mul = function mul(a, b) {\n          this._verify2(a, b);\n\n          return this.imod(a.mul(b));\n        };\n\n        Red.prototype.isqr = function isqr(a) {\n          return this.imul(a, a.clone());\n        };\n\n        Red.prototype.sqr = function sqr(a) {\n          return this.mul(a, a);\n        };\n\n        Red.prototype.sqrt = function sqrt(a) {\n          if (a.isZero()) return a.clone();\n          var mod3 = this.m.andln(3);\n          assert(mod3 % 2 === 1); // Fast case\n\n          if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n          } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n          //\n          // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n          var q = this.m.subn(1);\n          var s = 0;\n\n          while (!q.isZero() && q.andln(1) === 0) {\n            s++;\n            q.iushrn(1);\n          }\n\n          assert(!q.isZero());\n          var one = new BN(1).toRed(this);\n          var nOne = one.redNeg(); // Find quadratic non-residue\n          // NOTE: Max is such because of generalized Riemann hypothesis.\n\n          var lpow = this.m.subn(1).iushrn(1);\n          var z = this.m.bitLength();\n          z = new BN(2 * z * z).toRed(this);\n\n          while (this.pow(z, lpow).cmp(nOne) !== 0) {\n            z.redIAdd(nOne);\n          }\n\n          var c = this.pow(z, q);\n          var r = this.pow(a, q.addn(1).iushrn(1));\n          var t = this.pow(a, q);\n          var m = s;\n\n          while (t.cmp(one) !== 0) {\n            var tmp = t;\n\n            for (var i = 0; tmp.cmp(one) !== 0; i++) {\n              tmp = tmp.redSqr();\n            }\n\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n          }\n\n          return r;\n        };\n\n        Red.prototype.invm = function invm(a) {\n          var inv = a._invmp(this.m);\n\n          if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n          } else {\n            return this.imod(inv);\n          }\n        };\n\n        Red.prototype.pow = function pow(a, num) {\n          if (num.isZero()) return new BN(1).toRed(this);\n          if (num.cmpn(1) === 0) return a.clone();\n          var windowSize = 4;\n          var wnd = new Array(1 << windowSize);\n          wnd[0] = new BN(1).toRed(this);\n          wnd[1] = a;\n\n          for (var i = 2; i < wnd.length; i++) {\n            wnd[i] = this.mul(wnd[i - 1], a);\n          }\n\n          var res = wnd[0];\n          var current = 0;\n          var currentLen = 0;\n          var start = num.bitLength() % 26;\n\n          if (start === 0) {\n            start = 26;\n          }\n\n          for (i = num.length - 1; i >= 0; i--) {\n            var word = num.words[i];\n\n            for (var j = start - 1; j >= 0; j--) {\n              var bit = word >> j & 1;\n\n              if (res !== wnd[0]) {\n                res = this.sqr(res);\n              }\n\n              if (bit === 0 && current === 0) {\n                currentLen = 0;\n                continue;\n              }\n\n              current <<= 1;\n              current |= bit;\n              currentLen++;\n              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n              res = this.mul(res, wnd[current]);\n              currentLen = 0;\n              current = 0;\n            }\n\n            start = 26;\n          }\n\n          return res;\n        };\n\n        Red.prototype.convertTo = function convertTo(num) {\n          var r = num.umod(this.m);\n          return r === num ? r.clone() : r;\n        };\n\n        Red.prototype.convertFrom = function convertFrom(num) {\n          var res = num.clone();\n          res.red = null;\n          return res;\n        }; //\n        // Montgomery method engine\n        //\n\n\n        BN.mont = function mont(num) {\n          return new Mont(num);\n        };\n\n        function Mont(m) {\n          Red.call(this, m);\n          this.shift = this.m.bitLength();\n\n          if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n          }\n\n          this.r = new BN(1).iushln(this.shift);\n          this.r2 = this.imod(this.r.sqr());\n          this.rinv = this.r._invmp(this.m);\n          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n          this.minv = this.minv.umod(this.r);\n          this.minv = this.r.sub(this.minv);\n        }\n\n        inherits(Mont, Red);\n\n        Mont.prototype.convertTo = function convertTo(num) {\n          return this.imod(num.ushln(this.shift));\n        };\n\n        Mont.prototype.convertFrom = function convertFrom(num) {\n          var r = this.imod(num.mul(this.rinv));\n          r.red = null;\n          return r;\n        };\n\n        Mont.prototype.imul = function imul(a, b) {\n          if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n          }\n\n          var t = a.imul(b);\n          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n          var u = t.isub(c).iushrn(this.shift);\n          var res = u;\n\n          if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n          } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n          }\n\n          return res._forceRed(this);\n        };\n\n        Mont.prototype.mul = function mul(a, b) {\n          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n          var t = a.mul(b);\n          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n          var u = t.isub(c).iushrn(this.shift);\n          var res = u;\n\n          if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n          } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n          }\n\n          return res._forceRed(this);\n        };\n\n        Mont.prototype.invm = function invm(a) {\n          // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n          var res = this.imod(a._invmp(this.m).mul(this.r2));\n          return res._forceRed(this);\n        };\n      })(typeof module === 'undefined' || module, this);\n    }, {\n      \"buffer\": 11\n    }],\n    10: [function (require, module, exports) {\n      (function (global) {\n        module.exports = function (length) {\n          var result = new Uint8Array(length);\n          (global.crypto || global.msCrypto).getRandomValues(result);\n          return result;\n        };\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    11: [function (require, module, exports) {}, {}],\n    12: [function (require, module, exports) {\n      'use strict';\n\n      var elliptic = exports;\n      elliptic.version = require('../package.json').version;\n      elliptic.utils = require('./elliptic/utils');\n      elliptic.rand = require('brorand');\n      elliptic.hmacDRBG = require('./elliptic/hmac-drbg');\n      elliptic.curve = require('./elliptic/curve');\n      elliptic.curves = require('./elliptic/curves'); // Protocols\n\n      elliptic.ec = require('./elliptic/ec');\n      elliptic.eddsa = require('./elliptic/eddsa');\n    }, {\n      \"../package.json\": 26,\n      \"./elliptic/curve\": 15,\n      \"./elliptic/curves\": 18,\n      \"./elliptic/ec\": 19,\n      \"./elliptic/eddsa\": 22,\n      \"./elliptic/hmac-drbg\": 23,\n      \"./elliptic/utils\": 25,\n      \"brorand\": 10\n    }],\n    13: [function (require, module, exports) {\n      'use strict';\n\n      var BN = require('bn.js');\n\n      var elliptic = require('../../elliptic');\n\n      var utils = elliptic.utils;\n      var getNAF = utils.getNAF;\n      var getJSF = utils.getJSF;\n      var assert = utils.assert;\n\n      function BaseCurve(type, conf) {\n        this.type = type;\n        this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime\n\n        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves\n\n        this.zero = new BN(0).toRed(this.red);\n        this.one = new BN(1).toRed(this.red);\n        this.two = new BN(2).toRed(this.red); // Curve configuration, optional\n\n        this.n = conf.n && new BN(conf.n, 16);\n        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays\n\n        this._wnafT1 = new Array(4);\n        this._wnafT2 = new Array(4);\n        this._wnafT3 = new Array(4);\n        this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick\n\n        var adjustCount = this.n && this.p.div(this.n);\n\n        if (!adjustCount || adjustCount.cmpn(100) > 0) {\n          this.redN = null;\n        } else {\n          this._maxwellTrick = true;\n          this.redN = this.n.toRed(this.red);\n        }\n      }\n\n      module.exports = BaseCurve;\n\n      BaseCurve.prototype.point = function point() {\n        throw new Error('Not implemented');\n      };\n\n      BaseCurve.prototype.validate = function validate() {\n        throw new Error('Not implemented');\n      };\n\n      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n        assert(p.precomputed);\n\n        var doubles = p._getDoubles();\n\n        var naf = getNAF(k, 1);\n        var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n        I /= 3; // Translate into more windowed form\n\n        var repr = [];\n\n        for (var j = 0; j < naf.length; j += doubles.step) {\n          var nafW = 0;\n\n          for (var k = j + doubles.step - 1; k >= j; k--) {\n            nafW = (nafW << 1) + naf[k];\n          }\n\n          repr.push(nafW);\n        }\n\n        var a = this.jpoint(null, null, null);\n        var b = this.jpoint(null, null, null);\n\n        for (var i = I; i > 0; i--) {\n          for (var j = 0; j < repr.length; j++) {\n            var nafW = repr[j];\n            if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n          }\n\n          a = a.add(b);\n        }\n\n        return a.toP();\n      };\n\n      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n        var w = 4; // Precompute window\n\n        var nafPoints = p._getNAFPoints(w);\n\n        w = nafPoints.wnd;\n        var wnd = nafPoints.points; // Get NAF form\n\n        var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index\n\n        var acc = this.jpoint(null, null, null);\n\n        for (var i = naf.length - 1; i >= 0; i--) {\n          // Count zeroes\n          for (var k = 0; i >= 0 && naf[i] === 0; i--) {\n            k++;\n          }\n\n          if (i >= 0) k++;\n          acc = acc.dblp(k);\n          if (i < 0) break;\n          var z = naf[i];\n          assert(z !== 0);\n\n          if (p.type === 'affine') {\n            // J +- P\n            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n          } else {\n            // J +- J\n            if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n          }\n        }\n\n        return p.type === 'affine' ? acc.toP() : acc;\n      };\n\n      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n        var wndWidth = this._wnafT1;\n        var wnd = this._wnafT2;\n        var naf = this._wnafT3; // Fill all arrays\n\n        var max = 0;\n\n        for (var i = 0; i < len; i++) {\n          var p = points[i];\n\n          var nafPoints = p._getNAFPoints(defW);\n\n          wndWidth[i] = nafPoints.wnd;\n          wnd[i] = nafPoints.points;\n        } // Comb small window NAFs\n\n\n        for (var i = len - 1; i >= 1; i -= 2) {\n          var a = i - 1;\n          var b = i;\n\n          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n            naf[a] = getNAF(coeffs[a], wndWidth[a]);\n            naf[b] = getNAF(coeffs[b], wndWidth[b]);\n            max = Math.max(naf[a].length, max);\n            max = Math.max(naf[b].length, max);\n            continue;\n          }\n\n          var comb = [points[a],\n          /* 1 */\n          null,\n          /* 3 */\n          null,\n          /* 5 */\n          points[b]\n          /* 7 */\n          ]; // Try to avoid Projective points, if possible\n\n          if (points[a].y.cmp(points[b].y) === 0) {\n            comb[1] = points[a].add(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].add(points[b].neg());\n          } else {\n            comb[1] = points[a].toJ().mixedAdd(points[b]);\n            comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n          }\n\n          var index = [-3,\n          /* -1 -1 */\n          -1,\n          /* -1 0 */\n          -5,\n          /* -1 1 */\n          -7,\n          /* 0 -1 */\n          0,\n          /* 0 0 */\n          7,\n          /* 0 1 */\n          5,\n          /* 1 -1 */\n          1,\n          /* 1 0 */\n          3\n          /* 1 1 */\n          ];\n          var jsf = getJSF(coeffs[a], coeffs[b]);\n          max = Math.max(jsf[0].length, max);\n          naf[a] = new Array(max);\n          naf[b] = new Array(max);\n\n          for (var j = 0; j < max; j++) {\n            var ja = jsf[0][j] | 0;\n            var jb = jsf[1][j] | 0;\n            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n            naf[b][j] = 0;\n            wnd[a] = comb;\n          }\n        }\n\n        var acc = this.jpoint(null, null, null);\n        var tmp = this._wnafT4;\n\n        for (var i = max; i >= 0; i--) {\n          var k = 0;\n\n          while (i >= 0) {\n            var zero = true;\n\n            for (var j = 0; j < len; j++) {\n              tmp[j] = naf[j][i] | 0;\n              if (tmp[j] !== 0) zero = false;\n            }\n\n            if (!zero) break;\n            k++;\n            i--;\n          }\n\n          if (i >= 0) k++;\n          acc = acc.dblp(k);\n          if (i < 0) break;\n\n          for (var j = 0; j < len; j++) {\n            var z = tmp[j];\n            var p;\n            if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n            if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n          }\n        } // Zeroify references\n\n\n        for (var i = 0; i < len; i++) {\n          wnd[i] = null;\n        }\n\n        if (jacobianResult) return acc;else return acc.toP();\n      };\n\n      function BasePoint(curve, type) {\n        this.curve = curve;\n        this.type = type;\n        this.precomputed = null;\n      }\n\n      BaseCurve.BasePoint = BasePoint;\n\n      BasePoint.prototype.eq = function eq()\n      /*other*/\n      {\n        throw new Error('Not implemented');\n      };\n\n      BasePoint.prototype.validate = function validate() {\n        return this.curve.validate(this);\n      };\n\n      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n        bytes = utils.toArray(bytes, enc);\n        var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even\n\n        if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n          if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);\n          var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n          return res;\n        } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n        }\n\n        throw new Error('Unknown point format');\n      };\n\n      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n        return this.encode(enc, true);\n      };\n\n      BasePoint.prototype._encode = function _encode(compact) {\n        var len = this.curve.p.byteLength();\n        var x = this.getX().toArray('be', len);\n        if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n        return [0x04].concat(x, this.getY().toArray('be', len));\n      };\n\n      BasePoint.prototype.encode = function encode(enc, compact) {\n        return utils.encode(this._encode(compact), enc);\n      };\n\n      BasePoint.prototype.precompute = function precompute(power) {\n        if (this.precomputed) return this;\n        var precomputed = {\n          doubles: null,\n          naf: null,\n          beta: null\n        };\n        precomputed.naf = this._getNAFPoints(8);\n        precomputed.doubles = this._getDoubles(4, power);\n        precomputed.beta = this._getBeta();\n        this.precomputed = precomputed;\n        return this;\n      };\n\n      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n        if (!this.precomputed) return false;\n        var doubles = this.precomputed.doubles;\n        if (!doubles) return false;\n        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n      };\n\n      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n        var doubles = [this];\n        var acc = this;\n\n        for (var i = 0; i < power; i += step) {\n          for (var j = 0; j < step; j++) {\n            acc = acc.dbl();\n          }\n\n          doubles.push(acc);\n        }\n\n        return {\n          step: step,\n          points: doubles\n        };\n      };\n\n      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n        var res = [this];\n        var max = (1 << wnd) - 1;\n        var dbl = max === 1 ? null : this.dbl();\n\n        for (var i = 1; i < max; i++) {\n          res[i] = res[i - 1].add(dbl);\n        }\n\n        return {\n          wnd: wnd,\n          points: res\n        };\n      };\n\n      BasePoint.prototype._getBeta = function _getBeta() {\n        return null;\n      };\n\n      BasePoint.prototype.dblp = function dblp(k) {\n        var r = this;\n\n        for (var i = 0; i < k; i++) {\n          r = r.dbl();\n        }\n\n        return r;\n      };\n    }, {\n      \"../../elliptic\": 12,\n      \"bn.js\": 9\n    }],\n    14: [function (require, module, exports) {\n      module.exports = {};\n    }, {}],\n    15: [function (require, module, exports) {\n      'use strict';\n\n      var curve = exports;\n      curve.base = require('./base');\n      curve.short = require('./short');\n      curve.mont = require('./mont');\n      curve.edwards = require('./edwards');\n    }, {\n      \"./base\": 13,\n      \"./edwards\": 14,\n      \"./mont\": 16,\n      \"./short\": 17\n    }],\n    16: [function (require, module, exports) {\n      arguments[4][14][0].apply(exports, arguments);\n    }, {\n      \"dup\": 14\n    }],\n    17: [function (require, module, exports) {\n      'use strict';\n\n      var curve = require('../curve');\n\n      var elliptic = require('../../elliptic');\n\n      var BN = require('bn.js');\n\n      var inherits = require('inherits');\n\n      var Base = curve.base;\n      var assert = elliptic.utils.assert;\n\n      function ShortCurve(conf) {\n        Base.call(this, 'short', conf);\n        this.a = new BN(conf.a, 16).toRed(this.red);\n        this.b = new BN(conf.b, 16).toRed(this.red);\n        this.tinv = this.two.redInvm();\n        this.zeroA = this.a.fromRed().cmpn(0) === 0;\n        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda\n\n        this.endo = this._getEndomorphism(conf);\n        this._endoWnafT1 = new Array(4);\n        this._endoWnafT2 = new Array(4);\n      }\n\n      inherits(ShortCurve, Base);\n      module.exports = ShortCurve;\n\n      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n        // No efficient endomorphism\n        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n\n        var beta;\n        var lambda;\n\n        if (conf.beta) {\n          beta = new BN(conf.beta, 16).toRed(this.red);\n        } else {\n          var betas = this._getEndoRoots(this.p); // Choose the smallest beta\n\n\n          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n          beta = beta.toRed(this.red);\n        }\n\n        if (conf.lambda) {\n          lambda = new BN(conf.lambda, 16);\n        } else {\n          // Choose the lambda that is matching selected beta\n          var lambdas = this._getEndoRoots(this.n);\n\n          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n            lambda = lambdas[0];\n          } else {\n            lambda = lambdas[1];\n            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n          }\n        } // Get basis vectors, used for balanced length-two representation\n\n\n        var basis;\n\n        if (conf.basis) {\n          basis = conf.basis.map(function (vec) {\n            return {\n              a: new BN(vec.a, 16),\n              b: new BN(vec.b, 16)\n            };\n          });\n        } else {\n          basis = this._getEndoBasis(lambda);\n        }\n\n        return {\n          beta: beta,\n          lambda: lambda,\n          basis: basis\n        };\n      };\n\n      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n        // Find roots of for x^2 + x + 1 in F\n        // Root = (-1 +- Sqrt(-3)) / 2\n        //\n        var red = num === this.p ? this.red : BN.mont(num);\n        var tinv = new BN(2).toRed(red).redInvm();\n        var ntinv = tinv.redNeg();\n        var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n        var l1 = ntinv.redAdd(s).fromRed();\n        var l2 = ntinv.redSub(s).fromRed();\n        return [l1, l2];\n      };\n\n      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n        // aprxSqrt >= sqrt(this.n)\n        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74\n        // Run EGCD, until r(L + 1) < aprxSqrt\n\n        var u = lambda;\n        var v = this.n.clone();\n        var x1 = new BN(1);\n        var y1 = new BN(0);\n        var x2 = new BN(0);\n        var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n\n        var a0;\n        var b0; // First vector\n\n        var a1;\n        var b1; // Second vector\n\n        var a2;\n        var b2;\n        var prevR;\n        var i = 0;\n        var r;\n        var x;\n\n        while (u.cmpn(0) !== 0) {\n          var q = v.div(u);\n          r = v.sub(q.mul(u));\n          x = x2.sub(q.mul(x1));\n          var y = y2.sub(q.mul(y1));\n\n          if (!a1 && r.cmp(aprxSqrt) < 0) {\n            a0 = prevR.neg();\n            b0 = x1;\n            a1 = r.neg();\n            b1 = x;\n          } else if (a1 && ++i === 2) {\n            break;\n          }\n\n          prevR = r;\n          v = u;\n          u = r;\n          x2 = x1;\n          x1 = x;\n          y2 = y1;\n          y1 = y;\n        }\n\n        a2 = r.neg();\n        b2 = x;\n        var len1 = a1.sqr().add(b1.sqr());\n        var len2 = a2.sqr().add(b2.sqr());\n\n        if (len2.cmp(len1) >= 0) {\n          a2 = a0;\n          b2 = b0;\n        } // Normalize signs\n\n\n        if (a1.negative) {\n          a1 = a1.neg();\n          b1 = b1.neg();\n        }\n\n        if (a2.negative) {\n          a2 = a2.neg();\n          b2 = b2.neg();\n        }\n\n        return [{\n          a: a1,\n          b: b1\n        }, {\n          a: a2,\n          b: b2\n        }];\n      };\n\n      ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n        var basis = this.endo.basis;\n        var v1 = basis[0];\n        var v2 = basis[1];\n        var c1 = v2.b.mul(k).divRound(this.n);\n        var c2 = v1.b.neg().mul(k).divRound(this.n);\n        var p1 = c1.mul(v1.a);\n        var p2 = c2.mul(v2.a);\n        var q1 = c1.mul(v1.b);\n        var q2 = c2.mul(v2.b); // Calculate answer\n\n        var k1 = k.sub(p1).sub(p2);\n        var k2 = q1.add(q2).neg();\n        return {\n          k1: k1,\n          k2: k2\n        };\n      };\n\n      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n        x = new BN(x, 16);\n        if (!x.red) x = x.toRed(this.red);\n        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n        var y = y2.redSqrt();\n        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it\n        // to non-red form?\n\n        var isOdd = y.fromRed().isOdd();\n        if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n        return this.point(x, y);\n      };\n\n      ShortCurve.prototype.validate = function validate(point) {\n        if (point.inf) return true;\n        var x = point.x;\n        var y = point.y;\n        var ax = this.a.redMul(x);\n        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n        return y.redSqr().redISub(rhs).cmpn(0) === 0;\n      };\n\n      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n        var npoints = this._endoWnafT1;\n        var ncoeffs = this._endoWnafT2;\n\n        for (var i = 0; i < points.length; i++) {\n          var split = this._endoSplit(coeffs[i]);\n\n          var p = points[i];\n\n          var beta = p._getBeta();\n\n          if (split.k1.negative) {\n            split.k1.ineg();\n            p = p.neg(true);\n          }\n\n          if (split.k2.negative) {\n            split.k2.ineg();\n            beta = beta.neg(true);\n          }\n\n          npoints[i * 2] = p;\n          npoints[i * 2 + 1] = beta;\n          ncoeffs[i * 2] = split.k1;\n          ncoeffs[i * 2 + 1] = split.k2;\n        }\n\n        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients\n\n\n        for (var j = 0; j < i * 2; j++) {\n          npoints[j] = null;\n          ncoeffs[j] = null;\n        }\n\n        return res;\n      };\n\n      function Point(curve, x, y, isRed) {\n        Base.BasePoint.call(this, curve, 'affine');\n\n        if (x === null && y === null) {\n          this.x = null;\n          this.y = null;\n          this.inf = true;\n        } else {\n          this.x = new BN(x, 16);\n          this.y = new BN(y, 16); // Force redgomery representation when loading from JSON\n\n          if (isRed) {\n            this.x.forceRed(this.curve.red);\n            this.y.forceRed(this.curve.red);\n          }\n\n          if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n          if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n          this.inf = false;\n        }\n      }\n\n      inherits(Point, Base.BasePoint);\n\n      ShortCurve.prototype.point = function point(x, y, isRed) {\n        return new Point(this, x, y, isRed);\n      };\n\n      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n        return Point.fromJSON(this, obj, red);\n      };\n\n      Point.prototype._getBeta = function _getBeta() {\n        if (!this.curve.endo) return;\n        var pre = this.precomputed;\n        if (pre && pre.beta) return pre.beta;\n        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n\n        if (pre) {\n          var curve = this.curve;\n\n          var endoMul = function endoMul(p) {\n            return curve.point(p.x.redMul(curve.endo.beta), p.y);\n          };\n\n          pre.beta = beta;\n          beta.precomputed = {\n            beta: null,\n            naf: pre.naf && {\n              wnd: pre.naf.wnd,\n              points: pre.naf.points.map(endoMul)\n            },\n            doubles: pre.doubles && {\n              step: pre.doubles.step,\n              points: pre.doubles.points.map(endoMul)\n            }\n          };\n        }\n\n        return beta;\n      };\n\n      Point.prototype.toJSON = function toJSON() {\n        if (!this.precomputed) return [this.x, this.y];\n        return [this.x, this.y, this.precomputed && {\n          doubles: this.precomputed.doubles && {\n            step: this.precomputed.doubles.step,\n            points: this.precomputed.doubles.points.slice(1)\n          },\n          naf: this.precomputed.naf && {\n            wnd: this.precomputed.naf.wnd,\n            points: this.precomputed.naf.points.slice(1)\n          }\n        }];\n      };\n\n      Point.fromJSON = function fromJSON(curve, obj, red) {\n        if (typeof obj === 'string') obj = JSON.parse(obj);\n        var res = curve.point(obj[0], obj[1], red);\n        if (!obj[2]) return res;\n\n        function obj2point(obj) {\n          return curve.point(obj[0], obj[1], red);\n        }\n\n        var pre = obj[2];\n        res.precomputed = {\n          beta: null,\n          doubles: pre.doubles && {\n            step: pre.doubles.step,\n            points: [res].concat(pre.doubles.points.map(obj2point))\n          },\n          naf: pre.naf && {\n            wnd: pre.naf.wnd,\n            points: [res].concat(pre.naf.points.map(obj2point))\n          }\n        };\n        return res;\n      };\n\n      Point.prototype.inspect = function inspect() {\n        if (this.isInfinity()) return '<EC Point Infinity>';\n        return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n      };\n\n      Point.prototype.isInfinity = function isInfinity() {\n        return this.inf;\n      };\n\n      Point.prototype.add = function add(p) {\n        // O + P = P\n        if (this.inf) return p; // P + O = P\n\n        if (p.inf) return this; // P + P = 2P\n\n        if (this.eq(p)) return this.dbl(); // P + (-P) = O\n\n        if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O\n\n        if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n        var c = this.y.redSub(p.y);\n        if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n        var nx = c.redSqr().redISub(this.x).redISub(p.x);\n        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n        return this.curve.point(nx, ny);\n      };\n\n      Point.prototype.dbl = function dbl() {\n        if (this.inf) return this; // 2P = O\n\n        var ys1 = this.y.redAdd(this.y);\n        if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n        var a = this.curve.a;\n        var x2 = this.x.redSqr();\n        var dyinv = ys1.redInvm();\n        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n        var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n        return this.curve.point(nx, ny);\n      };\n\n      Point.prototype.getX = function getX() {\n        return this.x.fromRed();\n      };\n\n      Point.prototype.getY = function getY() {\n        return this.y.fromRed();\n      };\n\n      Point.prototype.mul = function mul(k) {\n        k = new BN(k, 16);\n        if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);\n      };\n\n      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n        var points = [this, p2];\n        var coeffs = [k1, k2];\n        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n      };\n\n      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n        var points = [this, p2];\n        var coeffs = [k1, k2];\n        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n      };\n\n      Point.prototype.eq = function eq(p) {\n        return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n      };\n\n      Point.prototype.neg = function neg(_precompute) {\n        if (this.inf) return this;\n        var res = this.curve.point(this.x, this.y.redNeg());\n\n        if (_precompute && this.precomputed) {\n          var pre = this.precomputed;\n\n          var negate = function negate(p) {\n            return p.neg();\n          };\n\n          res.precomputed = {\n            naf: pre.naf && {\n              wnd: pre.naf.wnd,\n              points: pre.naf.points.map(negate)\n            },\n            doubles: pre.doubles && {\n              step: pre.doubles.step,\n              points: pre.doubles.points.map(negate)\n            }\n          };\n        }\n\n        return res;\n      };\n\n      Point.prototype.toJ = function toJ() {\n        if (this.inf) return this.curve.jpoint(null, null, null);\n        var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n        return res;\n      };\n\n      function JPoint(curve, x, y, z) {\n        Base.BasePoint.call(this, curve, 'jacobian');\n\n        if (x === null && y === null && z === null) {\n          this.x = this.curve.one;\n          this.y = this.curve.one;\n          this.z = new BN(0);\n        } else {\n          this.x = new BN(x, 16);\n          this.y = new BN(y, 16);\n          this.z = new BN(z, 16);\n        }\n\n        if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n        if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n        if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n        this.zOne = this.z === this.curve.one;\n      }\n\n      inherits(JPoint, Base.BasePoint);\n\n      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n        return new JPoint(this, x, y, z);\n      };\n\n      JPoint.prototype.toP = function toP() {\n        if (this.isInfinity()) return this.curve.point(null, null);\n        var zinv = this.z.redInvm();\n        var zinv2 = zinv.redSqr();\n        var ax = this.x.redMul(zinv2);\n        var ay = this.y.redMul(zinv2).redMul(zinv);\n        return this.curve.point(ax, ay);\n      };\n\n      JPoint.prototype.neg = function neg() {\n        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n      };\n\n      JPoint.prototype.add = function add(p) {\n        // O + P = P\n        if (this.isInfinity()) return p; // P + O = P\n\n        if (p.isInfinity()) return this; // 12M + 4S + 7A\n\n        var pz2 = p.z.redSqr();\n        var z2 = this.z.redSqr();\n        var u1 = this.x.redMul(pz2);\n        var u2 = p.x.redMul(z2);\n        var s1 = this.y.redMul(pz2.redMul(p.z));\n        var s2 = p.y.redMul(z2.redMul(this.z));\n        var h = u1.redSub(u2);\n        var r = s1.redSub(s2);\n\n        if (h.cmpn(0) === 0) {\n          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n        }\n\n        var h2 = h.redSqr();\n        var h3 = h2.redMul(h);\n        var v = u1.redMul(h2);\n        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        var nz = this.z.redMul(p.z).redMul(h);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype.mixedAdd = function mixedAdd(p) {\n        // O + P = P\n        if (this.isInfinity()) return p.toJ(); // P + O = P\n\n        if (p.isInfinity()) return this; // 8M + 3S + 7A\n\n        var z2 = this.z.redSqr();\n        var u1 = this.x;\n        var u2 = p.x.redMul(z2);\n        var s1 = this.y;\n        var s2 = p.y.redMul(z2).redMul(this.z);\n        var h = u1.redSub(u2);\n        var r = s1.redSub(s2);\n\n        if (h.cmpn(0) === 0) {\n          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n        }\n\n        var h2 = h.redSqr();\n        var h3 = h2.redMul(h);\n        var v = u1.redMul(h2);\n        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n        var nz = this.z.redMul(h);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype.dblp = function dblp(pow) {\n        if (pow === 0) return this;\n        if (this.isInfinity()) return this;\n        if (!pow) return this.dbl();\n\n        if (this.curve.zeroA || this.curve.threeA) {\n          var r = this;\n\n          for (var i = 0; i < pow; i++) {\n            r = r.dbl();\n          }\n\n          return r;\n        } // 1M + 2S + 1A + N * (4S + 5M + 8A)\n        // N = 1 => 6M + 6S + 9A\n\n\n        var a = this.curve.a;\n        var tinv = this.curve.tinv;\n        var jx = this.x;\n        var jy = this.y;\n        var jz = this.z;\n        var jz4 = jz.redSqr().redSqr(); // Reuse results\n\n        var jyd = jy.redAdd(jy);\n\n        for (var i = 0; i < pow; i++) {\n          var jx2 = jx.redSqr();\n          var jyd2 = jyd.redSqr();\n          var jyd4 = jyd2.redSqr();\n          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n          var t1 = jx.redMul(jyd2);\n          var nx = c.redSqr().redISub(t1.redAdd(t1));\n          var t2 = t1.redISub(nx);\n          var dny = c.redMul(t2);\n          dny = dny.redIAdd(dny).redISub(jyd4);\n          var nz = jyd.redMul(jz);\n          if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n          jx = nx;\n          jz = nz;\n          jyd = dny;\n        }\n\n        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n      };\n\n      JPoint.prototype.dbl = function dbl() {\n        if (this.isInfinity()) return this;\n        if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();\n      };\n\n      JPoint.prototype._zeroDbl = function _zeroDbl() {\n        var nx;\n        var ny;\n        var nz; // Z = 1\n\n        if (this.zOne) {\n          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n          //     #doubling-mdbl-2007-bl\n          // 1M + 5S + 14A\n          // XX = X1^2\n          var xx = this.x.redSqr(); // YY = Y1^2\n\n          var yy = this.y.redSqr(); // YYYY = YY^2\n\n          var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n          s = s.redIAdd(s); // M = 3 * XX + a; a = 0\n\n          var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S\n\n          var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY\n\n          var yyyy8 = yyyy.redIAdd(yyyy);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T\n\n          nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n          ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1\n\n          nz = this.y.redAdd(this.y);\n        } else {\n          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n          //     #doubling-dbl-2009-l\n          // 2M + 5S + 13A\n          // A = X1^2\n          var a = this.x.redSqr(); // B = Y1^2\n\n          var b = this.y.redSqr(); // C = B^2\n\n          var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n          d = d.redIAdd(d); // E = 3 * A\n\n          var e = a.redAdd(a).redIAdd(a); // F = E^2\n\n          var f = e.redSqr(); // 8 * C\n\n          var c8 = c.redIAdd(c);\n          c8 = c8.redIAdd(c8);\n          c8 = c8.redIAdd(c8); // X3 = F - 2 * D\n\n          nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n          ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1\n\n          nz = this.y.redMul(this.z);\n          nz = nz.redIAdd(nz);\n        }\n\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype._threeDbl = function _threeDbl() {\n        var nx;\n        var ny;\n        var nz; // Z = 1\n\n        if (this.zOne) {\n          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n          //     #doubling-mdbl-2007-bl\n          // 1M + 5S + 15A\n          // XX = X1^2\n          var xx = this.x.redSqr(); // YY = Y1^2\n\n          var yy = this.y.redSqr(); // YYYY = YY^2\n\n          var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n          s = s.redIAdd(s); // M = 3 * XX + a\n\n          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S\n\n          var t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n          nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n          var yyyy8 = yyyy.redIAdd(yyyy);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          yyyy8 = yyyy8.redIAdd(yyyy8);\n          ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1\n\n          nz = this.y.redAdd(this.y);\n        } else {\n          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n          // 3M + 5S\n          // delta = Z1^2\n          var delta = this.z.redSqr(); // gamma = Y1^2\n\n          var gamma = this.y.redSqr(); // beta = X1 * gamma\n\n          var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n          alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta\n\n          var beta4 = beta.redIAdd(beta);\n          beta4 = beta4.redIAdd(beta4);\n          var beta8 = beta4.redAdd(beta4);\n          nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n          var ggamma8 = gamma.redSqr();\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ggamma8 = ggamma8.redIAdd(ggamma8);\n          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n        }\n\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype._dbl = function _dbl() {\n        var a = this.curve.a; // 4M + 6S + 10A\n\n        var jx = this.x;\n        var jy = this.y;\n        var jz = this.z;\n        var jz4 = jz.redSqr().redSqr();\n        var jx2 = jx.redSqr();\n        var jy2 = jy.redSqr();\n        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n        var jxd4 = jx.redAdd(jx);\n        jxd4 = jxd4.redIAdd(jxd4);\n        var t1 = jxd4.redMul(jy2);\n        var nx = c.redSqr().redISub(t1.redAdd(t1));\n        var t2 = t1.redISub(nx);\n        var jyd8 = jy2.redSqr();\n        jyd8 = jyd8.redIAdd(jyd8);\n        jyd8 = jyd8.redIAdd(jyd8);\n        jyd8 = jyd8.redIAdd(jyd8);\n        var ny = c.redMul(t2).redISub(jyd8);\n        var nz = jy.redAdd(jy).redMul(jz);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype.trpl = function trpl() {\n        if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n        // 5M + 10S + ...\n        // XX = X1^2\n\n        var xx = this.x.redSqr(); // YY = Y1^2\n\n        var yy = this.y.redSqr(); // ZZ = Z1^2\n\n        var zz = this.z.redSqr(); // YYYY = YY^2\n\n        var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0\n\n        var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2\n\n        var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n\n        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n        e = e.redIAdd(e);\n        e = e.redAdd(e).redIAdd(e);\n        e = e.redISub(mm); // EE = E^2\n\n        var ee = e.redSqr(); // T = 16*YYYY\n\n        var t = yyyy.redIAdd(yyyy);\n        t = t.redIAdd(t);\n        t = t.redIAdd(t);\n        t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T\n\n        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)\n\n        var yyu4 = yy.redMul(u);\n        yyu4 = yyu4.redIAdd(yyu4);\n        yyu4 = yyu4.redIAdd(yyu4);\n        var nx = this.x.redMul(ee).redISub(yyu4);\n        nx = nx.redIAdd(nx);\n        nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n\n        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n        ny = ny.redIAdd(ny);\n        ny = ny.redIAdd(ny);\n        ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE\n\n        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n        return this.curve.jpoint(nx, ny, nz);\n      };\n\n      JPoint.prototype.mul = function mul(k, kbase) {\n        k = new BN(k, kbase);\n        return this.curve._wnafMul(this, k);\n      };\n\n      JPoint.prototype.eq = function eq(p) {\n        if (p.type === 'affine') return this.eq(p.toJ());\n        if (this === p) return true; // x1 * z2^2 == x2 * z1^2\n\n        var z2 = this.z.redSqr();\n        var pz2 = p.z.redSqr();\n        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3\n\n        var z3 = z2.redMul(this.z);\n        var pz3 = pz2.redMul(p.z);\n        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n      };\n\n      JPoint.prototype.eqXToP = function eqXToP(x) {\n        var zs = this.z.redSqr();\n        var rx = x.toRed(this.curve.red).redMul(zs);\n        if (this.x.cmp(rx) === 0) return true;\n        var xc = x.clone();\n        var t = this.curve.redN.redMul(zs);\n\n        for (;;) {\n          xc.iadd(this.curve.n);\n          if (xc.cmp(this.curve.p) >= 0) return false;\n          rx.redIAdd(t);\n          if (this.x.cmp(rx) === 0) return true;\n        }\n\n        return false;\n      };\n\n      JPoint.prototype.inspect = function inspect() {\n        if (this.isInfinity()) return '<EC JPoint Infinity>';\n        return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';\n      };\n\n      JPoint.prototype.isInfinity = function isInfinity() {\n        // XXX This code assumes that zero is always zero in red\n        return this.z.cmpn(0) === 0;\n      };\n    }, {\n      \"../../elliptic\": 12,\n      \"../curve\": 15,\n      \"bn.js\": 9,\n      \"inherits\": 39\n    }],\n    18: [function (require, module, exports) {\n      'use strict';\n\n      var curves = exports;\n\n      var hash = require('hash.js');\n\n      var elliptic = require('../elliptic');\n\n      var assert = elliptic.utils.assert;\n\n      function PresetCurve(options) {\n        if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);\n        this.g = this.curve.g;\n        this.n = this.curve.n;\n        this.hash = options.hash;\n        assert(this.g.validate(), 'Invalid curve');\n        assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n      }\n\n      curves.PresetCurve = PresetCurve;\n\n      function defineCurve(name, options) {\n        Object.defineProperty(curves, name, {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            var curve = new PresetCurve(options);\n            Object.defineProperty(curves, name, {\n              configurable: true,\n              enumerable: true,\n              value: curve\n            });\n            return curve;\n          }\n        });\n      }\n\n      defineCurve('p192', {\n        type: 'short',\n        prime: 'p192',\n        p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n        b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n        n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n        hash: hash.sha256,\n        gRed: false,\n        g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']\n      });\n      defineCurve('p224', {\n        type: 'short',\n        prime: 'p224',\n        p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n        a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n        b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n        n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n        hash: hash.sha256,\n        gRed: false,\n        g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']\n      });\n      defineCurve('p256', {\n        type: 'short',\n        prime: null,\n        p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n        a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n        b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n        n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n        hash: hash.sha256,\n        gRed: false,\n        g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']\n      });\n      defineCurve('p384', {\n        type: 'short',\n        prime: null,\n        p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',\n        a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',\n        b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n        n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n        hash: hash.sha384,\n        gRed: false,\n        g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']\n      });\n      defineCurve('p521', {\n        type: 'short',\n        prime: null,\n        p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',\n        a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',\n        b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n        n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n        hash: hash.sha512,\n        gRed: false,\n        g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']\n      });\n      defineCurve('curve25519', {\n        type: 'mont',\n        prime: 'p25519',\n        p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n        a: '76d06',\n        b: '1',\n        n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n        hash: hash.sha256,\n        gRed: false,\n        g: ['9']\n      });\n      defineCurve('ed25519', {\n        type: 'edwards',\n        prime: 'p25519',\n        p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n        a: '-1',\n        c: '1',\n        // -121665 * (121666^(-1)) (mod P)\n        d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n        n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n        hash: hash.sha256,\n        gRed: false,\n        g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5\n        '6666666666666666666666666666666666666666666666666666666666666658']\n      });\n      var pre;\n\n      try {\n        pre = require('./precomputed/secp256k1');\n      } catch (e) {\n        pre = undefined;\n      }\n\n      defineCurve('secp256k1', {\n        type: 'short',\n        prime: 'k256',\n        p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n        a: '0',\n        b: '7',\n        n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n        h: '1',\n        hash: hash.sha256,\n        // Precomputed endomorphism\n        beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n        lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n        basis: [{\n          a: '3086d221a7d46bcde86c90e49284eb15',\n          b: '-e4437ed6010e88286f547fa90abfe4c3'\n        }, {\n          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n          b: '3086d221a7d46bcde86c90e49284eb15'\n        }],\n        gRed: false,\n        g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]\n      });\n    }, {\n      \"../elliptic\": 12,\n      \"./precomputed/secp256k1\": 24,\n      \"hash.js\": 27\n    }],\n    19: [function (require, module, exports) {\n      'use strict';\n\n      var BN = require('bn.js');\n\n      var elliptic = require('../../elliptic');\n\n      var utils = elliptic.utils;\n      var assert = utils.assert;\n\n      var KeyPair = require('./key');\n\n      var Signature = require('./signature');\n\n      function EC(options) {\n        if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`\n\n        if (typeof options === 'string') {\n          assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);\n          options = elliptic.curves[options];\n        } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n\n\n        if (options instanceof elliptic.curves.PresetCurve) options = {\n          curve: options\n        };\n        this.curve = options.curve.curve;\n        this.n = this.curve.n;\n        this.nh = this.n.ushrn(1);\n        this.g = this.curve.g; // Point on curve\n\n        this.g = options.curve.g;\n        this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG\n\n        this.hash = options.hash || options.curve.hash;\n      }\n\n      module.exports = EC;\n\n      EC.prototype.keyPair = function keyPair(options) {\n        return new KeyPair(this, options);\n      };\n\n      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n        return KeyPair.fromPrivate(this, priv, enc);\n      };\n\n      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n        return KeyPair.fromPublic(this, pub, enc);\n      };\n\n      EC.prototype.genKeyPair = function genKeyPair(options) {\n        if (!options) options = {}; // Instantiate Hmac_DRBG\n\n        var drbg = new elliptic.hmacDRBG({\n          hash: this.hash,\n          pers: options.pers,\n          entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),\n          nonce: this.n.toArray()\n        });\n        var bytes = this.n.byteLength();\n        var ns2 = this.n.sub(new BN(2));\n\n        do {\n          var priv = new BN(drbg.generate(bytes));\n          if (priv.cmp(ns2) > 0) continue;\n          priv.iaddn(1);\n          return this.keyFromPrivate(priv);\n        } while (true);\n      };\n\n      EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n        var delta = msg.byteLength() * 8 - this.n.bitLength();\n        if (delta > 0) msg = msg.ushrn(delta);\n        if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;\n      };\n\n      EC.prototype.sign = function sign(msg, key, enc, options) {\n        if (typeof enc === 'object') {\n          options = enc;\n          enc = null;\n        }\n\n        if (!options) options = {};\n        key = this.keyFromPrivate(key, enc);\n        msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy\n\n        var bytes = this.n.byteLength();\n        var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N\n\n        var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG\n\n        var drbg = new elliptic.hmacDRBG({\n          hash: this.hash,\n          entropy: bkey,\n          nonce: nonce,\n          pers: options.pers,\n          persEnc: options.persEnc\n        }); // Number of bytes to generate\n\n        var ns1 = this.n.sub(new BN(1));\n\n        for (var iter = 0; true; iter++) {\n          var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));\n          k = this._truncateToN(k, true);\n          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n          var kp = this.g.mul(k);\n          if (kp.isInfinity()) continue;\n          var kpX = kp.getX();\n          var r = kpX.umod(this.n);\n          if (r.cmpn(0) === 0) continue;\n          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n          s = s.umod(this.n);\n          if (s.cmpn(0) === 0) continue;\n          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`\n\n          if (options.canonical && s.cmp(this.nh) > 0) {\n            s = this.n.sub(s);\n            recoveryParam ^= 1;\n          }\n\n          return new Signature({\n            r: r,\n            s: s,\n            recoveryParam: recoveryParam\n          });\n        }\n      };\n\n      EC.prototype.verify = function verify(msg, signature, key, enc) {\n        msg = this._truncateToN(new BN(msg, 16));\n        key = this.keyFromPublic(key, enc);\n        signature = new Signature(signature, 'hex'); // Perform primitive values validation\n\n        var r = signature.r;\n        var s = signature.s;\n        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature\n\n        var sinv = s.invm(this.n);\n        var u1 = sinv.mul(msg).umod(this.n);\n        var u2 = sinv.mul(r).umod(this.n);\n\n        if (!this.curve._maxwellTrick) {\n          var p = this.g.mulAdd(u1, key.getPublic(), u2);\n          if (p.isInfinity()) return false;\n          return p.getX().umod(this.n).cmp(r) === 0;\n        } // NOTE: Greg Maxwell's trick, inspired by:\n        // https://git.io/vad3K\n\n\n        var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n        if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,\n        // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n        // inverse of `p.z^2`\n\n        return p.eqXToP(r);\n      };\n\n      EC.prototype.recoverPubKey = function (msg, signature, j, enc) {\n        assert((3 & j) === j, 'The recovery param is more than two bits');\n        signature = new Signature(signature, enc);\n        var n = this.n;\n        var e = new BN(msg);\n        var r = signature.r;\n        var s = signature.s; // A set LSB signifies that the y-coordinate is odd\n\n        var isYOdd = j & 1;\n        var isSecondKey = j >> 1;\n        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.\n\n        if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);\n        var rInv = signature.r.invm(n);\n        var s1 = n.sub(e).mul(rInv).umod(n);\n        var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)\n        //               Q = r^-1 (sR + -eG)\n\n        return this.g.mulAdd(s1, r, s2);\n      };\n\n      EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {\n        signature = new Signature(signature, enc);\n        if (signature.recoveryParam !== null) return signature.recoveryParam;\n\n        for (var i = 0; i < 4; i++) {\n          var Qprime;\n\n          try {\n            Qprime = this.recoverPubKey(e, signature, i);\n          } catch (e) {\n            continue;\n          }\n\n          if (Qprime.eq(Q)) return i;\n        }\n\n        throw new Error('Unable to find valid recovery factor');\n      };\n    }, {\n      \"../../elliptic\": 12,\n      \"./key\": 20,\n      \"./signature\": 21,\n      \"bn.js\": 9\n    }],\n    20: [function (require, module, exports) {\n      'use strict';\n\n      var BN = require('bn.js');\n\n      var elliptic = require('../../elliptic');\n\n      var utils = elliptic.utils;\n      var assert = utils.assert;\n\n      function KeyPair(ec, options) {\n        this.ec = ec;\n        this.priv = null;\n        this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })\n\n        if (options.priv) this._importPrivate(options.priv, options.privEnc);\n        if (options.pub) this._importPublic(options.pub, options.pubEnc);\n      }\n\n      module.exports = KeyPair;\n\n      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n        if (pub instanceof KeyPair) return pub;\n        return new KeyPair(ec, {\n          pub: pub,\n          pubEnc: enc\n        });\n      };\n\n      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n        if (priv instanceof KeyPair) return priv;\n        return new KeyPair(ec, {\n          priv: priv,\n          privEnc: enc\n        });\n      };\n\n      KeyPair.prototype.validate = function validate() {\n        var pub = this.getPublic();\n        if (pub.isInfinity()) return {\n          result: false,\n          reason: 'Invalid public key'\n        };\n        if (!pub.validate()) return {\n          result: false,\n          reason: 'Public key is not a point'\n        };\n        if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n          result: false,\n          reason: 'Public key * N != O'\n        };\n        return {\n          result: true,\n          reason: null\n        };\n      };\n\n      KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n        // compact is optional argument\n        if (typeof compact === 'string') {\n          enc = compact;\n          compact = null;\n        }\n\n        if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n        if (!enc) return this.pub;\n        return this.pub.encode(enc, compact);\n      };\n\n      KeyPair.prototype.getPrivate = function getPrivate(enc) {\n        if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;\n      };\n\n      KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n        this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail\n        // in fixed multiplication method\n\n        this.priv = this.priv.umod(this.ec.curve.n);\n      };\n\n      KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n        if (key.x || key.y) {\n          // Montgomery points only have an `x` coordinate.\n          // Weierstrass/Edwards points on the other hand have both `x` and\n          // `y` coordinates.\n          if (this.ec.curve.type === 'mont') {\n            assert(key.x, 'Need x coordinate');\n          } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {\n            assert(key.x && key.y, 'Need both x and y coordinate');\n          }\n\n          this.pub = this.ec.curve.point(key.x, key.y);\n          return;\n        }\n\n        this.pub = this.ec.curve.decodePoint(key, enc);\n      }; // ECDH\n\n\n      KeyPair.prototype.derive = function derive(pub) {\n        return pub.mul(this.priv).getX();\n      }; // ECDSA\n\n\n      KeyPair.prototype.sign = function sign(msg, enc, options) {\n        return this.ec.sign(msg, this, enc, options);\n      };\n\n      KeyPair.prototype.verify = function verify(msg, signature) {\n        return this.ec.verify(msg, signature, this);\n      };\n\n      KeyPair.prototype.inspect = function inspect() {\n        return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n      };\n    }, {\n      \"../../elliptic\": 12,\n      \"bn.js\": 9\n    }],\n    21: [function (require, module, exports) {\n      'use strict';\n\n      var BN = require('bn.js');\n\n      var elliptic = require('../../elliptic');\n\n      var utils = elliptic.utils;\n      var assert = utils.assert;\n\n      function Signature(options, enc) {\n        if (options instanceof Signature) return options;\n        if (this._importDER(options, enc)) return;\n        assert(options.r && options.s, 'Signature without r or s');\n        this.r = new BN(options.r, 16);\n        this.s = new BN(options.s, 16);\n        if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;\n      }\n\n      module.exports = Signature;\n\n      function Position() {\n        this.place = 0;\n      }\n\n      function getLength(buf, p) {\n        var initial = buf[p.place++];\n\n        if (!(initial & 0x80)) {\n          return initial;\n        }\n\n        var octetLen = initial & 0xf;\n        var val = 0;\n\n        for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n          val <<= 8;\n          val |= buf[off];\n        }\n\n        p.place = off;\n        return val;\n      }\n\n      function rmPadding(buf) {\n        var i = 0;\n        var len = buf.length - 1;\n\n        while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n          i++;\n        }\n\n        if (i === 0) {\n          return buf;\n        }\n\n        return buf.slice(i);\n      }\n\n      Signature.prototype._importDER = function _importDER(data, enc) {\n        data = utils.toArray(data, enc);\n        var p = new Position();\n\n        if (data[p.place++] !== 0x30) {\n          return false;\n        }\n\n        var len = getLength(data, p);\n\n        if (len + p.place !== data.length) {\n          return false;\n        }\n\n        if (data[p.place++] !== 0x02) {\n          return false;\n        }\n\n        var rlen = getLength(data, p);\n        var r = data.slice(p.place, rlen + p.place);\n        p.place += rlen;\n\n        if (data[p.place++] !== 0x02) {\n          return false;\n        }\n\n        var slen = getLength(data, p);\n\n        if (data.length !== slen + p.place) {\n          return false;\n        }\n\n        var s = data.slice(p.place, slen + p.place);\n\n        if (r[0] === 0 && r[1] & 0x80) {\n          r = r.slice(1);\n        }\n\n        if (s[0] === 0 && s[1] & 0x80) {\n          s = s.slice(1);\n        }\n\n        this.r = new BN(r);\n        this.s = new BN(s);\n        this.recoveryParam = null;\n        return true;\n      };\n\n      function constructLength(arr, len) {\n        if (len < 0x80) {\n          arr.push(len);\n          return;\n        }\n\n        var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n        arr.push(octets | 0x80);\n\n        while (--octets) {\n          arr.push(len >>> (octets << 3) & 0xff);\n        }\n\n        arr.push(len);\n      }\n\n      Signature.prototype.toDER = function toDER(enc) {\n        var r = this.r.toArray();\n        var s = this.s.toArray(); // Pad values\n\n        if (r[0] & 0x80) r = [0].concat(r); // Pad values\n\n        if (s[0] & 0x80) s = [0].concat(s);\n        r = rmPadding(r);\n        s = rmPadding(s);\n\n        while (!s[0] && !(s[1] & 0x80)) {\n          s = s.slice(1);\n        }\n\n        var arr = [0x02];\n        constructLength(arr, r.length);\n        arr = arr.concat(r);\n        arr.push(0x02);\n        constructLength(arr, s.length);\n        var backHalf = arr.concat(s);\n        var res = [0x30];\n        constructLength(res, backHalf.length);\n        res = res.concat(backHalf);\n        return utils.encode(res, enc);\n      };\n    }, {\n      \"../../elliptic\": 12,\n      \"bn.js\": 9\n    }],\n    22: [function (require, module, exports) {\n      arguments[4][14][0].apply(exports, arguments);\n    }, {\n      \"dup\": 14\n    }],\n    23: [function (require, module, exports) {\n      'use strict';\n\n      var hash = require('hash.js');\n\n      var elliptic = require('../elliptic');\n\n      var utils = elliptic.utils;\n      var assert = utils.assert;\n\n      function HmacDRBG(options) {\n        if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n        this.hash = options.hash;\n        this.predResist = !!options.predResist;\n        this.outLen = this.hash.outSize;\n        this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n        this.reseed = null;\n        this.reseedInterval = null;\n        this.K = null;\n        this.V = null;\n        var entropy = utils.toArray(options.entropy, options.entropyEnc);\n        var nonce = utils.toArray(options.nonce, options.nonceEnc);\n        var pers = utils.toArray(options.pers, options.persEnc);\n        assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n        this._init(entropy, nonce, pers);\n      }\n\n      module.exports = HmacDRBG;\n\n      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n        var seed = entropy.concat(nonce).concat(pers);\n        this.K = new Array(this.outLen / 8);\n        this.V = new Array(this.outLen / 8);\n\n        for (var i = 0; i < this.V.length; i++) {\n          this.K[i] = 0x00;\n          this.V[i] = 0x01;\n        }\n\n        this._update(seed);\n\n        this.reseed = 1;\n        this.reseedInterval = 0x1000000000000; // 2^48\n      };\n\n      HmacDRBG.prototype._hmac = function hmac() {\n        return new hash.hmac(this.hash, this.K);\n      };\n\n      HmacDRBG.prototype._update = function update(seed) {\n        var kmac = this._hmac().update(this.V).update([0x00]);\n\n        if (seed) kmac = kmac.update(seed);\n        this.K = kmac.digest();\n        this.V = this._hmac().update(this.V).digest();\n        if (!seed) return;\n        this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();\n        this.V = this._hmac().update(this.V).digest();\n      };\n\n      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n        // Optional entropy enc\n        if (typeof entropyEnc !== 'string') {\n          addEnc = add;\n          add = entropyEnc;\n          entropyEnc = null;\n        }\n\n        entropy = utils.toBuffer(entropy, entropyEnc);\n        add = utils.toBuffer(add, addEnc);\n        assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n        this._update(entropy.concat(add || []));\n\n        this.reseed = 1;\n      };\n\n      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n        if (this.reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding\n\n        if (typeof enc !== 'string') {\n          addEnc = add;\n          add = enc;\n          enc = null;\n        } // Optional additional data\n\n\n        if (add) {\n          add = utils.toArray(add, addEnc);\n\n          this._update(add);\n        }\n\n        var temp = [];\n\n        while (temp.length < len) {\n          this.V = this._hmac().update(this.V).digest();\n          temp = temp.concat(this.V);\n        }\n\n        var res = temp.slice(0, len);\n\n        this._update(add);\n\n        this.reseed++;\n        return utils.encode(res, enc);\n      };\n    }, {\n      \"../elliptic\": 12,\n      \"hash.js\": 27\n    }],\n    24: [function (require, module, exports) {\n      module.exports = undefined;\n    }, {}],\n    25: [function (require, module, exports) {\n      'use strict';\n\n      var utils = exports;\n\n      var BN = require('bn.js');\n\n      utils.assert = function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      };\n\n      function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n\n        if (typeof msg !== 'string') {\n          for (var i = 0; i < msg.length; i++) {\n            res[i] = msg[i] | 0;\n          }\n\n          return res;\n        }\n\n        if (!enc) {\n          for (var i = 0; i < msg.length; i++) {\n            var c = msg.charCodeAt(i);\n            var hi = c >> 8;\n            var lo = c & 0xff;\n            if (hi) res.push(hi, lo);else res.push(lo);\n          }\n        } else if (enc === 'hex') {\n          msg = msg.replace(/[^a-z0-9]+/ig, '');\n          if (msg.length % 2 !== 0) msg = '0' + msg;\n\n          for (var i = 0; i < msg.length; i += 2) {\n            res.push(parseInt(msg[i] + msg[i + 1], 16));\n          }\n        }\n\n        return res;\n      }\n\n      utils.toArray = toArray;\n\n      function zero2(word) {\n        if (word.length === 1) return '0' + word;else return word;\n      }\n\n      utils.zero2 = zero2;\n\n      function toHex(msg) {\n        var res = '';\n\n        for (var i = 0; i < msg.length; i++) {\n          res += zero2(msg[i].toString(16));\n        }\n\n        return res;\n      }\n\n      utils.toHex = toHex;\n\n      utils.encode = function encode(arr, enc) {\n        if (enc === 'hex') return toHex(arr);else return arr;\n      }; // Represent num in a w-NAF form\n\n\n      function getNAF(num, w) {\n        var naf = [];\n        var ws = 1 << w + 1;\n        var k = num.clone();\n\n        while (k.cmpn(1) >= 0) {\n          var z;\n\n          if (k.isOdd()) {\n            var mod = k.andln(ws - 1);\n            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n            k.isubn(z);\n          } else {\n            z = 0;\n          }\n\n          naf.push(z); // Optimization, shift by word if possible\n\n          var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;\n\n          for (var i = 1; i < shift; i++) {\n            naf.push(0);\n          }\n\n          k.iushrn(shift);\n        }\n\n        return naf;\n      }\n\n      utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form\n\n      function getJSF(k1, k2) {\n        var jsf = [[], []];\n        k1 = k1.clone();\n        k2 = k2.clone();\n        var d1 = 0;\n        var d2 = 0;\n\n        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n          // First phase\n          var m14 = k1.andln(3) + d1 & 3;\n          var m24 = k2.andln(3) + d2 & 3;\n          if (m14 === 3) m14 = -1;\n          if (m24 === 3) m24 = -1;\n          var u1;\n\n          if ((m14 & 1) === 0) {\n            u1 = 0;\n          } else {\n            var m8 = k1.andln(7) + d1 & 7;\n            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n          }\n\n          jsf[0].push(u1);\n          var u2;\n\n          if ((m24 & 1) === 0) {\n            u2 = 0;\n          } else {\n            var m8 = k2.andln(7) + d2 & 7;\n            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n          }\n\n          jsf[1].push(u2); // Second phase\n\n          if (2 * d1 === u1 + 1) d1 = 1 - d1;\n          if (2 * d2 === u2 + 1) d2 = 1 - d2;\n          k1.iushrn(1);\n          k2.iushrn(1);\n        }\n\n        return jsf;\n      }\n\n      utils.getJSF = getJSF;\n\n      function cachedProperty(obj, name, computer) {\n        var key = '_' + name;\n\n        obj.prototype[name] = function cachedProperty() {\n          return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n        };\n      }\n\n      utils.cachedProperty = cachedProperty;\n\n      function parseBytes(bytes) {\n        return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;\n      }\n\n      utils.parseBytes = parseBytes;\n\n      function intFromLE(bytes) {\n        return new BN(bytes, 'hex', 'le');\n      }\n\n      utils.intFromLE = intFromLE;\n    }, {\n      \"bn.js\": 9\n    }],\n    26: [function (require, module, exports) {\n      module.exports = {\n        \"version\": \"6.3.3\"\n      };\n    }, {}],\n    27: [function (require, module, exports) {\n      var hash = exports;\n      hash.utils = require('./hash/utils');\n      hash.common = require('./hash/common');\n      hash.sha = require('./hash/sha');\n      hash.ripemd = require('./hash/ripemd');\n      hash.hmac = require('./hash/hmac'); // Proxy hash functions to the main object\n\n      hash.sha1 = hash.sha.sha1;\n      hash.sha256 = hash.sha.sha256;\n      hash.sha224 = hash.sha.sha224;\n      hash.sha384 = hash.sha.sha384;\n      hash.sha512 = hash.sha.sha512;\n      hash.ripemd160 = hash.ripemd.ripemd160;\n    }, {\n      \"./hash/common\": 28,\n      \"./hash/hmac\": 29,\n      \"./hash/ripemd\": 30,\n      \"./hash/sha\": 31,\n      \"./hash/utils\": 38\n    }],\n    28: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('./utils');\n\n      var assert = require('minimalistic-assert');\n\n      function BlockHash() {\n        this.pending = null;\n        this.pendingTotal = 0;\n        this.blockSize = this.constructor.blockSize;\n        this.outSize = this.constructor.outSize;\n        this.hmacStrength = this.constructor.hmacStrength;\n        this.padLength = this.constructor.padLength / 8;\n        this.endian = 'big';\n        this._delta8 = this.blockSize / 8;\n        this._delta32 = this.blockSize / 32;\n      }\n\n      exports.BlockHash = BlockHash;\n\n      BlockHash.prototype.update = function update(msg, enc) {\n        // Convert message to array, pad it, and join into 32bit blocks\n        msg = utils.toArray(msg, enc);\n        if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n        this.pendingTotal += msg.length; // Enough data, try updating\n\n        if (this.pending.length >= this._delta8) {\n          msg = this.pending; // Process pending data in blocks\n\n          var r = msg.length % this._delta8;\n          this.pending = msg.slice(msg.length - r, msg.length);\n          if (this.pending.length === 0) this.pending = null;\n          msg = utils.join32(msg, 0, msg.length - r, this.endian);\n\n          for (var i = 0; i < msg.length; i += this._delta32) {\n            this._update(msg, i, i + this._delta32);\n          }\n        }\n\n        return this;\n      };\n\n      BlockHash.prototype.digest = function digest(enc) {\n        this.update(this._pad());\n        assert(this.pending === null);\n        return this._digest(enc);\n      };\n\n      BlockHash.prototype._pad = function pad() {\n        var len = this.pendingTotal;\n        var bytes = this._delta8;\n        var k = bytes - (len + this.padLength) % bytes;\n        var res = new Array(k + this.padLength);\n        res[0] = 0x80;\n\n        for (var i = 1; i < k; i++) {\n          res[i] = 0;\n        } // Append length\n\n\n        len <<= 3;\n\n        if (this.endian === 'big') {\n          for (var t = 8; t < this.padLength; t++) {\n            res[i++] = 0;\n          }\n\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = len >>> 24 & 0xff;\n          res[i++] = len >>> 16 & 0xff;\n          res[i++] = len >>> 8 & 0xff;\n          res[i++] = len & 0xff;\n        } else {\n          res[i++] = len & 0xff;\n          res[i++] = len >>> 8 & 0xff;\n          res[i++] = len >>> 16 & 0xff;\n          res[i++] = len >>> 24 & 0xff;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n          res[i++] = 0;\n\n          for (t = 8; t < this.padLength; t++) {\n            res[i++] = 0;\n          }\n        }\n\n        return res;\n      };\n    }, {\n      \"./utils\": 38,\n      \"minimalistic-assert\": 41\n    }],\n    29: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('./utils');\n\n      var assert = require('minimalistic-assert');\n\n      function Hmac(hash, key, enc) {\n        if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n        this.Hash = hash;\n        this.blockSize = hash.blockSize / 8;\n        this.outSize = hash.outSize / 8;\n        this.inner = null;\n        this.outer = null;\n\n        this._init(utils.toArray(key, enc));\n      }\n\n      module.exports = Hmac;\n\n      Hmac.prototype._init = function init(key) {\n        // Shorten key, if needed\n        if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n        assert(key.length <= this.blockSize); // Add padding to key\n\n        for (var i = key.length; i < this.blockSize; i++) {\n          key.push(0);\n        }\n\n        for (i = 0; i < key.length; i++) {\n          key[i] ^= 0x36;\n        }\n\n        this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n        for (i = 0; i < key.length; i++) {\n          key[i] ^= 0x6a;\n        }\n\n        this.outer = new this.Hash().update(key);\n      };\n\n      Hmac.prototype.update = function update(msg, enc) {\n        this.inner.update(msg, enc);\n        return this;\n      };\n\n      Hmac.prototype.digest = function digest(enc) {\n        this.outer.update(this.inner.digest());\n        return this.outer.digest(enc);\n      };\n    }, {\n      \"./utils\": 38,\n      \"minimalistic-assert\": 41\n    }],\n    30: [function (require, module, exports) {\n      module.exports = {\n        ripemd160: null\n      };\n    }, {}],\n    31: [function (require, module, exports) {\n      'use strict';\n\n      exports.sha1 = require('./sha/1');\n      exports.sha224 = require('./sha/224');\n      exports.sha256 = require('./sha/256');\n      exports.sha384 = require('./sha/384');\n      exports.sha512 = require('./sha/512');\n    }, {\n      \"./sha/1\": 32,\n      \"./sha/224\": 33,\n      \"./sha/256\": 34,\n      \"./sha/384\": 35,\n      \"./sha/512\": 36\n    }],\n    32: [function (require, module, exports) {\n      arguments[4][14][0].apply(exports, arguments);\n    }, {\n      \"dup\": 14\n    }],\n    33: [function (require, module, exports) {\n      arguments[4][14][0].apply(exports, arguments);\n    }, {\n      \"dup\": 14\n    }],\n    34: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('../utils');\n\n      var common = require('../common');\n\n      var shaCommon = require('./common');\n\n      var assert = require('minimalistic-assert');\n\n      var sum32 = utils.sum32;\n      var sum32_4 = utils.sum32_4;\n      var sum32_5 = utils.sum32_5;\n      var ch32 = shaCommon.ch32;\n      var maj32 = shaCommon.maj32;\n      var s0_256 = shaCommon.s0_256;\n      var s1_256 = shaCommon.s1_256;\n      var g0_256 = shaCommon.g0_256;\n      var g1_256 = shaCommon.g1_256;\n      var BlockHash = common.BlockHash;\n      var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n      function SHA256() {\n        if (!(this instanceof SHA256)) return new SHA256();\n        BlockHash.call(this);\n        this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n        this.k = sha256_K;\n        this.W = new Array(64);\n      }\n\n      utils.inherits(SHA256, BlockHash);\n      module.exports = SHA256;\n      SHA256.blockSize = 512;\n      SHA256.outSize = 256;\n      SHA256.hmacStrength = 192;\n      SHA256.padLength = 64;\n\n      SHA256.prototype._update = function _update(msg, start) {\n        var W = this.W;\n\n        for (var i = 0; i < 16; i++) {\n          W[i] = msg[start + i];\n        }\n\n        for (; i < W.length; i++) {\n          W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n        }\n\n        var a = this.h[0];\n        var b = this.h[1];\n        var c = this.h[2];\n        var d = this.h[3];\n        var e = this.h[4];\n        var f = this.h[5];\n        var g = this.h[6];\n        var h = this.h[7];\n        assert(this.k.length === W.length);\n\n        for (i = 0; i < W.length; i++) {\n          var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n          var T2 = sum32(s0_256(a), maj32(a, b, c));\n          h = g;\n          g = f;\n          f = e;\n          e = sum32(d, T1);\n          d = c;\n          c = b;\n          b = a;\n          a = sum32(T1, T2);\n        }\n\n        this.h[0] = sum32(this.h[0], a);\n        this.h[1] = sum32(this.h[1], b);\n        this.h[2] = sum32(this.h[2], c);\n        this.h[3] = sum32(this.h[3], d);\n        this.h[4] = sum32(this.h[4], e);\n        this.h[5] = sum32(this.h[5], f);\n        this.h[6] = sum32(this.h[6], g);\n        this.h[7] = sum32(this.h[7], h);\n      };\n\n      SHA256.prototype._digest = function digest(enc) {\n        if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n      };\n    }, {\n      \"../common\": 28,\n      \"../utils\": 38,\n      \"./common\": 37,\n      \"minimalistic-assert\": 41\n    }],\n    35: [function (require, module, exports) {\n      arguments[4][14][0].apply(exports, arguments);\n    }, {\n      \"dup\": 14\n    }],\n    36: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('../utils');\n\n      var common = require('../common');\n\n      var assert = require('minimalistic-assert');\n\n      var rotr64_hi = utils.rotr64_hi;\n      var rotr64_lo = utils.rotr64_lo;\n      var shr64_hi = utils.shr64_hi;\n      var shr64_lo = utils.shr64_lo;\n      var sum64 = utils.sum64;\n      var sum64_hi = utils.sum64_hi;\n      var sum64_lo = utils.sum64_lo;\n      var sum64_4_hi = utils.sum64_4_hi;\n      var sum64_4_lo = utils.sum64_4_lo;\n      var sum64_5_hi = utils.sum64_5_hi;\n      var sum64_5_lo = utils.sum64_5_lo;\n      var BlockHash = common.BlockHash;\n      var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\n      function SHA512() {\n        if (!(this instanceof SHA512)) return new SHA512();\n        BlockHash.call(this);\n        this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n        this.k = sha512_K;\n        this.W = new Array(160);\n      }\n\n      utils.inherits(SHA512, BlockHash);\n      module.exports = SHA512;\n      SHA512.blockSize = 1024;\n      SHA512.outSize = 512;\n      SHA512.hmacStrength = 192;\n      SHA512.padLength = 128;\n\n      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n        var W = this.W; // 32 x 32bit words\n\n        for (var i = 0; i < 32; i++) {\n          W[i] = msg[start + i];\n        }\n\n        for (; i < W.length; i += 2) {\n          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n          var c1_hi = W[i - 14]; // i - 7\n\n          var c1_lo = W[i - 13];\n          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n          var c3_hi = W[i - 32]; // i - 16\n\n          var c3_lo = W[i - 31];\n          W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n          W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n        }\n      };\n\n      SHA512.prototype._update = function _update(msg, start) {\n        this._prepareBlock(msg, start);\n\n        var W = this.W;\n        var ah = this.h[0];\n        var al = this.h[1];\n        var bh = this.h[2];\n        var bl = this.h[3];\n        var ch = this.h[4];\n        var cl = this.h[5];\n        var dh = this.h[6];\n        var dl = this.h[7];\n        var eh = this.h[8];\n        var el = this.h[9];\n        var fh = this.h[10];\n        var fl = this.h[11];\n        var gh = this.h[12];\n        var gl = this.h[13];\n        var hh = this.h[14];\n        var hl = this.h[15];\n        assert(this.k.length === W.length);\n\n        for (var i = 0; i < W.length; i += 2) {\n          var c0_hi = hh;\n          var c0_lo = hl;\n          var c1_hi = s1_512_hi(eh, el);\n          var c1_lo = s1_512_lo(eh, el);\n          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n          var c3_hi = this.k[i];\n          var c3_lo = this.k[i + 1];\n          var c4_hi = W[i];\n          var c4_lo = W[i + 1];\n          var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n          var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n          c0_hi = s0_512_hi(ah, al);\n          c0_lo = s0_512_lo(ah, al);\n          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n          hh = gh;\n          hl = gl;\n          gh = fh;\n          gl = fl;\n          fh = eh;\n          fl = el;\n          eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n          el = sum64_lo(dl, dl, T1_hi, T1_lo);\n          dh = ch;\n          dl = cl;\n          ch = bh;\n          cl = bl;\n          bh = ah;\n          bl = al;\n          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n        }\n\n        sum64(this.h, 0, ah, al);\n        sum64(this.h, 2, bh, bl);\n        sum64(this.h, 4, ch, cl);\n        sum64(this.h, 6, dh, dl);\n        sum64(this.h, 8, eh, el);\n        sum64(this.h, 10, fh, fl);\n        sum64(this.h, 12, gh, gl);\n        sum64(this.h, 14, hh, hl);\n      };\n\n      SHA512.prototype._digest = function digest(enc) {\n        if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n      };\n\n      function ch64_hi(xh, xl, yh, yl, zh) {\n        var r = xh & yh ^ ~xh & zh;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function ch64_lo(xh, xl, yh, yl, zh, zl) {\n        var r = xl & yl ^ ~xl & zl;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function maj64_hi(xh, xl, yh, yl, zh) {\n        var r = xh & yh ^ xh & zh ^ yh & zh;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function maj64_lo(xh, xl, yh, yl, zh, zl) {\n        var r = xl & yl ^ xl & zl ^ yl & zl;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function s0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 28);\n        var c1_hi = rotr64_hi(xl, xh, 2); // 34\n\n        var c2_hi = rotr64_hi(xl, xh, 7); // 39\n\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function s0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 28);\n        var c1_lo = rotr64_lo(xl, xh, 2); // 34\n\n        var c2_lo = rotr64_lo(xl, xh, 7); // 39\n\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function s1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 14);\n        var c1_hi = rotr64_hi(xh, xl, 18);\n        var c2_hi = rotr64_hi(xl, xh, 9); // 41\n\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function s1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 14);\n        var c1_lo = rotr64_lo(xh, xl, 18);\n        var c2_lo = rotr64_lo(xl, xh, 9); // 41\n\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function g0_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 1);\n        var c1_hi = rotr64_hi(xh, xl, 8);\n        var c2_hi = shr64_hi(xh, xl, 7);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function g0_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 1);\n        var c1_lo = rotr64_lo(xh, xl, 8);\n        var c2_lo = shr64_lo(xh, xl, 7);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function g1_512_hi(xh, xl) {\n        var c0_hi = rotr64_hi(xh, xl, 19);\n        var c1_hi = rotr64_hi(xl, xh, 29); // 61\n\n        var c2_hi = shr64_hi(xh, xl, 6);\n        var r = c0_hi ^ c1_hi ^ c2_hi;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n\n      function g1_512_lo(xh, xl) {\n        var c0_lo = rotr64_lo(xh, xl, 19);\n        var c1_lo = rotr64_lo(xl, xh, 29); // 61\n\n        var c2_lo = shr64_lo(xh, xl, 6);\n        var r = c0_lo ^ c1_lo ^ c2_lo;\n        if (r < 0) r += 0x100000000;\n        return r;\n      }\n    }, {\n      \"../common\": 28,\n      \"../utils\": 38,\n      \"minimalistic-assert\": 41\n    }],\n    37: [function (require, module, exports) {\n      'use strict';\n\n      var utils = require('../utils');\n\n      var rotr32 = utils.rotr32;\n\n      function ft_1(s, x, y, z) {\n        if (s === 0) return ch32(x, y, z);\n        if (s === 1 || s === 3) return p32(x, y, z);\n        if (s === 2) return maj32(x, y, z);\n      }\n\n      exports.ft_1 = ft_1;\n\n      function ch32(x, y, z) {\n        return x & y ^ ~x & z;\n      }\n\n      exports.ch32 = ch32;\n\n      function maj32(x, y, z) {\n        return x & y ^ x & z ^ y & z;\n      }\n\n      exports.maj32 = maj32;\n\n      function p32(x, y, z) {\n        return x ^ y ^ z;\n      }\n\n      exports.p32 = p32;\n\n      function s0_256(x) {\n        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n      }\n\n      exports.s0_256 = s0_256;\n\n      function s1_256(x) {\n        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n      }\n\n      exports.s1_256 = s1_256;\n\n      function g0_256(x) {\n        return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;\n      }\n\n      exports.g0_256 = g0_256;\n\n      function g1_256(x) {\n        return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;\n      }\n\n      exports.g1_256 = g1_256;\n    }, {\n      \"../utils\": 38\n    }],\n    38: [function (require, module, exports) {\n      'use strict';\n\n      var assert = require('minimalistic-assert');\n\n      var inherits = require('inherits');\n\n      exports.inherits = inherits;\n\n      function toArray(msg, enc) {\n        if (Array.isArray(msg)) return msg.slice();\n        if (!msg) return [];\n        var res = [];\n\n        if (typeof msg === 'string') {\n          if (!enc) {\n            for (var i = 0; i < msg.length; i++) {\n              var c = msg.charCodeAt(i);\n              var hi = c >> 8;\n              var lo = c & 0xff;\n              if (hi) res.push(hi, lo);else res.push(lo);\n            }\n          } else if (enc === 'hex') {\n            msg = msg.replace(/[^a-z0-9]+/ig, '');\n            if (msg.length % 2 !== 0) msg = '0' + msg;\n\n            for (i = 0; i < msg.length; i += 2) {\n              res.push(parseInt(msg[i] + msg[i + 1], 16));\n            }\n          }\n        } else {\n          for (i = 0; i < msg.length; i++) {\n            res[i] = msg[i] | 0;\n          }\n        }\n\n        return res;\n      }\n\n      exports.toArray = toArray;\n\n      function toHex(msg) {\n        var res = '';\n\n        for (var i = 0; i < msg.length; i++) {\n          res += zero2(msg[i].toString(16));\n        }\n\n        return res;\n      }\n\n      exports.toHex = toHex;\n\n      function htonl(w) {\n        var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n        return res >>> 0;\n      }\n\n      exports.htonl = htonl;\n\n      function toHex32(msg, endian) {\n        var res = '';\n\n        for (var i = 0; i < msg.length; i++) {\n          var w = msg[i];\n          if (endian === 'little') w = htonl(w);\n          res += zero8(w.toString(16));\n        }\n\n        return res;\n      }\n\n      exports.toHex32 = toHex32;\n\n      function zero2(word) {\n        if (word.length === 1) return '0' + word;else return word;\n      }\n\n      exports.zero2 = zero2;\n\n      function zero8(word) {\n        if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n      }\n\n      exports.zero8 = zero8;\n\n      function join32(msg, start, end, endian) {\n        var len = end - start;\n        assert(len % 4 === 0);\n        var res = new Array(len / 4);\n\n        for (var i = 0, k = start; i < res.length; i++, k += 4) {\n          var w;\n          if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n          res[i] = w >>> 0;\n        }\n\n        return res;\n      }\n\n      exports.join32 = join32;\n\n      function split32(msg, endian) {\n        var res = new Array(msg.length * 4);\n\n        for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n          var m = msg[i];\n\n          if (endian === 'big') {\n            res[k] = m >>> 24;\n            res[k + 1] = m >>> 16 & 0xff;\n            res[k + 2] = m >>> 8 & 0xff;\n            res[k + 3] = m & 0xff;\n          } else {\n            res[k + 3] = m >>> 24;\n            res[k + 2] = m >>> 16 & 0xff;\n            res[k + 1] = m >>> 8 & 0xff;\n            res[k] = m & 0xff;\n          }\n        }\n\n        return res;\n      }\n\n      exports.split32 = split32;\n\n      function rotr32(w, b) {\n        return w >>> b | w << 32 - b;\n      }\n\n      exports.rotr32 = rotr32;\n\n      function rotl32(w, b) {\n        return w << b | w >>> 32 - b;\n      }\n\n      exports.rotl32 = rotl32;\n\n      function sum32(a, b) {\n        return a + b >>> 0;\n      }\n\n      exports.sum32 = sum32;\n\n      function sum32_3(a, b, c) {\n        return a + b + c >>> 0;\n      }\n\n      exports.sum32_3 = sum32_3;\n\n      function sum32_4(a, b, c, d) {\n        return a + b + c + d >>> 0;\n      }\n\n      exports.sum32_4 = sum32_4;\n\n      function sum32_5(a, b, c, d, e) {\n        return a + b + c + d + e >>> 0;\n      }\n\n      exports.sum32_5 = sum32_5;\n\n      function sum64(buf, pos, ah, al) {\n        var bh = buf[pos];\n        var bl = buf[pos + 1];\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        buf[pos] = hi >>> 0;\n        buf[pos + 1] = lo;\n      }\n\n      exports.sum64 = sum64;\n\n      function sum64_hi(ah, al, bh, bl) {\n        var lo = al + bl >>> 0;\n        var hi = (lo < al ? 1 : 0) + ah + bh;\n        return hi >>> 0;\n      }\n\n      exports.sum64_hi = sum64_hi;\n\n      function sum64_lo(ah, al, bh, bl) {\n        var lo = al + bl;\n        return lo >>> 0;\n      }\n\n      exports.sum64_lo = sum64_lo;\n\n      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        var hi = ah + bh + ch + dh + carry;\n        return hi >>> 0;\n      }\n\n      exports.sum64_4_hi = sum64_4_hi;\n\n      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n        var lo = al + bl + cl + dl;\n        return lo >>> 0;\n      }\n\n      exports.sum64_4_lo = sum64_4_lo;\n\n      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var carry = 0;\n        var lo = al;\n        lo = lo + bl >>> 0;\n        carry += lo < al ? 1 : 0;\n        lo = lo + cl >>> 0;\n        carry += lo < cl ? 1 : 0;\n        lo = lo + dl >>> 0;\n        carry += lo < dl ? 1 : 0;\n        lo = lo + el >>> 0;\n        carry += lo < el ? 1 : 0;\n        var hi = ah + bh + ch + dh + eh + carry;\n        return hi >>> 0;\n      }\n\n      exports.sum64_5_hi = sum64_5_hi;\n\n      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n        var lo = al + bl + cl + dl + el;\n        return lo >>> 0;\n      }\n\n      exports.sum64_5_lo = sum64_5_lo;\n\n      function rotr64_hi(ah, al, num) {\n        var r = al << 32 - num | ah >>> num;\n        return r >>> 0;\n      }\n\n      exports.rotr64_hi = rotr64_hi;\n\n      function rotr64_lo(ah, al, num) {\n        var r = ah << 32 - num | al >>> num;\n        return r >>> 0;\n      }\n\n      exports.rotr64_lo = rotr64_lo;\n\n      function shr64_hi(ah, al, num) {\n        return ah >>> num;\n      }\n\n      exports.shr64_hi = shr64_hi;\n\n      function shr64_lo(ah, al, num) {\n        var r = ah << 32 - num | al >>> num;\n        return r >>> 0;\n      }\n\n      exports.shr64_lo = shr64_lo;\n    }, {\n      \"inherits\": 39,\n      \"minimalistic-assert\": 41\n    }],\n    39: [function (require, module, exports) {\n      if (typeof Object.create === 'function') {\n        // implementation from standard node.js 'util' module\n        module.exports = function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        };\n      } else {\n        // old school shim for old browsers\n        module.exports = function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n\n          var TempCtor = function TempCtor() {};\n\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        };\n      }\n    }, {}],\n    40: [function (require, module, exports) {\n      (function (process, global) {\n        /**\r\n         * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n         *\r\n         * @version 0.5.7\r\n         * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n         * @copyright Chen, Yi-Cyuan 2015-2016\r\n         * @license MIT\r\n         */\n\n        /*jslint bitwise: true */\n        (function () {\n          'use strict';\n\n          var root = typeof window === 'object' ? window : {};\n          var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n          if (NODE_JS) {\n            root = global;\n          }\n\n          var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n          var HEX_CHARS = '0123456789abcdef'.split('');\n          var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n          var KECCAK_PADDING = [1, 256, 65536, 16777216];\n          var PADDING = [6, 1536, 393216, 100663296];\n          var SHIFT = [0, 8, 16, 24];\n          var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n          var BITS = [224, 256, 384, 512];\n          var SHAKE_BITS = [128, 256];\n          var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\n\n          var createOutputMethod = function createOutputMethod(bits, padding, outputType) {\n            return function (message) {\n              return new Keccak(bits, padding, bits).update(message)[outputType]();\n            };\n          };\n\n          var createShakeOutputMethod = function createShakeOutputMethod(bits, padding, outputType) {\n            return function (message, outputBits) {\n              return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n            };\n          };\n\n          var createMethod = function createMethod(bits, padding) {\n            var method = createOutputMethod(bits, padding, 'hex');\n\n            method.create = function () {\n              return new Keccak(bits, padding, bits);\n            };\n\n            method.update = function (message) {\n              return method.create().update(message);\n            };\n\n            for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n              var type = OUTPUT_TYPES[i];\n              method[type] = createOutputMethod(bits, padding, type);\n            }\n\n            return method;\n          };\n\n          var createShakeMethod = function createShakeMethod(bits, padding) {\n            var method = createShakeOutputMethod(bits, padding, 'hex');\n\n            method.create = function (outputBits) {\n              return new Keccak(bits, padding, outputBits);\n            };\n\n            method.update = function (message, outputBits) {\n              return method.create(outputBits).update(message);\n            };\n\n            for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n              var type = OUTPUT_TYPES[i];\n              method[type] = createShakeOutputMethod(bits, padding, type);\n            }\n\n            return method;\n          };\n\n          var algorithms = [{\n            name: 'keccak',\n            padding: KECCAK_PADDING,\n            bits: BITS,\n            createMethod: createMethod\n          }, {\n            name: 'sha3',\n            padding: PADDING,\n            bits: BITS,\n            createMethod: createMethod\n          }, {\n            name: 'shake',\n            padding: SHAKE_PADDING,\n            bits: SHAKE_BITS,\n            createMethod: createShakeMethod\n          }];\n          var methods = {},\n              methodNames = [];\n\n          for (var i = 0; i < algorithms.length; ++i) {\n            var algorithm = algorithms[i];\n            var bits = algorithm.bits;\n\n            for (var j = 0; j < bits.length; ++j) {\n              var methodName = algorithm.name + '_' + bits[j];\n              methodNames.push(methodName);\n              methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n            }\n          }\n\n          function Keccak(bits, padding, outputBits) {\n            this.blocks = [];\n            this.s = [];\n            this.padding = padding;\n            this.outputBits = outputBits;\n            this.reset = true;\n            this.block = 0;\n            this.start = 0;\n            this.blockCount = 1600 - (bits << 1) >> 5;\n            this.byteCount = this.blockCount << 2;\n            this.outputBlocks = outputBits >> 5;\n            this.extraBytes = (outputBits & 31) >> 3;\n\n            for (var i = 0; i < 50; ++i) {\n              this.s[i] = 0;\n            }\n          }\n\n          Keccak.prototype.update = function (message) {\n            var notString = typeof message !== 'string';\n\n            if (notString && message.constructor === ArrayBuffer) {\n              message = new Uint8Array(message);\n            }\n\n            var length = message.length,\n                blocks = this.blocks,\n                byteCount = this.byteCount,\n                blockCount = this.blockCount,\n                index = 0,\n                s = this.s,\n                i,\n                code;\n\n            while (index < length) {\n              if (this.reset) {\n                this.reset = false;\n                blocks[0] = this.block;\n\n                for (i = 1; i < blockCount + 1; ++i) {\n                  blocks[i] = 0;\n                }\n              }\n\n              if (notString) {\n                for (i = this.start; index < length && i < byteCount; ++index) {\n                  blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n                }\n              } else {\n                for (i = this.start; index < length && i < byteCount; ++index) {\n                  code = message.charCodeAt(index);\n\n                  if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                  } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                  } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                  } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                  }\n                }\n              }\n\n              this.lastByteIndex = i;\n\n              if (i >= byteCount) {\n                this.start = i - byteCount;\n                this.block = blocks[blockCount];\n\n                for (i = 0; i < blockCount; ++i) {\n                  s[i] ^= blocks[i];\n                }\n\n                f(s);\n                this.reset = true;\n              } else {\n                this.start = i;\n              }\n            }\n\n            return this;\n          };\n\n          Keccak.prototype.finalize = function () {\n            var blocks = this.blocks,\n                i = this.lastByteIndex,\n                blockCount = this.blockCount,\n                s = this.s;\n            blocks[i >> 2] |= this.padding[i & 3];\n\n            if (this.lastByteIndex === this.byteCount) {\n              blocks[0] = blocks[blockCount];\n\n              for (i = 1; i < blockCount + 1; ++i) {\n                blocks[i] = 0;\n              }\n            }\n\n            blocks[blockCount - 1] |= 0x80000000;\n\n            for (i = 0; i < blockCount; ++i) {\n              s[i] ^= blocks[i];\n            }\n\n            f(s);\n          };\n\n          Keccak.prototype.toString = Keccak.prototype.hex = function () {\n            this.finalize();\n            var blockCount = this.blockCount,\n                s = this.s,\n                outputBlocks = this.outputBlocks,\n                extraBytes = this.extraBytes,\n                i = 0,\n                j = 0;\n            var hex = '',\n                block;\n\n            while (j < outputBlocks) {\n              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n                block = s[i];\n                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n              }\n\n              if (j % blockCount === 0) {\n                f(s);\n                i = 0;\n              }\n            }\n\n            if (extraBytes) {\n              block = s[i];\n\n              if (extraBytes > 0) {\n                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n              }\n\n              if (extraBytes > 1) {\n                hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n              }\n\n              if (extraBytes > 2) {\n                hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n              }\n            }\n\n            return hex;\n          };\n\n          Keccak.prototype.arrayBuffer = function () {\n            this.finalize();\n            var blockCount = this.blockCount,\n                s = this.s,\n                outputBlocks = this.outputBlocks,\n                extraBytes = this.extraBytes,\n                i = 0,\n                j = 0;\n            var bytes = this.outputBits >> 3;\n            var buffer;\n\n            if (extraBytes) {\n              buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n            } else {\n              buffer = new ArrayBuffer(bytes);\n            }\n\n            var array = new Uint32Array(buffer);\n\n            while (j < outputBlocks) {\n              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n                array[j] = s[i];\n              }\n\n              if (j % blockCount === 0) {\n                f(s);\n              }\n            }\n\n            if (extraBytes) {\n              array[i] = s[i];\n              buffer = buffer.slice(0, bytes);\n            }\n\n            return buffer;\n          };\n\n          Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n          Keccak.prototype.digest = Keccak.prototype.array = function () {\n            this.finalize();\n            var blockCount = this.blockCount,\n                s = this.s,\n                outputBlocks = this.outputBlocks,\n                extraBytes = this.extraBytes,\n                i = 0,\n                j = 0;\n            var array = [],\n                offset,\n                block;\n\n            while (j < outputBlocks) {\n              for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n                offset = j << 2;\n                block = s[i];\n                array[offset] = block & 0xFF;\n                array[offset + 1] = block >> 8 & 0xFF;\n                array[offset + 2] = block >> 16 & 0xFF;\n                array[offset + 3] = block >> 24 & 0xFF;\n              }\n\n              if (j % blockCount === 0) {\n                f(s);\n              }\n            }\n\n            if (extraBytes) {\n              offset = j << 2;\n              block = s[i];\n\n              if (extraBytes > 0) {\n                array[offset] = block & 0xFF;\n              }\n\n              if (extraBytes > 1) {\n                array[offset + 1] = block >> 8 & 0xFF;\n              }\n\n              if (extraBytes > 2) {\n                array[offset + 2] = block >> 16 & 0xFF;\n              }\n            }\n\n            return array;\n          };\n\n          var f = function f(s) {\n            var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n            for (n = 0; n < 48; n += 2) {\n              c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n              c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n              c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n              c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n              c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n              c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n              c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n              c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n              c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n              c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n              h = c8 ^ (c2 << 1 | c3 >>> 31);\n              l = c9 ^ (c3 << 1 | c2 >>> 31);\n              s[0] ^= h;\n              s[1] ^= l;\n              s[10] ^= h;\n              s[11] ^= l;\n              s[20] ^= h;\n              s[21] ^= l;\n              s[30] ^= h;\n              s[31] ^= l;\n              s[40] ^= h;\n              s[41] ^= l;\n              h = c0 ^ (c4 << 1 | c5 >>> 31);\n              l = c1 ^ (c5 << 1 | c4 >>> 31);\n              s[2] ^= h;\n              s[3] ^= l;\n              s[12] ^= h;\n              s[13] ^= l;\n              s[22] ^= h;\n              s[23] ^= l;\n              s[32] ^= h;\n              s[33] ^= l;\n              s[42] ^= h;\n              s[43] ^= l;\n              h = c2 ^ (c6 << 1 | c7 >>> 31);\n              l = c3 ^ (c7 << 1 | c6 >>> 31);\n              s[4] ^= h;\n              s[5] ^= l;\n              s[14] ^= h;\n              s[15] ^= l;\n              s[24] ^= h;\n              s[25] ^= l;\n              s[34] ^= h;\n              s[35] ^= l;\n              s[44] ^= h;\n              s[45] ^= l;\n              h = c4 ^ (c8 << 1 | c9 >>> 31);\n              l = c5 ^ (c9 << 1 | c8 >>> 31);\n              s[6] ^= h;\n              s[7] ^= l;\n              s[16] ^= h;\n              s[17] ^= l;\n              s[26] ^= h;\n              s[27] ^= l;\n              s[36] ^= h;\n              s[37] ^= l;\n              s[46] ^= h;\n              s[47] ^= l;\n              h = c6 ^ (c0 << 1 | c1 >>> 31);\n              l = c7 ^ (c1 << 1 | c0 >>> 31);\n              s[8] ^= h;\n              s[9] ^= l;\n              s[18] ^= h;\n              s[19] ^= l;\n              s[28] ^= h;\n              s[29] ^= l;\n              s[38] ^= h;\n              s[39] ^= l;\n              s[48] ^= h;\n              s[49] ^= l;\n              b0 = s[0];\n              b1 = s[1];\n              b32 = s[11] << 4 | s[10] >>> 28;\n              b33 = s[10] << 4 | s[11] >>> 28;\n              b14 = s[20] << 3 | s[21] >>> 29;\n              b15 = s[21] << 3 | s[20] >>> 29;\n              b46 = s[31] << 9 | s[30] >>> 23;\n              b47 = s[30] << 9 | s[31] >>> 23;\n              b28 = s[40] << 18 | s[41] >>> 14;\n              b29 = s[41] << 18 | s[40] >>> 14;\n              b20 = s[2] << 1 | s[3] >>> 31;\n              b21 = s[3] << 1 | s[2] >>> 31;\n              b2 = s[13] << 12 | s[12] >>> 20;\n              b3 = s[12] << 12 | s[13] >>> 20;\n              b34 = s[22] << 10 | s[23] >>> 22;\n              b35 = s[23] << 10 | s[22] >>> 22;\n              b16 = s[33] << 13 | s[32] >>> 19;\n              b17 = s[32] << 13 | s[33] >>> 19;\n              b48 = s[42] << 2 | s[43] >>> 30;\n              b49 = s[43] << 2 | s[42] >>> 30;\n              b40 = s[5] << 30 | s[4] >>> 2;\n              b41 = s[4] << 30 | s[5] >>> 2;\n              b22 = s[14] << 6 | s[15] >>> 26;\n              b23 = s[15] << 6 | s[14] >>> 26;\n              b4 = s[25] << 11 | s[24] >>> 21;\n              b5 = s[24] << 11 | s[25] >>> 21;\n              b36 = s[34] << 15 | s[35] >>> 17;\n              b37 = s[35] << 15 | s[34] >>> 17;\n              b18 = s[45] << 29 | s[44] >>> 3;\n              b19 = s[44] << 29 | s[45] >>> 3;\n              b10 = s[6] << 28 | s[7] >>> 4;\n              b11 = s[7] << 28 | s[6] >>> 4;\n              b42 = s[17] << 23 | s[16] >>> 9;\n              b43 = s[16] << 23 | s[17] >>> 9;\n              b24 = s[26] << 25 | s[27] >>> 7;\n              b25 = s[27] << 25 | s[26] >>> 7;\n              b6 = s[36] << 21 | s[37] >>> 11;\n              b7 = s[37] << 21 | s[36] >>> 11;\n              b38 = s[47] << 24 | s[46] >>> 8;\n              b39 = s[46] << 24 | s[47] >>> 8;\n              b30 = s[8] << 27 | s[9] >>> 5;\n              b31 = s[9] << 27 | s[8] >>> 5;\n              b12 = s[18] << 20 | s[19] >>> 12;\n              b13 = s[19] << 20 | s[18] >>> 12;\n              b44 = s[29] << 7 | s[28] >>> 25;\n              b45 = s[28] << 7 | s[29] >>> 25;\n              b26 = s[38] << 8 | s[39] >>> 24;\n              b27 = s[39] << 8 | s[38] >>> 24;\n              b8 = s[48] << 14 | s[49] >>> 18;\n              b9 = s[49] << 14 | s[48] >>> 18;\n              s[0] = b0 ^ ~b2 & b4;\n              s[1] = b1 ^ ~b3 & b5;\n              s[10] = b10 ^ ~b12 & b14;\n              s[11] = b11 ^ ~b13 & b15;\n              s[20] = b20 ^ ~b22 & b24;\n              s[21] = b21 ^ ~b23 & b25;\n              s[30] = b30 ^ ~b32 & b34;\n              s[31] = b31 ^ ~b33 & b35;\n              s[40] = b40 ^ ~b42 & b44;\n              s[41] = b41 ^ ~b43 & b45;\n              s[2] = b2 ^ ~b4 & b6;\n              s[3] = b3 ^ ~b5 & b7;\n              s[12] = b12 ^ ~b14 & b16;\n              s[13] = b13 ^ ~b15 & b17;\n              s[22] = b22 ^ ~b24 & b26;\n              s[23] = b23 ^ ~b25 & b27;\n              s[32] = b32 ^ ~b34 & b36;\n              s[33] = b33 ^ ~b35 & b37;\n              s[42] = b42 ^ ~b44 & b46;\n              s[43] = b43 ^ ~b45 & b47;\n              s[4] = b4 ^ ~b6 & b8;\n              s[5] = b5 ^ ~b7 & b9;\n              s[14] = b14 ^ ~b16 & b18;\n              s[15] = b15 ^ ~b17 & b19;\n              s[24] = b24 ^ ~b26 & b28;\n              s[25] = b25 ^ ~b27 & b29;\n              s[34] = b34 ^ ~b36 & b38;\n              s[35] = b35 ^ ~b37 & b39;\n              s[44] = b44 ^ ~b46 & b48;\n              s[45] = b45 ^ ~b47 & b49;\n              s[6] = b6 ^ ~b8 & b0;\n              s[7] = b7 ^ ~b9 & b1;\n              s[16] = b16 ^ ~b18 & b10;\n              s[17] = b17 ^ ~b19 & b11;\n              s[26] = b26 ^ ~b28 & b20;\n              s[27] = b27 ^ ~b29 & b21;\n              s[36] = b36 ^ ~b38 & b30;\n              s[37] = b37 ^ ~b39 & b31;\n              s[46] = b46 ^ ~b48 & b40;\n              s[47] = b47 ^ ~b49 & b41;\n              s[8] = b8 ^ ~b0 & b2;\n              s[9] = b9 ^ ~b1 & b3;\n              s[18] = b18 ^ ~b10 & b12;\n              s[19] = b19 ^ ~b11 & b13;\n              s[28] = b28 ^ ~b20 & b22;\n              s[29] = b29 ^ ~b21 & b23;\n              s[38] = b38 ^ ~b30 & b32;\n              s[39] = b39 ^ ~b31 & b33;\n              s[48] = b48 ^ ~b40 & b42;\n              s[49] = b49 ^ ~b41 & b43;\n              s[0] ^= RC[n];\n              s[1] ^= RC[n + 1];\n            }\n          };\n\n          if (COMMON_JS) {\n            module.exports = methods;\n          } else {\n            for (var i = 0; i < methodNames.length; ++i) {\n              root[methodNames[i]] = methods[methodNames[i]];\n            }\n          }\n        })();\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"_process\": 42\n    }],\n    41: [function (require, module, exports) {\n      module.exports = assert;\n\n      function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      }\n\n      assert.equal = function assertEqual(l, r, msg) {\n        if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n      };\n    }, {}],\n    42: [function (require, module, exports) {\n      module.exports = {\n        browser: true\n      };\n    }, {}],\n    43: [function (require, module, exports) {\n      (function (setImmediate) {\n        \"use strict\";\n\n        (function (root) {\n          var MAX_VALUE = 0x7fffffff; // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n          // See: https://github.com/dchest/scrypt-async-js\n\n          function SHA256(m) {\n            var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n            var h0 = 0x6a09e667,\n                h1 = 0xbb67ae85,\n                h2 = 0x3c6ef372,\n                h3 = 0xa54ff53a;\n            var h4 = 0x510e527f,\n                h5 = 0x9b05688c,\n                h6 = 0x1f83d9ab,\n                h7 = 0x5be0cd19;\n            var w = new Array(64);\n\n            function blocks(p) {\n              var off = 0,\n                  len = p.length;\n\n              while (len >= 64) {\n                var a = h0,\n                    b = h1,\n                    c = h2,\n                    d = h3,\n                    e = h4,\n                    f = h5,\n                    g = h6,\n                    h = h7,\n                    u,\n                    i,\n                    j,\n                    t1,\n                    t2;\n\n                for (i = 0; i < 16; i++) {\n                  j = off + i * 4;\n                  w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n                }\n\n                for (i = 16; i < 64; i++) {\n                  u = w[i - 2];\n                  t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n                  u = w[i - 15];\n                  t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n                  w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n                }\n\n                for (i = 0; i < 64; i++) {\n                  t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n                  t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n                  h = g;\n                  g = f;\n                  f = e;\n                  e = d + t1 | 0;\n                  d = c;\n                  c = b;\n                  b = a;\n                  a = t1 + t2 | 0;\n                }\n\n                h0 = h0 + a | 0;\n                h1 = h1 + b | 0;\n                h2 = h2 + c | 0;\n                h3 = h3 + d | 0;\n                h4 = h4 + e | 0;\n                h5 = h5 + f | 0;\n                h6 = h6 + g | 0;\n                h7 = h7 + h | 0;\n                off += 64;\n                len -= 64;\n              }\n            }\n\n            blocks(m);\n            var i,\n                bytesLeft = m.length % 64,\n                bitLenHi = m.length / 0x20000000 | 0,\n                bitLenLo = m.length << 3,\n                numZeros = bytesLeft < 56 ? 56 : 120,\n                p = m.slice(m.length - bytesLeft, m.length);\n            p.push(0x80);\n\n            for (i = bytesLeft + 1; i < numZeros; i++) {\n              p.push(0);\n            }\n\n            p.push(bitLenHi >>> 24 & 0xff);\n            p.push(bitLenHi >>> 16 & 0xff);\n            p.push(bitLenHi >>> 8 & 0xff);\n            p.push(bitLenHi >>> 0 & 0xff);\n            p.push(bitLenLo >>> 24 & 0xff);\n            p.push(bitLenLo >>> 16 & 0xff);\n            p.push(bitLenLo >>> 8 & 0xff);\n            p.push(bitLenLo >>> 0 & 0xff);\n            blocks(p);\n            return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];\n          }\n\n          function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n            // compress password if it's longer than hash block length\n            password = password.length <= 64 ? password : SHA256(password);\n            var i;\n            var innerLen = 64 + salt.length + 4;\n            var inner = new Array(innerLen);\n            var outerKey = new Array(64);\n            var dk = []; // inner = (password ^ ipad) || salt || counter\n\n            for (i = 0; i < 64; i++) {\n              inner[i] = 0x36;\n            }\n\n            for (i = 0; i < password.length; i++) {\n              inner[i] ^= password[i];\n            }\n\n            for (i = 0; i < salt.length; i++) {\n              inner[64 + i] = salt[i];\n            }\n\n            for (i = innerLen - 4; i < innerLen; i++) {\n              inner[i] = 0;\n            } // outerKey = password ^ opad\n\n\n            for (i = 0; i < 64; i++) {\n              outerKey[i] = 0x5c;\n            }\n\n            for (i = 0; i < password.length; i++) {\n              outerKey[i] ^= password[i];\n            } // increments counter inside inner\n\n\n            function incrementCounter() {\n              for (var i = innerLen - 1; i >= innerLen - 4; i--) {\n                inner[i]++;\n                if (inner[i] <= 0xff) return;\n                inner[i] = 0;\n              }\n            } // output blocks = SHA256(outerKey || SHA256(inner)) ...\n\n\n            while (dkLen >= 32) {\n              incrementCounter();\n              dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n              dkLen -= 32;\n            }\n\n            if (dkLen > 0) {\n              incrementCounter();\n              dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n            }\n\n            return dk;\n          } // The following is an adaptation of scryptsy\n          // See: https://www.npmjs.com/package/scryptsy\n\n\n          function blockmix_salsa8(BY, Yi, r, x, _X) {\n            var i;\n            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n\n            for (i = 0; i < 2 * r; i++) {\n              blockxor(BY, i * 16, _X, 16);\n              salsa20_8(_X, x);\n              arraycopy(_X, 0, BY, Yi + i * 16, 16);\n            }\n\n            for (i = 0; i < r; i++) {\n              arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n            }\n\n            for (i = 0; i < r; i++) {\n              arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n            }\n          }\n\n          function R(a, b) {\n            return a << b | a >>> 32 - b;\n          }\n\n          function salsa20_8(B, x) {\n            arraycopy(B, 0, x, 0, 16);\n\n            for (var i = 8; i > 0; i -= 2) {\n              x[4] ^= R(x[0] + x[12], 7);\n              x[8] ^= R(x[4] + x[0], 9);\n              x[12] ^= R(x[8] + x[4], 13);\n              x[0] ^= R(x[12] + x[8], 18);\n              x[9] ^= R(x[5] + x[1], 7);\n              x[13] ^= R(x[9] + x[5], 9);\n              x[1] ^= R(x[13] + x[9], 13);\n              x[5] ^= R(x[1] + x[13], 18);\n              x[14] ^= R(x[10] + x[6], 7);\n              x[2] ^= R(x[14] + x[10], 9);\n              x[6] ^= R(x[2] + x[14], 13);\n              x[10] ^= R(x[6] + x[2], 18);\n              x[3] ^= R(x[15] + x[11], 7);\n              x[7] ^= R(x[3] + x[15], 9);\n              x[11] ^= R(x[7] + x[3], 13);\n              x[15] ^= R(x[11] + x[7], 18);\n              x[1] ^= R(x[0] + x[3], 7);\n              x[2] ^= R(x[1] + x[0], 9);\n              x[3] ^= R(x[2] + x[1], 13);\n              x[0] ^= R(x[3] + x[2], 18);\n              x[6] ^= R(x[5] + x[4], 7);\n              x[7] ^= R(x[6] + x[5], 9);\n              x[4] ^= R(x[7] + x[6], 13);\n              x[5] ^= R(x[4] + x[7], 18);\n              x[11] ^= R(x[10] + x[9], 7);\n              x[8] ^= R(x[11] + x[10], 9);\n              x[9] ^= R(x[8] + x[11], 13);\n              x[10] ^= R(x[9] + x[8], 18);\n              x[12] ^= R(x[15] + x[14], 7);\n              x[13] ^= R(x[12] + x[15], 9);\n              x[14] ^= R(x[13] + x[12], 13);\n              x[15] ^= R(x[14] + x[13], 18);\n            }\n\n            for (i = 0; i < 16; ++i) {\n              B[i] += x[i];\n            }\n          } // naive approach... going back to loop unrolling may yield additional performance\n\n\n          function blockxor(S, Si, D, len) {\n            for (var i = 0; i < len; i++) {\n              D[i] ^= S[Si + i];\n            }\n          }\n\n          function arraycopy(src, srcPos, dest, destPos, length) {\n            while (length--) {\n              dest[destPos++] = src[srcPos++];\n            }\n          }\n\n          function checkBufferish(o) {\n            if (!o || typeof o.length !== 'number') {\n              return false;\n            }\n\n            for (var i = 0; i < o.length; i++) {\n              if (typeof o[i] !== 'number') {\n                return false;\n              }\n\n              var v = parseInt(o[i]);\n\n              if (v != o[i] || v < 0 || v >= 256) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n          function ensureInteger(value, name) {\n            var intValue = parseInt(value);\n\n            if (value != intValue) {\n              throw new Error('invalid ' + name);\n            }\n\n            return intValue;\n          } // N = Cpu cost, r = Memory cost, p = parallelization cost\n          // callback(error, progress, key)\n\n\n          function scrypt(password, salt, N, r, p, dkLen, callback) {\n            if (!callback) {\n              throw new Error('missing callback');\n            }\n\n            N = ensureInteger(N, 'N');\n            r = ensureInteger(r, 'r');\n            p = ensureInteger(p, 'p');\n            dkLen = ensureInteger(dkLen, 'dkLen');\n\n            if (N === 0 || (N & N - 1) !== 0) {\n              throw new Error('N must be power of 2');\n            }\n\n            if (N > MAX_VALUE / 128 / r) {\n              throw new Error('N too large');\n            }\n\n            if (r > MAX_VALUE / 128 / p) {\n              throw new Error('r too large');\n            }\n\n            if (!checkBufferish(password)) {\n              throw new Error('password must be an array or buffer');\n            }\n\n            password = Array.prototype.slice.call(password);\n\n            if (!checkBufferish(salt)) {\n              throw new Error('salt must be an array or buffer');\n            }\n\n            salt = Array.prototype.slice.call(salt);\n            var b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n            var B = new Uint32Array(p * 32 * r);\n\n            for (var i = 0; i < B.length; i++) {\n              var j = i * 4;\n              B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;\n            }\n\n            var XY = new Uint32Array(64 * r);\n            var V = new Uint32Array(32 * r * N);\n            var Yi = 32 * r; // scratch space\n\n            var x = new Uint32Array(16); // salsa20_8\n\n            var _X = new Uint32Array(16); // blockmix_salsa8\n\n\n            var totalOps = p * N * 2;\n            var currentOp = 0;\n            var lastPercent10 = null; // Set this to true to abandon the scrypt on the next step\n\n            var stop = false; // State information\n\n            var state = 0;\n            var i0 = 0,\n                i1;\n            var Bi; // How many blockmix_salsa8 can we do per step?\n\n            var limit = parseInt(1000 / r); // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n\n            var nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout; // This is really all I changed; making scryptsy a state machine so we occasionally\n            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n\n            var incrementalSMix = function incrementalSMix() {\n              if (stop) {\n                return callback(new Error('cancelled'), currentOp / totalOps);\n              }\n\n              switch (state) {\n                case 0:\n                  // for (var i = 0; i < p; i++)...\n                  Bi = i0 * 32 * r;\n                  arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1\n\n                  state = 1; // Move to ROMix 2\n\n                  i1 = 0;\n                // Fall through\n\n                case 1:\n                  // Run up to 1000 steps of the first inner smix loop\n                  var steps = N - i1;\n\n                  if (steps > limit) {\n                    steps = limit;\n                  }\n\n                  for (var i = 0; i < steps; i++) {\n                    // ROMix - 2\n                    arraycopy(XY, 0, V, (i1 + i) * Yi, Yi); // ROMix - 3\n\n                    blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4\n                  } // for (var i = 0; i < N; i++)\n\n\n                  i1 += steps;\n                  currentOp += steps; // Call the callback with the progress (optionally stopping us)\n\n                  var percent10 = parseInt(1000 * currentOp / totalOps);\n\n                  if (percent10 !== lastPercent10) {\n                    stop = callback(null, currentOp / totalOps);\n\n                    if (stop) {\n                      break;\n                    }\n\n                    lastPercent10 = percent10;\n                  }\n\n                  if (i1 < N) {\n                    break;\n                  }\n\n                  i1 = 0; // Move to ROMix 6\n\n                  state = 2;\n                // Fall through\n\n                case 2:\n                  // Run up to 1000 steps of the second inner smix loop\n                  var steps = N - i1;\n\n                  if (steps > limit) {\n                    steps = limit;\n                  }\n\n                  for (var i = 0; i < steps; i++) {\n                    // ROMix - 6\n                    var offset = (2 * r - 1) * 16; // ROMix - 7\n\n                    var j = XY[offset] & N - 1;\n                    blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)\n\n                    blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)\n                  } // for (var i = 0; i < N; i++)...\n\n\n                  i1 += steps;\n                  currentOp += steps; // Call the callback with the progress (optionally stopping us)\n\n                  var percent10 = parseInt(1000 * currentOp / totalOps);\n\n                  if (percent10 !== lastPercent10) {\n                    stop = callback(null, currentOp / totalOps);\n\n                    if (stop) {\n                      break;\n                    }\n\n                    lastPercent10 = percent10;\n                  }\n\n                  if (i1 < N) {\n                    break;\n                  }\n\n                  arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10\n                  // for (var i = 0; i < p; i++)...\n\n                  i0++;\n\n                  if (i0 < p) {\n                    state = 0;\n                    break;\n                  }\n\n                  b = [];\n\n                  for (var i = 0; i < B.length; i++) {\n                    b.push(B[i] >> 0 & 0xff);\n                    b.push(B[i] >> 8 & 0xff);\n                    b.push(B[i] >> 16 & 0xff);\n                    b.push(B[i] >> 24 & 0xff);\n                  }\n\n                  var derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen); // Done; don't break (which would reschedule)\n\n                  return callback(null, 1.0, derivedKey);\n              } // Schedule the next steps\n\n\n              nextTick(incrementalSMix);\n            }; // Bootstrap the incremental smix\n\n\n            incrementalSMix();\n          } // node.js\n\n\n          if (typeof exports !== 'undefined') {\n            module.exports = scrypt; // RequireJS/AMD\n            // http://www.requirejs.org/docs/api.html\n            // https://github.com/amdjs/amdjs-api/wiki/AMD\n          } else if (typeof define === 'function' && define.amd) {\n            define(scrypt); // Web Browsers\n          } else if (root) {\n            // If there was an existing library \"scrypt\", make sure it is still available\n            if (root.scrypt) {\n              root._scrypt = root.scrypt;\n            }\n\n            root.scrypt = scrypt;\n          }\n        })(this);\n      }).call(this, require(\"timers\").setImmediate);\n    }, {\n      \"timers\": 45\n    }],\n    44: [function (require, module, exports) {\n      (function (process, global) {\n        (function (global, undefined) {\n          \"use strict\";\n\n          if (global.setImmediate) {\n            return;\n          }\n\n          var nextHandle = 1; // Spec says greater than zero\n\n          var tasksByHandle = {};\n          var currentlyRunningATask = false;\n          var doc = global.document;\n          var setImmediate;\n\n          function addFromSetImmediateArguments(args) {\n            tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);\n            return nextHandle++;\n          } // This function accepts the same arguments as setImmediate, but\n          // returns a function that requires no arguments.\n\n\n          function partiallyApplied(handler) {\n            var args = [].slice.call(arguments, 1);\n            return function () {\n              if (typeof handler === \"function\") {\n                handler.apply(undefined, args);\n              } else {\n                new Function(\"\" + handler)();\n              }\n            };\n          }\n\n          function runIfPresent(handle) {\n            // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n            // So if we're currently running a task, we'll need to delay this invocation.\n            if (currentlyRunningATask) {\n              // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n              // \"too much recursion\" error.\n              setTimeout(partiallyApplied(runIfPresent, handle), 0);\n            } else {\n              var task = tasksByHandle[handle];\n\n              if (task) {\n                currentlyRunningATask = true;\n\n                try {\n                  task();\n                } finally {\n                  clearImmediate(handle);\n                  currentlyRunningATask = false;\n                }\n              }\n            }\n          }\n\n          function clearImmediate(handle) {\n            delete tasksByHandle[handle];\n          }\n\n          function installNextTickImplementation() {\n            setImmediate = function setImmediate() {\n              var handle = addFromSetImmediateArguments(arguments);\n              process.nextTick(partiallyApplied(runIfPresent, handle));\n              return handle;\n            };\n          }\n\n          function canUsePostMessage() {\n            // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n            // where `global.postMessage` means something completely different and can't be used for this purpose.\n            if (global.postMessage && !global.importScripts) {\n              var postMessageIsAsynchronous = true;\n              var oldOnMessage = global.onmessage;\n\n              global.onmessage = function () {\n                postMessageIsAsynchronous = false;\n              };\n\n              global.postMessage(\"\", \"*\");\n              global.onmessage = oldOnMessage;\n              return postMessageIsAsynchronous;\n            }\n          }\n\n          function installPostMessageImplementation() {\n            // Installs an event handler on `global` for the `message` event: see\n            // * https://developer.mozilla.org/en/DOM/window.postMessage\n            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n            var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n            var onGlobalMessage = function onGlobalMessage(event) {\n              if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n              }\n            };\n\n            if (global.addEventListener) {\n              global.addEventListener(\"message\", onGlobalMessage, false);\n            } else {\n              global.attachEvent(\"onmessage\", onGlobalMessage);\n            }\n\n            setImmediate = function setImmediate() {\n              var handle = addFromSetImmediateArguments(arguments);\n              global.postMessage(messagePrefix + handle, \"*\");\n              return handle;\n            };\n          }\n\n          function installMessageChannelImplementation() {\n            var channel = new MessageChannel();\n\n            channel.port1.onmessage = function (event) {\n              var handle = event.data;\n              runIfPresent(handle);\n            };\n\n            setImmediate = function setImmediate() {\n              var handle = addFromSetImmediateArguments(arguments);\n              channel.port2.postMessage(handle);\n              return handle;\n            };\n          }\n\n          function installReadyStateChangeImplementation() {\n            var html = doc.documentElement;\n\n            setImmediate = function setImmediate() {\n              var handle = addFromSetImmediateArguments(arguments); // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\n              var script = doc.createElement(\"script\");\n\n              script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n              };\n\n              html.appendChild(script);\n              return handle;\n            };\n          }\n\n          function installSetTimeoutImplementation() {\n            setImmediate = function setImmediate() {\n              var handle = addFromSetImmediateArguments(arguments);\n              setTimeout(partiallyApplied(runIfPresent, handle), 0);\n              return handle;\n            };\n          } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n          attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n          if ({}.toString.call(global.process) === \"[object process]\") {\n            // For Node.js before 0.9\n            installNextTickImplementation();\n          } else if (canUsePostMessage()) {\n            // For non-IE10 modern browsers\n            installPostMessageImplementation();\n          } else if (global.MessageChannel) {\n            // For web workers, where supported\n            installMessageChannelImplementation();\n          } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n            // For IE 6–8\n            installReadyStateChangeImplementation();\n          } else {\n            // For older browsers\n            installSetTimeoutImplementation();\n          }\n\n          attachTo.setImmediate = setImmediate;\n          attachTo.clearImmediate = clearImmediate;\n        })(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"_process\": 42\n    }],\n    45: [function (require, module, exports) {\n      (function (global) {\n        module.exports = {\n          setImmediate: global.setImmediate\n        };\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    46: [function (require, module, exports) {\n      (function (global) {\n        var rng;\n\n        if (global.crypto && crypto.getRandomValues) {\n          // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n          // Moderately fast, high quality\n          var _rnds8 = new Uint8Array(16);\n\n          rng = function whatwgRNG() {\n            crypto.getRandomValues(_rnds8);\n            return _rnds8;\n          };\n        }\n\n        if (!rng) {\n          // Math.random()-based (RNG)\n          //\n          // If all else fails, use Math.random().  It's fast, but is of unspecified\n          // quality.\n          var _rnds = new Array(16);\n\n          rng = function rng() {\n            for (var i = 0, r; i < 16; i++) {\n              if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n              _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n            }\n\n            return _rnds;\n          };\n        }\n\n        module.exports = rng;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    47: [function (require, module, exports) {\n      //     uuid.js\n      //\n      //     Copyright (c) 2010-2012 Robert Kieffer\n      //     MIT License - http://opensource.org/licenses/mit-license.php\n      // Unique ID creation requires a high quality random # generator.  We feature\n      // detect to determine the best RNG source, normalizing to a function that\n      // returns 128-bits of randomness, since that's what's usually required\n      var _rng = require('./rng'); // Maps for number <-> hex string conversion\n\n\n      var _byteToHex = [];\n      var _hexToByte = {};\n\n      for (var i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n      } // **`parse()` - Parse a UUID into it's component bytes**\n\n\n      function parse(s, buf, offset) {\n        var i = buf && offset || 0,\n            ii = 0;\n        buf = buf || [];\n        s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {\n          if (ii < 16) {\n            // Don't overflow!\n            buf[i + ii++] = _hexToByte[oct];\n          }\n        }); // Zero out remaining bytes if string was short\n\n        while (ii < 16) {\n          buf[i + ii++] = 0;\n        }\n\n        return buf;\n      } // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n\n\n      function unparse(buf, offset) {\n        var i = offset || 0,\n            bth = _byteToHex;\n        return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n      } // **`v1()` - Generate time-based UUID**\n      //\n      // Inspired by https://github.com/LiosK/UUID.js\n      // and http://docs.python.org/library/uuid.html\n      // random #'s we need to init node and clockseq\n\n\n      var _seedBytes = _rng(); // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n\n\n      var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]]; // Per 4.2.2, randomize (14 bit) clockseq\n\n      var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff; // Previous uuid creation time\n\n\n      var _lastMSecs = 0,\n          _lastNSecs = 0; // See https://github.com/broofa/node-uuid for API details\n\n      function v1(options, buf, offset) {\n        var i = buf && offset || 0;\n        var b = buf || [];\n        options = options || {};\n        var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n        // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n        // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n        // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n        var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n        // cycle to simulate higher resolution clock\n\n        var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n        var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n        if (dt < 0 && options.clockseq === undefined) {\n          clockseq = clockseq + 1 & 0x3fff;\n        } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n        // time interval\n\n\n        if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n          nsecs = 0;\n        } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n        if (nsecs >= 10000) {\n          throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n        }\n\n        _lastMSecs = msecs;\n        _lastNSecs = nsecs;\n        _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n        msecs += 12219292800000; // `time_low`\n\n        var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n        b[i++] = tl >>> 24 & 0xff;\n        b[i++] = tl >>> 16 & 0xff;\n        b[i++] = tl >>> 8 & 0xff;\n        b[i++] = tl & 0xff; // `time_mid`\n\n        var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n        b[i++] = tmh >>> 8 & 0xff;\n        b[i++] = tmh & 0xff; // `time_high_and_version`\n\n        b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n        b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n        b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n        b[i++] = clockseq & 0xff; // `node`\n\n        var node = options.node || _nodeId;\n\n        for (var n = 0; n < 6; n++) {\n          b[i + n] = node[n];\n        }\n\n        return buf ? buf : unparse(b);\n      } // **`v4()` - Generate random UUID**\n      // See https://github.com/broofa/node-uuid for API details\n\n\n      function v4(options, buf, offset) {\n        // Deprecated - 'format' argument, as supported in v1.2\n        var i = buf && offset || 0;\n\n        if (typeof options == 'string') {\n          buf = options == 'binary' ? new Array(16) : null;\n          options = null;\n        }\n\n        options = options || {};\n\n        var rnds = options.random || (options.rng || _rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n        rnds[6] = rnds[6] & 0x0f | 0x40;\n        rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n        if (buf) {\n          for (var ii = 0; ii < 16; ii++) {\n            buf[i + ii] = rnds[ii];\n          }\n        }\n\n        return buf || unparse(rnds);\n      } // Export public API\n\n\n      var uuid = v4;\n      uuid.v1 = v1;\n      uuid.v4 = v4;\n      uuid.parse = parse;\n      uuid.unparse = unparse;\n      module.exports = uuid;\n    }, {\n      \"./rng\": 46\n    }],\n    48: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      try {\n        module.exports.XMLHttpRequest = XMLHttpRequest;\n      } catch (error) {\n        console.log('Warning: XMLHttpRequest is not defined');\n        module.exports.XMLHttpRequest = null;\n      }\n    }, {}],\n    49: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var properties_1 = require(\"../utils/properties\");\n\n      ;\n      ; ///////////////////////////////\n      // Exported Abstracts\n\n      var Provider =\n      /** @class */\n      function () {\n        function Provider() {\n          properties_1.setType(this, 'Provider');\n        }\n\n        Provider.isProvider = function (value) {\n          return properties_1.isType(value, 'Provider');\n        };\n\n        return Provider;\n      }();\n\n      exports.Provider = Provider; //defineReadOnly(Signer, 'inherits', inheritable(Abstract));\n    }, {\n      \"../utils/properties\": 72\n    }],\n    50: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var address_1 = require(\"../utils/address\");\n\n      var bignumber_1 = require(\"../utils/bignumber\");\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      var hash_1 = require(\"../utils/hash\");\n\n      var networks_1 = require(\"../utils/networks\");\n\n      var properties_1 = require(\"../utils/properties\");\n\n      var rlp_1 = require(\"../utils/rlp\");\n\n      var transaction_1 = require(\"../utils/transaction\");\n\n      var utf8_1 = require(\"../utils/utf8\");\n\n      var web_1 = require(\"../utils/web\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n      // Imported Abstracts\n\n\n      var abstract_provider_1 = require(\"./abstract-provider\"); //////////////////////////////\n      // Request and Response Checking\n      // @TODO: not any?\n\n\n      function check(format, object) {\n        var result = {};\n\n        for (var key in format) {\n          try {\n            var value = format[key](object[key]);\n\n            if (value !== undefined) {\n              result[key] = value;\n            }\n          } catch (error) {\n            error.checkKey = key;\n            error.checkValue = object[key];\n            throw error;\n          }\n        }\n\n        return result;\n      }\n\n      function allowNull(check, nullValue) {\n        return function (value) {\n          if (value == null) {\n            return nullValue;\n          }\n\n          return check(value);\n        };\n      }\n\n      function allowFalsish(check, replaceValue) {\n        return function (value) {\n          if (!value) {\n            return replaceValue;\n          }\n\n          return check(value);\n        };\n      }\n\n      function arrayOf(check) {\n        return function (array) {\n          if (!Array.isArray(array)) {\n            throw new Error('not an array');\n          }\n\n          var result = [];\n          array.forEach(function (value) {\n            result.push(check(value));\n          });\n          return result;\n        };\n      }\n\n      function checkHash(hash) {\n        if (typeof hash === 'string' && bytes_1.hexDataLength(hash) === 32) {\n          return hash.toLowerCase();\n        }\n\n        errors.throwError('invalid hash', errors.INVALID_ARGUMENT, {\n          arg: 'hash',\n          value: hash\n        });\n        return null;\n      }\n\n      function checkNumber(number) {\n        return bignumber_1.bigNumberify(number).toNumber();\n      } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n      function checkDifficulty(value) {\n        var v = bignumber_1.bigNumberify(value);\n\n        try {\n          return v.toNumber();\n        } catch (error) {}\n\n        return null;\n      }\n\n      function checkBoolean(value) {\n        if (typeof value === 'boolean') {\n          return value;\n        }\n\n        if (typeof value === 'string') {\n          if (value === 'true') {\n            return true;\n          }\n\n          if (value === 'false') {\n            return false;\n          }\n        }\n\n        throw new Error('invaid boolean - ' + value);\n      }\n\n      function checkUint256(uint256) {\n        if (!bytes_1.isHexString(uint256)) {\n          throw new Error('invalid uint256');\n        }\n\n        while (uint256.length < 66) {\n          uint256 = '0x0' + uint256.substring(2);\n        }\n\n        return uint256;\n      }\n      /*\n      function checkString(string) {\n          if (typeof(string) !== 'string') { throw new Error('invalid string'); }\n          return string;\n      }\n      */\n\n\n      function checkBlockTag(blockTag) {\n        if (blockTag == null) {\n          return 'latest';\n        }\n\n        if (blockTag === 'earliest') {\n          return '0x0';\n        }\n\n        if (blockTag === 'latest' || blockTag === 'pending') {\n          return blockTag;\n        }\n\n        if (typeof blockTag === 'number') {\n          return bytes_1.hexStripZeros(bytes_1.hexlify(blockTag));\n        }\n\n        if (bytes_1.isHexString(blockTag)) {\n          return bytes_1.hexStripZeros(blockTag);\n        }\n\n        throw new Error('invalid blockTag');\n      }\n\n      var formatTransaction = {\n        hash: checkHash,\n        blockHash: allowNull(checkHash, null),\n        blockNumber: allowNull(checkNumber, null),\n        transactionIndex: allowNull(checkNumber, null),\n        confirmations: allowNull(checkNumber, null),\n        from: address_1.getAddress,\n        gasPrice: bignumber_1.bigNumberify,\n        gasLimit: bignumber_1.bigNumberify,\n        to: allowNull(address_1.getAddress, null),\n        value: bignumber_1.bigNumberify,\n        nonce: checkNumber,\n        data: bytes_1.hexlify,\n        r: allowNull(checkUint256),\n        s: allowNull(checkUint256),\n        v: allowNull(checkNumber),\n        creates: allowNull(address_1.getAddress, null),\n        raw: allowNull(bytes_1.hexlify)\n      };\n\n      function checkTransactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n          transaction.gasLimit = transaction.gas;\n        } // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n\n\n        if (transaction.to && bignumber_1.bigNumberify(transaction.to).isZero()) {\n          transaction.to = '0x0000000000000000000000000000000000000000';\n        } // Rename input to data\n\n\n        if (transaction.input != null && transaction.data == null) {\n          transaction.data = transaction.input;\n        } // If to and creates are empty, populate the creates from the transaction\n\n\n        if (transaction.to == null && transaction.creates == null) {\n          transaction.creates = address_1.getContractAddress(transaction);\n        } // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n\n\n        if (!transaction.raw) {\n          // Very loose providers (e.g. TestRPC) don't provide a signature or raw\n          if (transaction.v && transaction.r && transaction.s) {\n            var raw = [bytes_1.stripZeros(bytes_1.hexlify(transaction.nonce)), bytes_1.stripZeros(bytes_1.hexlify(transaction.gasPrice)), bytes_1.stripZeros(bytes_1.hexlify(transaction.gasLimit)), transaction.to || \"0x\", bytes_1.stripZeros(bytes_1.hexlify(transaction.value || '0x')), bytes_1.hexlify(transaction.data || '0x'), bytes_1.stripZeros(bytes_1.hexlify(transaction.v || '0x')), bytes_1.stripZeros(bytes_1.hexlify(transaction.r)), bytes_1.stripZeros(bytes_1.hexlify(transaction.s))];\n            transaction.raw = rlp_1.encode(raw);\n          }\n        }\n\n        var result = check(formatTransaction, transaction);\n        var networkId = transaction.networkId;\n\n        if (bytes_1.isHexString(networkId)) {\n          networkId = bignumber_1.bigNumberify(networkId).toNumber();\n        }\n\n        if (typeof networkId !== 'number' && result.v != null) {\n          networkId = (result.v - 35) / 2;\n\n          if (networkId < 0) {\n            networkId = 0;\n          }\n\n          networkId = parseInt(networkId);\n        }\n\n        if (typeof networkId !== 'number') {\n          networkId = 0;\n        }\n\n        result.networkId = networkId; // 0x0000... should actually be null\n\n        if (result.blockHash && result.blockHash.replace(/0/g, '') === 'x') {\n          result.blockHash = null;\n        }\n\n        return result;\n      }\n\n      var formatBlock = {\n        hash: checkHash,\n        parentHash: checkHash,\n        number: checkNumber,\n        timestamp: checkNumber,\n        nonce: allowNull(bytes_1.hexlify),\n        difficulty: checkDifficulty,\n        gasLimit: bignumber_1.bigNumberify,\n        gasUsed: bignumber_1.bigNumberify,\n        miner: address_1.getAddress,\n        extraData: bytes_1.hexlify,\n        transactions: allowNull(arrayOf(checkHash))\n      };\n      var formatBlockWithTransactions = properties_1.shallowCopy(formatBlock);\n      formatBlockWithTransactions.transactions = allowNull(arrayOf(checkTransactionResponse));\n\n      function checkBlock(block, includeTransactions) {\n        if (block.author != null && block.miner == null) {\n          block.miner = block.author;\n        }\n\n        return check(includeTransactions ? formatBlockWithTransactions : formatBlock, block);\n      }\n\n      var formatTransactionRequest = {\n        from: allowNull(address_1.getAddress),\n        nonce: allowNull(checkNumber),\n        gasLimit: allowNull(bignumber_1.bigNumberify),\n        gasPrice: allowNull(bignumber_1.bigNumberify),\n        to: allowNull(address_1.getAddress),\n        value: allowNull(bignumber_1.bigNumberify),\n        data: allowNull(bytes_1.hexlify)\n      };\n\n      function checkTransactionRequest(transaction) {\n        return check(formatTransactionRequest, transaction);\n      }\n\n      var formatTransactionReceiptLog = {\n        transactionLogIndex: allowNull(checkNumber),\n        transactionIndex: checkNumber,\n        blockNumber: checkNumber,\n        transactionHash: checkHash,\n        address: address_1.getAddress,\n        topics: arrayOf(checkHash),\n        data: bytes_1.hexlify,\n        logIndex: checkNumber,\n        blockHash: checkHash\n      };\n\n      function checkTransactionReceiptLog(log) {\n        return check(formatTransactionReceiptLog, log);\n      }\n\n      var formatTransactionReceipt = {\n        contractAddress: allowNull(address_1.getAddress, null),\n        transactionIndex: checkNumber,\n        root: allowNull(checkHash),\n        gasUsed: bignumber_1.bigNumberify,\n        logsBloom: allowNull(bytes_1.hexlify),\n        blockHash: checkHash,\n        transactionHash: checkHash,\n        logs: arrayOf(checkTransactionReceiptLog),\n        blockNumber: checkNumber,\n        confirmations: allowNull(checkNumber, null),\n        cumulativeGasUsed: bignumber_1.bigNumberify,\n        status: allowNull(checkNumber)\n      };\n\n      function checkTransactionReceipt(transactionReceipt) {\n        //var status = transactionReceipt.status;\n        //var root = transactionReceipt.root;\n        var result = check(formatTransactionReceipt, transactionReceipt);\n        result.logs.forEach(function (entry, index) {\n          if (entry.transactionLogIndex == null) {\n            entry.transactionLogIndex = index;\n          }\n        });\n\n        if (transactionReceipt.status != null) {\n          result.byzantium = true;\n        }\n\n        return result;\n      }\n\n      function checkTopics(topics) {\n        if (Array.isArray(topics)) {\n          topics.forEach(function (topic) {\n            checkTopics(topic);\n          });\n        } else if (topics != null) {\n          checkHash(topics);\n        }\n\n        return topics;\n      }\n\n      var formatFilter = {\n        fromBlock: allowNull(checkBlockTag, undefined),\n        toBlock: allowNull(checkBlockTag, undefined),\n        address: allowNull(address_1.getAddress, undefined),\n        topics: allowNull(checkTopics, undefined)\n      };\n\n      function checkFilter(filter) {\n        return check(formatFilter, filter);\n      }\n\n      var formatLog = {\n        blockNumber: allowNull(checkNumber),\n        blockHash: allowNull(checkHash),\n        transactionIndex: checkNumber,\n        removed: allowNull(checkBoolean),\n        address: address_1.getAddress,\n        data: allowFalsish(bytes_1.hexlify, '0x'),\n        topics: arrayOf(checkHash),\n        transactionHash: checkHash,\n        logIndex: checkNumber\n      };\n\n      function checkLog(log) {\n        return check(formatLog, log);\n      } //////////////////////////////\n      // Event Serializeing\n\n\n      function serializeTopics(topics) {\n        return topics.map(function (topic) {\n          if (typeof topic === 'string') {\n            return topic;\n          } else if (Array.isArray(topic)) {\n            topic.forEach(function (topic) {\n              if (topic !== null && bytes_1.hexDataLength(topic) !== 32) {\n                errors.throwError('invalid topic', errors.INVALID_ARGUMENT, {\n                  argument: 'topic',\n                  value: topic\n                });\n              }\n            });\n            return topic.join(',');\n          } else if (topic === null) {\n            return '';\n          }\n\n          return errors.throwError('invalid topic value', errors.INVALID_ARGUMENT, {\n            argument: 'topic',\n            value: topic\n          });\n        }).join('&');\n      }\n\n      function deserializeTopics(data) {\n        return data.split(/&/g).map(function (topic) {\n          var comps = topic.split(',');\n\n          if (comps.length === 1) {\n            if (comps[0] === '') {\n              return null;\n            }\n\n            return topic;\n          }\n\n          return comps.map(function (topic) {\n            if (topic === '') {\n              return null;\n            }\n\n            return topic;\n          });\n        });\n      }\n\n      function getEventTag(eventName) {\n        if (typeof eventName === 'string') {\n          if (bytes_1.hexDataLength(eventName) === 20) {\n            return 'address:' + address_1.getAddress(eventName);\n          }\n\n          eventName = eventName.toLowerCase();\n\n          if (eventName === 'block' || eventName === 'pending' || eventName === 'error') {\n            return eventName;\n          } else if (bytes_1.hexDataLength(eventName) === 32) {\n            return 'tx:' + eventName;\n          }\n        } else if (Array.isArray(eventName)) {\n          return 'filter::' + serializeTopics(eventName);\n        } else if (eventName && typeof eventName === 'object') {\n          return 'filter:' + (eventName.address || '') + ':' + serializeTopics(eventName.topics || []);\n        }\n\n        throw new Error('invalid event - ' + eventName);\n      } //////////////////////////////\n      // Helper Object\n\n\n      function getTime() {\n        return new Date().getTime();\n      }\n\n      var BaseProvider =\n      /** @class */\n      function (_super) {\n        __extends(BaseProvider, _super);\n\n        function BaseProvider(network) {\n          var _this = _super.call(this) || this;\n\n          errors.checkNew(_this, abstract_provider_1.Provider);\n\n          if (network instanceof Promise) {\n            properties_1.defineReadOnly(_this, 'ready', network.then(function (network) {\n              properties_1.defineReadOnly(_this, '_network', network);\n              return network;\n            }));\n          } else {\n            var knownNetwork = networks_1.getNetwork(network == null ? 'homestead' : network);\n\n            if (knownNetwork) {\n              properties_1.defineReadOnly(_this, '_network', knownNetwork);\n              properties_1.defineReadOnly(_this, 'ready', Promise.resolve(_this._network));\n            } else {\n              errors.throwError('invalid network', errors.INVALID_ARGUMENT, {\n                arg: 'network',\n                value: network\n              });\n            }\n          }\n\n          _this._lastBlockNumber = -2; // Balances being watched for changes\n\n          _this._balances = {}; // Events being listened to\n\n          _this._events = [];\n          _this._pollingInterval = 4000; // We use this to track recent emitted events; for example, if we emit a \"block\" of 100\n          // and we get a `getBlock(100)` request which would result in null, we should retry\n          // until we get a response. This provides devs with a consistent view. Similarly for\n          // transaction hashes.\n\n          _this._emitted = {\n            block: _this._lastBlockNumber\n          };\n          _this._fastQueryDate = 0;\n          return _this;\n        }\n\n        BaseProvider.prototype._doPoll = function () {\n          var _this = this;\n\n          this.getBlockNumber().then(function (blockNumber) {\n            _this._setFastBlockNumber(blockNumber); // If the block hasn't changed, meh.\n\n\n            if (blockNumber === _this._lastBlockNumber) {\n              return;\n            }\n\n            if (_this._lastBlockNumber === -2) {\n              _this._lastBlockNumber = blockNumber - 1;\n            } // Notify all listener for each block that has passed\n\n\n            for (var i = _this._lastBlockNumber + 1; i <= blockNumber; i++) {\n              if (_this._emitted.block < i) {\n                _this._emitted.block = i; // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n\n                Object.keys(_this._emitted).forEach(function (key) {\n                  if (key === 'block') {\n                    return;\n                  }\n\n                  if (_this._emitted[key] > i + 12) {\n                    delete _this._emitted[key];\n                  }\n                });\n              }\n\n              _this.emit('block', i);\n            } // Sweep balances and remove addresses we no longer have events for\n\n\n            var newBalances = {}; // Find all transaction hashes we are waiting on\n\n            _this._events.forEach(function (event) {\n              var comps = event.tag.split(':');\n\n              switch (comps[0]) {\n                case 'tx':\n                  {\n                    var hash_2 = comps[1];\n\n                    _this.getTransactionReceipt(hash_2).then(function (receipt) {\n                      if (!receipt || receipt.blockNumber == null) {\n                        return null;\n                      }\n\n                      _this._emitted['t:' + hash_2] = receipt.blockNumber;\n\n                      _this.emit(hash_2, receipt);\n\n                      return null;\n                    }).catch(function (error) {\n                      _this.emit('error', error);\n                    });\n\n                    break;\n                  }\n\n                case 'address':\n                  {\n                    var address_2 = comps[1];\n\n                    if (_this._balances[address_2]) {\n                      newBalances[address_2] = _this._balances[address_2];\n                    }\n\n                    _this.getBalance(address_2, 'latest').then(function (balance) {\n                      var lastBalance = this._balances[address_2];\n\n                      if (lastBalance && balance.eq(lastBalance)) {\n                        return;\n                      }\n\n                      this._balances[address_2] = balance;\n                      this.emit(address_2, balance);\n                      return null;\n                    }).catch(function (error) {\n                      _this.emit('error', error);\n                    });\n\n                    break;\n                  }\n\n                case 'filter':\n                  {\n                    var address = comps[1];\n                    var topics = deserializeTopics(comps[2]);\n                    var filter_1 = {\n                      address: address,\n                      fromBlock: _this._lastBlockNumber + 1,\n                      toBlock: blockNumber,\n                      topics: topics\n                    };\n\n                    _this.getLogs(filter_1).then(function (logs) {\n                      if (logs.length === 0) {\n                        return;\n                      }\n\n                      logs.forEach(function (log) {\n                        _this._emitted['b:' + log.blockHash] = log.blockNumber;\n                        _this._emitted['t:' + log.transactionHash] = log.blockNumber;\n\n                        _this.emit(filter_1, log);\n                      });\n                      return null;\n                    }).catch(function (error) {\n                      _this.emit('error', error);\n                    });\n\n                    break;\n                  }\n              }\n            });\n\n            _this._lastBlockNumber = blockNumber;\n            _this._balances = newBalances;\n            return null;\n          }).catch(function (error) {});\n          this.doPoll();\n        };\n\n        BaseProvider.prototype.resetEventsBlock = function (blockNumber) {\n          this._lastBlockNumber = blockNumber;\n\n          this._doPoll();\n        };\n\n        Object.defineProperty(BaseProvider.prototype, \"network\", {\n          get: function get() {\n            return this._network;\n          },\n          enumerable: true,\n          configurable: true\n        });\n\n        BaseProvider.prototype.getNetwork = function () {\n          return this.ready;\n        };\n\n        Object.defineProperty(BaseProvider.prototype, \"blockNumber\", {\n          get: function get() {\n            if (this._lastBlockNumber < 0) {\n              return null;\n            }\n\n            return this._lastBlockNumber;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(BaseProvider.prototype, \"polling\", {\n          get: function get() {\n            return this._poller != null;\n          },\n          set: function set(value) {\n            var _this = this;\n\n            setTimeout(function () {\n              if (value && !_this._poller) {\n                _this._poller = setInterval(_this._doPoll.bind(_this), _this.pollingInterval);\n              } else if (!value && _this._poller) {\n                clearInterval(_this._poller);\n                _this._poller = null;\n              }\n            }, 0);\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(BaseProvider.prototype, \"pollingInterval\", {\n          get: function get() {\n            return this._pollingInterval;\n          },\n          set: function set(value) {\n            var _this = this;\n\n            if (typeof value !== 'number' || value <= 0 || parseInt(String(value)) != value) {\n              throw new Error('invalid polling interval');\n            }\n\n            this._pollingInterval = value;\n\n            if (this._poller) {\n              clearInterval(this._poller);\n              this._poller = setInterval(function () {\n                _this._doPoll();\n              }, this._pollingInterval);\n            }\n          },\n          enumerable: true,\n          configurable: true\n        });\n\n        BaseProvider.prototype._getFastBlockNumber = function () {\n          var _this = this;\n\n          var now = getTime(); // Stale block number, request a newer value\n\n          if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n              if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {\n                _this._fastBlockNumber = blockNumber;\n              }\n\n              return _this._fastBlockNumber;\n            });\n          }\n\n          return this._fastBlockNumberPromise;\n        };\n\n        BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {\n          // Older block, maybe a stale request\n          if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n          } // Update the time we updated the blocknumber\n\n\n          this._fastQueryDate = getTime(); // Newer block number, use  it\n\n          if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n          }\n        }; // @TODO: Add .poller which must be an event emitter with a 'start', 'stop' and 'block' event;\n        //        this will be used once we move to the WebSocket or other alternatives to polling\n\n\n        BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations) {\n          var _this = this;\n\n          if (!confirmations) {\n            confirmations = 1;\n          }\n\n          return web_1.poll(function () {\n            return _this.getTransactionReceipt(transactionHash).then(function (receipt) {\n              if (receipt == null || receipt.confirmations < confirmations) {\n                return undefined;\n              }\n\n              return receipt;\n            });\n          }, {\n            onceBlock: this\n          });\n        };\n\n        BaseProvider.prototype.getBlockNumber = function () {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return _this.perform('getBlockNumber', {}).then(function (result) {\n              var value = parseInt(result);\n\n              if (value != result) {\n                throw new Error('invalid response - getBlockNumber');\n              }\n\n              _this._setFastBlockNumber(value);\n\n              return value;\n            });\n          });\n        };\n\n        BaseProvider.prototype.getGasPrice = function () {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return _this.perform('getGasPrice', {}).then(function (result) {\n              return bignumber_1.bigNumberify(result);\n            });\n          });\n        };\n\n        BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              addressOrName: addressOrName,\n              blockTag: blockTag\n            }).then(function (_a) {\n              var addressOrName = _a.addressOrName,\n                  blockTag = _a.blockTag;\n              return _this.resolveName(addressOrName).then(function (address) {\n                var params = {\n                  address: address,\n                  blockTag: checkBlockTag(blockTag)\n                };\n                return _this.perform('getBalance', params).then(function (result) {\n                  return bignumber_1.bigNumberify(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              addressOrName: addressOrName,\n              blockTag: blockTag\n            }).then(function (_a) {\n              var addressOrName = _a.addressOrName,\n                  blockTag = _a.blockTag;\n              return _this.resolveName(addressOrName).then(function (address) {\n                var params = {\n                  address: address,\n                  blockTag: checkBlockTag(blockTag)\n                };\n                return _this.perform('getTransactionCount', params).then(function (result) {\n                  return bignumber_1.bigNumberify(result).toNumber();\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getCode = function (addressOrName, blockTag) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              addressOrName: addressOrName,\n              blockTag: blockTag\n            }).then(function (_a) {\n              var addressOrName = _a.addressOrName,\n                  blockTag = _a.blockTag;\n              return _this.resolveName(addressOrName).then(function (address) {\n                var params = {\n                  address: address,\n                  blockTag: checkBlockTag(blockTag)\n                };\n                return _this.perform('getCode', params).then(function (result) {\n                  return bytes_1.hexlify(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              addressOrName: addressOrName,\n              position: position,\n              blockTag: blockTag\n            }).then(function (_a) {\n              var addressOrName = _a.addressOrName,\n                  position = _a.position,\n                  blockTag = _a.blockTag;\n              return _this.resolveName(addressOrName).then(function (address) {\n                var params = {\n                  address: address,\n                  blockTag: checkBlockTag(blockTag),\n                  position: bytes_1.hexStripZeros(bytes_1.hexlify(position))\n                };\n                return _this.perform('getStorageAt', params).then(function (result) {\n                  return bytes_1.hexlify(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.sendTransaction = function (signedTransaction) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              signedTransaction: signedTransaction\n            }).then(function (_a) {\n              var signedTransaction = _a.signedTransaction;\n              var params = {\n                signedTransaction: bytes_1.hexlify(signedTransaction)\n              };\n              return _this.perform('sendTransaction', params).then(function (hash) {\n                return _this._wrapTransaction(transaction_1.parse(signedTransaction), hash);\n              }, function (error) {\n                error.transaction = transaction_1.parse(signedTransaction);\n\n                if (error.transaction.hash) {\n                  error.transactionHash = error.transaction.hash;\n                }\n\n                throw error;\n              });\n            });\n          });\n        }; // This should be called by any subclass wrapping a TransactionResponse\n\n\n        BaseProvider.prototype._wrapTransaction = function (tx, hash) {\n          var _this = this;\n\n          if (hash != null && bytes_1.hexDataLength(hash) !== 32) {\n            throw new Error('invalid response - sendTransaction');\n          }\n\n          var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n          if (hash != null && tx.hash !== hash) {\n            errors.throwError('Transaction hash mismatch from Provider.sendTransaction.', errors.UNKNOWN_ERROR, {\n              expectedHash: tx.hash,\n              returnedHash: hash\n            });\n          }\n\n          this._emitted['t:' + tx.hash] = 'pending'; // @TODO: (confirmations? number, timeout? number)\n\n          result.wait = function (confirmations) {\n            return _this.waitForTransaction(tx.hash, confirmations).then(function (receipt) {\n              if (receipt.status === 0) {\n                errors.throwError('transaction failed', errors.CALL_EXCEPTION, {\n                  transactionHash: tx.hash,\n                  transaction: tx\n                });\n              }\n\n              return receipt;\n            });\n          };\n\n          return result;\n        };\n\n        BaseProvider.prototype.call = function (transaction, blockTag) {\n          var _this = this;\n\n          var tx = properties_1.shallowCopy(transaction);\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              blockTag: blockTag,\n              tx: tx\n            }).then(function (_a) {\n              var blockTag = _a.blockTag,\n                  tx = _a.tx;\n              return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {\n                var params = {\n                  blockTag: checkBlockTag(blockTag),\n                  transaction: checkTransactionRequest(tx)\n                };\n                return _this.perform('call', params).then(function (result) {\n                  return bytes_1.hexlify(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.estimateGas = function (transaction) {\n          var _this = this;\n\n          var tx = {\n            to: transaction.to,\n            from: transaction.from,\n            data: transaction.data,\n            gasPrice: transaction.gasPrice,\n            value: transaction.value\n          };\n          return this.ready.then(function () {\n            return properties_1.resolveProperties(tx).then(function (tx) {\n              return _this._resolveNames(tx, ['to', 'from']).then(function (tx) {\n                var params = {\n                  transaction: checkTransactionRequest(tx)\n                };\n                return _this.perform('estimateGas', params).then(function (result) {\n                  return bignumber_1.bigNumberify(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getBlock = function (blockHashOrBlockTag, includeTransactions) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              blockHashOrBlockTag: blockHashOrBlockTag\n            }).then(function (_a) {\n              var blockHashOrBlockTag = _a.blockHashOrBlockTag;\n\n              try {\n                var blockHash = bytes_1.hexlify(blockHashOrBlockTag);\n\n                if (bytes_1.hexDataLength(blockHash) === 32) {\n                  return web_1.poll(function () {\n                    return _this.perform('getBlock', {\n                      blockHash: blockHash,\n                      includeTransactions: !!includeTransactions\n                    }).then(function (block) {\n                      if (block == null) {\n                        if (_this._emitted['b:' + blockHash] == null) {\n                          return null;\n                        }\n\n                        return undefined;\n                      }\n\n                      return checkBlock(block, includeTransactions);\n                    });\n                  }, {\n                    onceBlock: _this\n                  });\n                }\n              } catch (error) {}\n\n              try {\n                var blockNumber_1 = -128;\n                var blockTag_1 = checkBlockTag(blockHashOrBlockTag);\n\n                if (bytes_1.isHexString(blockTag_1)) {\n                  blockNumber_1 = parseInt(blockTag_1.substring(2), 16);\n                }\n\n                return web_1.poll(function () {\n                  return _this.perform('getBlock', {\n                    blockTag: blockTag_1,\n                    includeTransactions: !!includeTransactions\n                  }).then(function (block) {\n                    if (block == null) {\n                      if (blockNumber_1 > _this._emitted.block) {\n                        return undefined;\n                      }\n\n                      return null;\n                    }\n\n                    return checkBlock(block, includeTransactions);\n                  });\n                }, {\n                  onceBlock: _this\n                });\n              } catch (error) {}\n\n              throw new Error('invalid block hash or block tag');\n            });\n          });\n        };\n\n        BaseProvider.prototype.getTransaction = function (transactionHash) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              transactionHash: transactionHash\n            }).then(function (_a) {\n              var transactionHash = _a.transactionHash;\n              var params = {\n                transactionHash: checkHash(transactionHash)\n              };\n              return web_1.poll(function () {\n                return _this.perform('getTransaction', params).then(function (result) {\n                  if (result == null) {\n                    if (_this._emitted['t:' + transactionHash] == null) {\n                      return null;\n                    }\n\n                    return undefined;\n                  }\n\n                  var tx = BaseProvider.checkTransactionResponse(result);\n\n                  if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                  } else if (tx.confirmations == null) {\n                    return _this._getFastBlockNumber().then(function (blockNumber) {\n                      // Add the confirmations using the fast block number (pessimistic)\n                      var confirmations = blockNumber - tx.blockNumber + 1;\n\n                      if (confirmations <= 0) {\n                        confirmations = 1;\n                      }\n\n                      tx.confirmations = confirmations;\n                      return _this._wrapTransaction(tx);\n                    });\n                  }\n\n                  return _this._wrapTransaction(tx);\n                });\n              }, {\n                onceBlock: _this\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties({\n              transactionHash: transactionHash\n            }).then(function (_a) {\n              var transactionHash = _a.transactionHash;\n              var params = {\n                transactionHash: checkHash(transactionHash)\n              };\n              return web_1.poll(function () {\n                return _this.perform('getTransactionReceipt', params).then(function (result) {\n                  if (result == null) {\n                    if (_this._emitted['t:' + transactionHash] == null) {\n                      return null;\n                    }\n\n                    return undefined;\n                  } // \"geth-etc\" returns receipts before they are ready\n\n\n                  if (result.blockHash == null) {\n                    return undefined;\n                  }\n\n                  var receipt = checkTransactionReceipt(result);\n\n                  if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                  } else if (receipt.confirmations == null) {\n                    return _this._getFastBlockNumber().then(function (blockNumber) {\n                      // Add the confirmations using the fast block number (pessimistic)\n                      var confirmations = blockNumber - receipt.blockNumber + 1;\n\n                      if (confirmations <= 0) {\n                        confirmations = 1;\n                      }\n\n                      receipt.confirmations = confirmations;\n                      return receipt;\n                    });\n                  }\n\n                  return receipt;\n                });\n              }, {\n                onceBlock: _this\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getLogs = function (filter) {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return properties_1.resolveProperties(filter).then(function (filter) {\n              return _this._resolveNames(filter, ['address']).then(function (filter) {\n                var params = {\n                  filter: checkFilter(filter)\n                };\n                return _this.perform('getLogs', params).then(function (result) {\n                  return arrayOf(checkLog)(result);\n                });\n              });\n            });\n          });\n        };\n\n        BaseProvider.prototype.getEtherPrice = function () {\n          var _this = this;\n\n          return this.ready.then(function () {\n            return _this.perform('getEtherPrice', {}).then(function (result) {\n              // @TODO: Check valid float\n              return result;\n            });\n          });\n        }; // @TODO: Could probably use resolveProperties instead?\n\n\n        BaseProvider.prototype._resolveNames = function (object, keys) {\n          var promises = [];\n          var result = properties_1.shallowCopy(object);\n          keys.forEach(function (key) {\n            if (result[key] == null) {\n              return;\n            }\n\n            promises.push(this.resolveName(result[key]).then(function (address) {\n              result[key] = address;\n              return;\n            }));\n          }, this);\n          return Promise.all(promises).then(function () {\n            return result;\n          });\n        };\n\n        BaseProvider.prototype._getResolver = function (name) {\n          var _this = this; // Get the resolver from the blockchain\n\n\n          return this.getNetwork().then(function (network) {\n            // No ENS...\n            if (!network.ensAddress) {\n              errors.throwError('network does support ENS', errors.UNSUPPORTED_OPERATION, {\n                operation: 'ENS',\n                network: network.name\n              });\n            } // keccak256('resolver(bytes32)')\n\n\n            var data = '0x0178b8bf' + hash_1.namehash(name).substring(2);\n            var transaction = {\n              to: network.ensAddress,\n              data: data\n            };\n            return _this.call(transaction).then(function (data) {\n              // extract the address from the data\n              if (bytes_1.hexDataLength(data) !== 32) {\n                return null;\n              }\n\n              return address_1.getAddress(bytes_1.hexDataSlice(data, 12));\n            });\n          });\n        };\n\n        BaseProvider.prototype.resolveName = function (name) {\n          var _this = this; // If it is a promise, resolve it then recurse\n\n\n          if (name instanceof Promise) {\n            return name.then(function (addressOrName) {\n              return _this.resolveName(addressOrName);\n            });\n          } // If it is already an address, nothing to resolve\n\n\n          try {\n            return Promise.resolve(address_1.getAddress(name));\n          } catch (error) {}\n\n          var self = this;\n          var nodeHash = hash_1.namehash(name); // Get the addr from the resovler\n\n          return this._getResolver(name).then(function (resolverAddress) {\n            // keccak256('addr(bytes32)')\n            var data = '0x3b3b57de' + nodeHash.substring(2);\n            var transaction = {\n              to: resolverAddress,\n              data: data\n            };\n            return self.call(transaction); // extract the address from the data\n          }).then(function (data) {\n            if (bytes_1.hexDataLength(data) !== 32) {\n              return null;\n            }\n\n            var address = address_1.getAddress(bytes_1.hexDataSlice(data, 12));\n\n            if (address === '0x0000000000000000000000000000000000000000') {\n              return null;\n            }\n\n            return address;\n          });\n        };\n\n        BaseProvider.prototype.lookupAddress = function (address) {\n          var _this = this;\n\n          if (address instanceof Promise) {\n            return address.then(function (address) {\n              return _this.lookupAddress(address);\n            });\n          }\n\n          address = address_1.getAddress(address);\n          var name = address.substring(2) + '.addr.reverse';\n          var nodehash = hash_1.namehash(name);\n          var self = this;\n          return this._getResolver(name).then(function (resolverAddress) {\n            if (!resolverAddress) {\n              return null;\n            } // keccak('name(bytes32)')\n\n\n            var data = '0x691f3431' + nodehash.substring(2);\n            var transaction = {\n              to: resolverAddress,\n              data: data\n            };\n            return self.call(transaction);\n          }).then(function (data) {\n            // Strip off the \"0x\"\n            data = data.substring(2); // Strip off the dynamic string pointer (0x20)\n\n            if (data.length < 64) {\n              return null;\n            }\n\n            data = data.substring(64);\n\n            if (data.length < 64) {\n              return null;\n            }\n\n            var length = bignumber_1.bigNumberify('0x' + data.substring(0, 64)).toNumber();\n            data = data.substring(64);\n\n            if (2 * length > data.length) {\n              return null;\n            }\n\n            var name = utf8_1.toUtf8String('0x' + data.substring(0, 2 * length)); // Make sure the reverse record matches the foward record\n\n            return self.resolveName(name).then(function (addr) {\n              if (addr != address) {\n                return null;\n              }\n\n              return name;\n            });\n          });\n        };\n\n        BaseProvider.checkTransactionResponse = function (transaction) {\n          return checkTransactionResponse(transaction);\n        };\n\n        BaseProvider.prototype.doPoll = function () {};\n\n        BaseProvider.prototype.perform = function (method, params) {\n          errors.throwError(method + ' not implemented', errors.NOT_IMPLEMENTED, {\n            operation: method\n          });\n          return null;\n        };\n\n        BaseProvider.prototype._startPending = function () {\n          console.log('WARNING: this provider does not support pending events');\n        };\n\n        BaseProvider.prototype._stopPending = function () {};\n\n        BaseProvider.prototype._addEventListener = function (eventName, listener, once) {\n          this._events.push({\n            tag: getEventTag(eventName),\n            listener: listener,\n            once: once\n          });\n\n          if (eventName === 'pending') {\n            this._startPending();\n          }\n\n          this.polling = true;\n        };\n\n        BaseProvider.prototype.on = function (eventName, listener) {\n          this._addEventListener(eventName, listener, false);\n\n          return this;\n        };\n\n        BaseProvider.prototype.once = function (eventName, listener) {\n          this._addEventListener(eventName, listener, true);\n\n          return this;\n        };\n\n        BaseProvider.prototype.addEventListener = function (eventName, listener) {\n          return this.on(eventName, listener);\n        };\n\n        BaseProvider.prototype.emit = function (eventName) {\n          var _this = this;\n\n          var args = [];\n\n          for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n          }\n\n          var result = false;\n          var eventTag = getEventTag(eventName);\n          this._events = this._events.filter(function (event) {\n            if (event.tag !== eventTag) {\n              return true;\n            }\n\n            setTimeout(function () {\n              event.listener.apply(_this, args);\n            }, 0);\n            result = true;\n            return !event.once;\n          });\n\n          if (this.listenerCount() === 0) {\n            this.polling = false;\n          }\n\n          return result;\n        };\n\n        BaseProvider.prototype.listenerCount = function (eventName) {\n          if (!eventName) {\n            return this._events.length;\n          }\n\n          var eventTag = getEventTag(eventName);\n          return this._events.filter(function (event) {\n            return event.tag === eventTag;\n          }).length;\n        };\n\n        BaseProvider.prototype.listeners = function (eventName) {\n          var eventTag = getEventTag(eventName);\n          return this._events.filter(function (event) {\n            return event.tag === eventTag;\n          }).map(function (event) {\n            return event.listener;\n          });\n        };\n\n        BaseProvider.prototype.removeAllListeners = function (eventName) {\n          var eventTag = getEventTag(eventName);\n          this._events = this._events.filter(function (event) {\n            return event.tag !== eventTag;\n          });\n\n          if (eventName === 'pending') {\n            this._stopPending();\n          }\n\n          if (this._events.length === 0) {\n            this.polling = false;\n          }\n\n          return this;\n        };\n\n        BaseProvider.prototype.removeListener = function (eventName, listener) {\n          var found = false;\n          var eventTag = getEventTag(eventName);\n          this._events = this._events.filter(function (event) {\n            if (event.tag !== eventTag) {\n              return true;\n            }\n\n            if (found) {\n              return true;\n            }\n\n            found = false;\n            return false;\n          });\n\n          if (eventName === 'pending' && this.listenerCount('pending') === 0) {\n            this._stopPending();\n          }\n\n          if (this.listenerCount() === 0) {\n            this.polling = false;\n          }\n\n          return this;\n        };\n\n        return BaseProvider;\n      }(abstract_provider_1.Provider);\n\n      exports.BaseProvider = BaseProvider;\n      properties_1.defineReadOnly(abstract_provider_1.Provider, 'inherits', properties_1.inheritable(abstract_provider_1.Provider));\n    }, {\n      \"../errors\": 5,\n      \"../utils/address\": 59,\n      \"../utils/bignumber\": 61,\n      \"../utils/bytes\": 62,\n      \"../utils/hash\": 63,\n      \"../utils/networks\": 70,\n      \"../utils/properties\": 72,\n      \"../utils/rlp\": 74,\n      \"../utils/transaction\": 81,\n      \"../utils/utf8\": 83,\n      \"../utils/web\": 84,\n      \"./abstract-provider\": 49\n    }],\n    51: [function (require, module, exports) {\n      \"use strict\";\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var base_provider_1 = require(\"./base-provider\");\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      var properties_1 = require(\"../utils/properties\");\n\n      var web_1 = require(\"../utils/web\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n      // The transaction has already been sanitized by the calls in Provider\n\n\n      function getTransactionString(transaction) {\n        var result = [];\n\n        for (var key in transaction) {\n          if (transaction[key] == null) {\n            continue;\n          }\n\n          var value = bytes_1.hexlify(transaction[key]);\n\n          if ({\n            gasLimit: true,\n            gasPrice: true,\n            nonce: true,\n            value: true\n          }[key]) {\n            value = bytes_1.hexStripZeros(value);\n          }\n\n          result.push(key + '=' + value);\n        }\n\n        return result.join('&');\n      }\n\n      function getResult(result) {\n        // getLogs, getHistory have weird success responses\n        if (result.status == 0 && (result.message === 'No records found' || result.message === 'No transactions found')) {\n          return result.result;\n        }\n\n        if (result.status != 1 || result.message != 'OK') {\n          // @TODO: not any\n          var error = new Error('invalid response');\n          error.result = JSON.stringify(result);\n          throw error;\n        }\n\n        return result.result;\n      }\n\n      function getJsonResult(result) {\n        if (result.jsonrpc != '2.0') {\n          // @TODO: not any\n          var error = new Error('invalid response');\n          error.result = JSON.stringify(result);\n          throw error;\n        }\n\n        if (result.error) {\n          // @TODO: not any\n          var error = new Error(result.error.message || 'unknown error');\n\n          if (result.error.code) {\n            error.code = result.error.code;\n          }\n\n          if (result.error.data) {\n            error.data = result.error.data;\n          }\n\n          throw error;\n        }\n\n        return result.result;\n      } // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\n      function checkLogTag(blockTag) {\n        if (blockTag === 'pending') {\n          throw new Error('pending not supported');\n        }\n\n        if (blockTag === 'latest') {\n          return blockTag;\n        }\n\n        return parseInt(blockTag.substring(2), 16);\n      }\n\n      var EtherscanProvider =\n      /** @class */\n      function (_super) {\n        __extends(EtherscanProvider, _super);\n\n        function EtherscanProvider(network, apiKey) {\n          var _this = _super.call(this, network) || this;\n\n          errors.checkNew(_this, EtherscanProvider);\n          var name = 'invalid';\n\n          if (_this.network) {\n            name = _this.network.name;\n          }\n\n          var baseUrl = null;\n\n          switch (name) {\n            case 'homestead':\n              baseUrl = 'https://api.etherscan.io';\n              break;\n\n            case 'ropsten':\n              baseUrl = 'https://api-ropsten.etherscan.io';\n              break;\n\n            case 'rinkeby':\n              baseUrl = 'https://api-rinkeby.etherscan.io';\n              break;\n\n            case 'kovan':\n              baseUrl = 'https://api-kovan.etherscan.io';\n              break;\n\n            default:\n              throw new Error('unsupported network');\n          }\n\n          properties_1.defineReadOnly(_this, 'baseUrl', baseUrl);\n          properties_1.defineReadOnly(_this, 'apiKey', apiKey);\n          return _this;\n        }\n\n        EtherscanProvider.prototype.perform = function (method, params) {\n          var url = this.baseUrl;\n          var apiKey = '';\n\n          if (this.apiKey) {\n            apiKey += '&apikey=' + this.apiKey;\n          }\n\n          switch (method) {\n            case 'getBlockNumber':\n              url += '/api?module=proxy&action=eth_blockNumber' + apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'getGasPrice':\n              url += '/api?module=proxy&action=eth_gasPrice' + apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'getBalance':\n              // Returns base-10 result\n              url += '/api?module=account&action=balance&address=' + params.address;\n              url += '&tag=' + params.blockTag + apiKey;\n              return web_1.fetchJson(url, null, getResult);\n\n            case 'getTransactionCount':\n              url += '/api?module=proxy&action=eth_getTransactionCount&address=' + params.address;\n              url += '&tag=' + params.blockTag + apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'getCode':\n              url += '/api?module=proxy&action=eth_getCode&address=' + params.address;\n              url += '&tag=' + params.blockTag + apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'getStorageAt':\n              url += '/api?module=proxy&action=eth_getStorageAt&address=' + params.address;\n              url += '&position=' + params.position;\n              url += '&tag=' + params.blockTag + apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'sendTransaction':\n              url += '/api?module=proxy&action=eth_sendRawTransaction&hex=' + params.signedTransaction;\n              url += apiKey;\n              return web_1.fetchJson(url, null, getJsonResult).catch(function (error) {\n                if (error.responseText) {\n                  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n                  if (error.responseText.toLowerCase().indexOf('insufficient funds') >= 0) {\n                    errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {});\n                  } // \"Transaction with the same hash was already imported.\"\n\n\n                  if (error.responseText.indexOf('same hash was already imported') >= 0) {\n                    errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {});\n                  } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n                  if (error.responseText.indexOf('another transaction with same nonce') >= 0) {\n                    errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {});\n                  }\n                }\n\n                throw error;\n              });\n\n            case 'getBlock':\n              if (params.blockTag) {\n                url += '/api?module=proxy&action=eth_getBlockByNumber&tag=' + params.blockTag;\n\n                if (params.includeTransactions) {\n                  url += '&boolean=true';\n                } else {\n                  url += '&boolean=false';\n                }\n\n                url += apiKey;\n                return web_1.fetchJson(url, null, getJsonResult);\n              }\n\n              throw new Error('getBlock by blockHash not implmeneted');\n\n            case 'getTransaction':\n              url += '/api?module=proxy&action=eth_getTransactionByHash&txhash=' + params.transactionHash;\n              url += apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'getTransactionReceipt':\n              url += '/api?module=proxy&action=eth_getTransactionReceipt&txhash=' + params.transactionHash;\n              url += apiKey;\n              return web_1.fetchJson(url, null, getJsonResult);\n\n            case 'call':\n              {\n                var transaction = getTransactionString(params.transaction);\n\n                if (transaction) {\n                  transaction = '&' + transaction;\n                }\n\n                url += '/api?module=proxy&action=eth_call' + transaction; //url += '&tag=' + params.blockTag + apiKey;\n\n                if (params.blockTag !== 'latest') {\n                  throw new Error('EtherscanProvider does not support blockTag for call');\n                }\n\n                url += apiKey;\n                return web_1.fetchJson(url, null, getJsonResult);\n              }\n\n            case 'estimateGas':\n              {\n                var transaction = getTransactionString(params.transaction);\n\n                if (transaction) {\n                  transaction = '&' + transaction;\n                }\n\n                url += '/api?module=proxy&action=eth_estimateGas&' + transaction;\n                url += apiKey;\n                return web_1.fetchJson(url, null, getJsonResult);\n              }\n\n            case 'getLogs':\n              url += '/api?module=logs&action=getLogs';\n\n              try {\n                if (params.filter.fromBlock) {\n                  url += '&fromBlock=' + checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                  url += '&toBlock=' + checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                  url += '&address=' + params.filter.address;\n                } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    throw new Error('unsupported topic format');\n                  }\n\n                  var topic0 = params.filter.topics[0];\n\n                  if (typeof topic0 !== 'string' || topic0.length !== 66) {\n                    throw new Error('unsupported topic0 format');\n                  }\n\n                  url += '&topic0=' + topic0;\n                }\n              } catch (error) {\n                return Promise.reject(error);\n              }\n\n              url += apiKey;\n              var self = this;\n              return web_1.fetchJson(url, null, getResult).then(function (logs) {\n                var txs = {};\n                var seq = Promise.resolve();\n                logs.forEach(function (log) {\n                  seq = seq.then(function () {\n                    if (log.blockHash != null) {\n                      return null;\n                    }\n\n                    log.blockHash = txs[log.transactionHash];\n\n                    if (log.blockHash == null) {\n                      return self.getTransaction(log.transactionHash).then(function (tx) {\n                        txs[log.transactionHash] = tx.blockHash;\n                        log.blockHash = tx.blockHash;\n                        return null;\n                      });\n                    }\n\n                    return null;\n                  });\n                });\n                return seq.then(function () {\n                  return logs;\n                });\n              });\n\n            case 'getEtherPrice':\n              if (this.network.name !== 'homestead') {\n                return Promise.resolve(0.0);\n              }\n\n              url += '/api?module=stats&action=ethprice';\n              url += apiKey;\n              return web_1.fetchJson(url, null, getResult).then(function (result) {\n                return parseFloat(result.ethusd);\n              });\n\n            default:\n              break;\n          }\n\n          return _super.prototype.perform.call(this, method, params);\n        }; // @TODO: Allow startBlock and endBlock to be Promises\n\n\n        EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {\n          var url = this.baseUrl;\n          var apiKey = '';\n\n          if (this.apiKey) {\n            apiKey += '&apikey=' + this.apiKey;\n          }\n\n          if (startBlock == null) {\n            startBlock = 0;\n          }\n\n          if (endBlock == null) {\n            endBlock = 99999999;\n          }\n\n          return this.resolveName(addressOrName).then(function (address) {\n            url += '/api?module=account&action=txlist&address=' + address;\n            url += '&startblock=' + startBlock;\n            url += '&endblock=' + endBlock;\n            url += '&sort=asc' + apiKey;\n            return web_1.fetchJson(url, null, getResult).then(function (result) {\n              var output = [];\n              result.forEach(function (tx) {\n                ['contractAddress', 'to'].forEach(function (key) {\n                  if (tx[key] == '') {\n                    delete tx[key];\n                  }\n                });\n\n                if (tx.creates == null && tx.contractAddress != null) {\n                  tx.creates = tx.contractAddress;\n                }\n\n                var item = base_provider_1.BaseProvider.checkTransactionResponse(tx);\n\n                if (tx.timeStamp) {\n                  item.timestamp = parseInt(tx.timeStamp);\n                }\n\n                output.push(item);\n              });\n              return output;\n            });\n          });\n        };\n\n        return EtherscanProvider;\n      }(base_provider_1.BaseProvider);\n\n      exports.EtherscanProvider = EtherscanProvider;\n    }, {\n      \"../errors\": 5,\n      \"../utils/bytes\": 62,\n      \"../utils/properties\": 72,\n      \"../utils/web\": 84,\n      \"./base-provider\": 50\n    }],\n    52: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var base_provider_1 = require(\"./base-provider\");\n\n      var errors = __importStar(require(\"../errors\")); // Returns:\n      //  - true is all networks match\n      //  - false if any network is null\n      //  - throws if any 2 networks do not match\n\n\n      function checkNetworks(networks) {\n        var result = true;\n        var check = null;\n        networks.forEach(function (network) {\n          // Null\n          if (network == null) {\n            result = false;\n            return;\n          } // Have nothing to compre to yet\n\n\n          if (check == null) {\n            check = network;\n            return;\n          } // Matches!\n\n\n          if (check.name === network.name && check.chainId === network.chainId && check.ensAddress === network.ensAddress) {\n            return;\n          }\n\n          errors.throwError('provider mismatch', errors.INVALID_ARGUMENT, {\n            arg: 'networks',\n            value: networks\n          });\n        });\n        return result;\n      }\n\n      var FallbackProvider =\n      /** @class */\n      function (_super) {\n        __extends(FallbackProvider, _super);\n\n        function FallbackProvider(providers) {\n          var _this = this;\n\n          if (providers.length === 0) {\n            throw new Error('no providers');\n          } // All networks are ready, we can know the network for certain\n\n\n          var ready = checkNetworks(providers.map(function (p) {\n            return p.network;\n          }));\n\n          if (ready) {\n            _this = _super.call(this, providers[0].network) || this;\n          } else {\n            // The network won't be known until all child providers know\n            var ready_1 = Promise.all(providers.map(function (p) {\n              return p.getNetwork();\n            })).then(function (networks) {\n              if (!checkNetworks(networks)) {\n                errors.throwError('getNetwork returned null', errors.UNKNOWN_ERROR, {});\n              }\n\n              return networks[0];\n            });\n            _this = _super.call(this, ready_1) || this;\n          }\n\n          errors.checkNew(_this, FallbackProvider); // Preserve a copy, so we don't get mutated\n\n          _this._providers = providers.slice(0);\n          return _this;\n        }\n\n        Object.defineProperty(FallbackProvider.prototype, \"providers\", {\n          get: function get() {\n            // Return a copy, so we don't get mutated\n            return this._providers.slice(0);\n          },\n          enumerable: true,\n          configurable: true\n        });\n\n        FallbackProvider.prototype.perform = function (method, params) {\n          // Creates a copy of the providers array\n          var providers = this.providers;\n          return new Promise(function (resolve, reject) {\n            var firstError = null;\n\n            function next() {\n              if (!providers.length) {\n                reject(firstError);\n                return;\n              }\n\n              var provider = providers.shift();\n              provider.perform(method, params).then(function (result) {\n                return resolve(result);\n              }).catch(function (error) {\n                if (!firstError) {\n                  firstError = error;\n                }\n\n                setTimeout(next, 0);\n              });\n            }\n\n            next();\n          });\n        };\n\n        return FallbackProvider;\n      }(base_provider_1.BaseProvider);\n\n      exports.FallbackProvider = FallbackProvider;\n    }, {\n      \"../errors\": 5,\n      \"./base-provider\": 50\n    }],\n    53: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var abstract_provider_1 = require(\"./abstract-provider\");\n\n      exports.Provider = abstract_provider_1.Provider;\n\n      var base_provider_1 = require(\"./base-provider\");\n\n      exports.BaseProvider = base_provider_1.BaseProvider;\n\n      var etherscan_provider_1 = require(\"./etherscan-provider\");\n\n      exports.EtherscanProvider = etherscan_provider_1.EtherscanProvider;\n\n      var fallback_provider_1 = require(\"./fallback-provider\");\n\n      exports.FallbackProvider = fallback_provider_1.FallbackProvider;\n\n      var ipc_provider_1 = require(\"./ipc-provider\");\n\n      exports.IpcProvider = ipc_provider_1.IpcProvider;\n\n      var infura_provider_1 = require(\"./infura-provider\");\n\n      exports.InfuraProvider = infura_provider_1.InfuraProvider;\n\n      var json_rpc_provider_1 = require(\"./json-rpc-provider\");\n\n      exports.JsonRpcProvider = json_rpc_provider_1.JsonRpcProvider;\n      exports.JsonRpcSigner = json_rpc_provider_1.JsonRpcSigner;\n\n      var web3_provider_1 = require(\"./web3-provider\");\n\n      exports.Web3Provider = web3_provider_1.Web3Provider;\n    }, {\n      \"./abstract-provider\": 49,\n      \"./base-provider\": 50,\n      \"./etherscan-provider\": 51,\n      \"./fallback-provider\": 52,\n      \"./infura-provider\": 54,\n      \"./ipc-provider\": 55,\n      \"./json-rpc-provider\": 56,\n      \"./web3-provider\": 57\n    }],\n    54: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var json_rpc_provider_1 = require(\"./json-rpc-provider\");\n\n      var networks_1 = require(\"../utils/networks\");\n\n      var properties_1 = require(\"../utils/properties\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var InfuraProvider =\n      /** @class */\n      function (_super) {\n        __extends(InfuraProvider, _super);\n\n        function InfuraProvider(network, apiAccessToken) {\n          var _this = this;\n\n          network = networks_1.getNetwork(network == null ? 'homestead' : network);\n          var host = null;\n\n          switch (network.name) {\n            case 'homestead':\n              host = 'mainnet.infura.io';\n              break;\n\n            case 'ropsten':\n              host = 'ropsten.infura.io';\n              break;\n\n            case 'rinkeby':\n              host = 'rinkeby.infura.io';\n              break;\n\n            case 'kovan':\n              host = 'kovan.infura.io';\n              break;\n\n            default:\n              throw new Error('unsupported network');\n          }\n\n          _this = _super.call(this, 'https://' + host + '/' + (apiAccessToken || ''), network) || this;\n          errors.checkNew(_this, InfuraProvider);\n          properties_1.defineReadOnly(_this, 'apiAccessToken', apiAccessToken || null);\n          return _this;\n        }\n\n        InfuraProvider.prototype._startPending = function () {\n          console.log('WARNING: INFURA does not support pending filters');\n        };\n\n        InfuraProvider.prototype.getSigner = function (address) {\n          errors.throwError('INFURA does not support signing', errors.UNSUPPORTED_OPERATION, {\n            operation: 'getSigner'\n          });\n          return null;\n        };\n\n        InfuraProvider.prototype.listAccounts = function () {\n          return Promise.resolve([]);\n        };\n\n        return InfuraProvider;\n      }(json_rpc_provider_1.JsonRpcProvider);\n\n      exports.InfuraProvider = InfuraProvider;\n    }, {\n      \"../errors\": 5,\n      \"../utils/networks\": 70,\n      \"../utils/properties\": 72,\n      \"./json-rpc-provider\": 56\n    }],\n    55: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n    }, {}],\n    56: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\n      var base_provider_1 = require(\"./base-provider\");\n\n      var abstract_signer_1 = require(\"../abstract-signer\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var address_1 = require(\"../utils/address\");\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      var networks_1 = require(\"../utils/networks\");\n\n      var properties_1 = require(\"../utils/properties\");\n\n      var transaction_1 = require(\"../utils/transaction\");\n\n      var utf8_1 = require(\"../utils/utf8\");\n\n      var web_1 = require(\"../utils/web\");\n\n      function timer(timeout) {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve();\n          }, timeout);\n        });\n      }\n\n      function getResult(payload) {\n        if (payload.error) {\n          // @TODO: not any\n          var error = new Error(payload.error.message);\n          error.code = payload.error.code;\n          error.data = payload.error.data;\n          throw error;\n        }\n\n        return payload.result;\n      }\n\n      function getLowerCase(value) {\n        if (value) {\n          return value.toLowerCase();\n        }\n\n        return value;\n      }\n\n      var _constructorGuard = {};\n\n      var JsonRpcSigner =\n      /** @class */\n      function (_super) {\n        __extends(JsonRpcSigner, _super);\n\n        function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n          var _this = _super.call(this) || this;\n\n          errors.checkNew(_this, JsonRpcSigner);\n\n          if (constructorGuard !== _constructorGuard) {\n            throw new Error('do not call the JsonRpcSigner constructor directly; use provider.getSigner');\n          }\n\n          properties_1.defineReadOnly(_this, 'provider', provider); // Statically attach to a given address\n\n          if (addressOrIndex) {\n            if (typeof addressOrIndex === 'string') {\n              properties_1.defineReadOnly(_this, '_address', address_1.getAddress(addressOrIndex));\n            } else if (typeof addressOrIndex === 'number') {\n              properties_1.defineReadOnly(_this, '_index', addressOrIndex);\n            } else {\n              errors.throwError('invalid address or index', errors.INVALID_ARGUMENT, {\n                argument: 'addressOrIndex',\n                value: addressOrIndex\n              });\n            }\n          } else {\n            properties_1.defineReadOnly(_this, '_index', 0);\n          }\n\n          return _this;\n        }\n\n        JsonRpcSigner.prototype.getAddress = function () {\n          var _this = this;\n\n          if (this._address) {\n            return Promise.resolve(this._address);\n          }\n\n          return this.provider.send('eth_accounts', []).then(function (accounts) {\n            if (accounts.length <= _this._index) {\n              errors.throwError('unknown account #' + _this._index, errors.UNSUPPORTED_OPERATION, {\n                operation: 'getAddress'\n              });\n            }\n\n            _this._address = address_1.getAddress(accounts[_this._index]);\n            return _this._address;\n          });\n        };\n\n        JsonRpcSigner.prototype.getBalance = function (blockTag) {\n          return this.provider.getBalance(this.getAddress(), blockTag);\n        };\n\n        JsonRpcSigner.prototype.getTransactionCount = function (blockTag) {\n          return this.provider.getTransactionCount(this.getAddress(), blockTag);\n        };\n\n        JsonRpcSigner.prototype.sendTransaction = function (transaction) {\n          var _this = this; // Once populateTransaction resolves, the from address will be populated from getAddress\n\n\n          var from = null;\n          var getAddress = this.getAddress().then(function (address) {\n            if (address) {\n              from = address.toLowerCase();\n            }\n\n            return from;\n          });\n          return transaction_1.populateTransaction(transaction, this.provider, getAddress).then(function (tx) {\n            var hexTx = JsonRpcProvider.hexlifyTransaction(tx);\n            hexTx.from = from;\n            return _this.provider.send('eth_sendTransaction', [hexTx]).then(function (hash) {\n              return web_1.poll(function () {\n                return _this.provider.getTransaction(hash).then(function (tx) {\n                  if (tx === null) {\n                    return undefined;\n                  }\n\n                  return _this.provider._wrapTransaction(tx, hash);\n                });\n              }, {\n                onceBlock: _this.provider\n              }).catch(function (error) {\n                error.transactionHash = hash;\n                throw error;\n              });\n            }, function (error) {\n              if (error.responseText) {\n                // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)\n                if (error.responseText.indexOf('insufficient funds') >= 0) {\n                  errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {\n                    transaction: tx\n                  });\n                }\n\n                if (error.responseText.indexOf('nonce too low') >= 0) {\n                  errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {\n                    transaction: tx\n                  });\n                }\n\n                if (error.responseText.indexOf('replacement transaction underpriced') >= 0) {\n                  errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {\n                    transaction: tx\n                  });\n                }\n              }\n\n              throw error;\n            });\n          });\n        };\n\n        JsonRpcSigner.prototype.signMessage = function (message) {\n          var _this = this;\n\n          var data = typeof message === 'string' ? utf8_1.toUtf8Bytes(message) : message;\n          return this.getAddress().then(function (address) {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return _this.provider.send('eth_sign', [address.toLowerCase(), bytes_1.hexlify(data)]);\n          });\n        };\n\n        JsonRpcSigner.prototype.unlock = function (password) {\n          var provider = this.provider;\n          return this.getAddress().then(function (address) {\n            return provider.send('personal_unlockAccount', [address.toLowerCase(), password, null]);\n          });\n        };\n\n        return JsonRpcSigner;\n      }(abstract_signer_1.Signer);\n\n      exports.JsonRpcSigner = JsonRpcSigner;\n      var allowedTransactionKeys = {\n        chainId: true,\n        data: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        value: true\n      };\n\n      var JsonRpcProvider =\n      /** @class */\n      function (_super) {\n        __extends(JsonRpcProvider, _super);\n\n        function JsonRpcProvider(url, network) {\n          var _this = this; // One parameter, but it is a network name, so swap it with the URL\n\n\n          if (typeof url === 'string') {\n            if (network === null && networks_1.getNetwork(url)) {\n              network = url;\n              url = null;\n            }\n          }\n\n          if (network) {\n            // The network has been specified explicitly, we can use it\n            _this = _super.call(this, network) || this;\n          } else {\n            // The network is unknown, query the JSON-RPC for it\n            var ready = new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                _this.send('net_version', []).then(function (result) {\n                  return resolve(networks_1.getNetwork(parseInt(result)));\n                }).catch(function (error) {\n                  reject(error);\n                });\n              });\n            });\n            _this = _super.call(this, ready) || this;\n          }\n\n          errors.checkNew(_this, JsonRpcProvider); // Default URL\n\n          if (!url) {\n            url = 'http://localhost:8545';\n          }\n\n          if (typeof url === 'string') {\n            _this.connection = {\n              url: url\n            };\n          } else {\n            _this.connection = url;\n          }\n\n          return _this;\n        }\n\n        JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {\n          return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n        };\n\n        JsonRpcProvider.prototype.listAccounts = function () {\n          return this.send('eth_accounts', []).then(function (accounts) {\n            return accounts.map(function (a) {\n              return address_1.getAddress(a);\n            });\n          });\n        };\n\n        JsonRpcProvider.prototype.send = function (method, params) {\n          var request = {\n            method: method,\n            params: params,\n            id: 42,\n            jsonrpc: \"2.0\"\n          };\n          return web_1.fetchJson(this.connection, JSON.stringify(request), getResult);\n        };\n\n        JsonRpcProvider.prototype.perform = function (method, params) {\n          switch (method) {\n            case 'getBlockNumber':\n              return this.send('eth_blockNumber', []);\n\n            case 'getGasPrice':\n              return this.send('eth_gasPrice', []);\n\n            case 'getBalance':\n              return this.send('eth_getBalance', [getLowerCase(params.address), params.blockTag]);\n\n            case 'getTransactionCount':\n              return this.send('eth_getTransactionCount', [getLowerCase(params.address), params.blockTag]);\n\n            case 'getCode':\n              return this.send('eth_getCode', [getLowerCase(params.address), params.blockTag]);\n\n            case 'getStorageAt':\n              return this.send('eth_getStorageAt', [getLowerCase(params.address), params.position, params.blockTag]);\n\n            case 'sendTransaction':\n              return this.send('eth_sendRawTransaction', [params.signedTransaction]).catch(function (error) {\n                if (error.responseText) {\n                  // \"insufficient funds for gas * price + value\"\n                  if (error.responseText.indexOf('insufficient funds') > 0) {\n                    errors.throwError('insufficient funds', errors.INSUFFICIENT_FUNDS, {});\n                  } // \"nonce too low\"\n\n\n                  if (error.responseText.indexOf('nonce too low') > 0) {\n                    errors.throwError('nonce has already been used', errors.NONCE_EXPIRED, {});\n                  } // \"replacement transaction underpriced\"\n\n\n                  if (error.responseText.indexOf('replacement transaction underpriced') > 0) {\n                    errors.throwError('replacement fee too low', errors.REPLACEMENT_UNDERPRICED, {});\n                  }\n                }\n\n                throw error;\n              });\n\n            case 'getBlock':\n              if (params.blockTag) {\n                return this.send('eth_getBlockByNumber', [params.blockTag, !!params.includeTransactions]);\n              } else if (params.blockHash) {\n                return this.send('eth_getBlockByHash', [params.blockHash, !!params.includeTransactions]);\n              }\n\n              return Promise.reject(new Error('invalid block tag or block hash'));\n\n            case 'getTransaction':\n              return this.send('eth_getTransactionByHash', [params.transactionHash]);\n\n            case 'getTransactionReceipt':\n              return this.send('eth_getTransactionReceipt', [params.transactionHash]);\n\n            case 'call':\n              return this.send('eth_call', [JsonRpcProvider.hexlifyTransaction(params.transaction, {\n                from: true\n              }), params.blockTag]);\n\n            case 'estimateGas':\n              return this.send('eth_estimateGas', [JsonRpcProvider.hexlifyTransaction(params.transaction, {\n                from: true\n              })]);\n\n            case 'getLogs':\n              if (params.filter && params.filter.address != null) {\n                params.filter.address = getLowerCase(params.filter.address);\n              }\n\n              return this.send('eth_getLogs', [params.filter]);\n\n            default:\n              break;\n          }\n\n          errors.throwError(method + ' not implemented', errors.NOT_IMPLEMENTED, {\n            operation: method\n          });\n          return null;\n        };\n\n        JsonRpcProvider.prototype._startPending = function () {\n          if (this._pendingFilter != null) {\n            return;\n          }\n\n          var self = this;\n          var pendingFilter = this.send('eth_newPendingTransactionFilter', []);\n          this._pendingFilter = pendingFilter;\n          pendingFilter.then(function (filterId) {\n            function poll() {\n              self.send('eth_getFilterChanges', [filterId]).then(function (hashes) {\n                if (self._pendingFilter != pendingFilter) {\n                  return null;\n                }\n\n                var seq = Promise.resolve();\n                hashes.forEach(function (hash) {\n                  self._emitted['t:' + hash.toLowerCase()] = 'pending';\n                  seq = seq.then(function () {\n                    return self.getTransaction(hash).then(function (tx) {\n                      self.emit('pending', tx);\n                      return null;\n                    });\n                  });\n                });\n                return seq.then(function () {\n                  return timer(1000);\n                });\n              }).then(function () {\n                if (self._pendingFilter != pendingFilter) {\n                  self.send('eth_uninstallFilter', [filterId]);\n                  return;\n                }\n\n                setTimeout(function () {\n                  poll();\n                }, 0);\n                return null;\n              }).catch(function (error) {});\n            }\n\n            poll();\n            return filterId;\n          }).catch(function (error) {});\n        };\n\n        JsonRpcProvider.prototype._stopPending = function () {\n          this._pendingFilter = null;\n        }; // Convert an ethers.js transaction into a JSON-RPC transaction\n        //  - gasLimit => gas\n        //  - All values hexlified\n        //  - All numeric values zero-striped\n        // NOTE: This allows a TransactionRequest, but all values should be resolved\n        //       before this is called\n\n\n        JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {\n          // Check only allowed properties are given\n          var allowed = properties_1.shallowCopy(allowedTransactionKeys);\n\n          if (allowExtra) {\n            for (var key in allowExtra) {\n              if (allowExtra[key]) {\n                allowed[key] = true;\n              }\n            }\n          }\n\n          properties_1.checkProperties(transaction, allowed);\n          var result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) don't like leading zeros.\n\n          ['gasLimit', 'gasPrice', 'nonce', 'value'].forEach(function (key) {\n            if (transaction[key] == null) {\n              return;\n            }\n\n            var value = bytes_1.hexStripZeros(bytes_1.hexlify(transaction[key]));\n\n            if (key === 'gasLimit') {\n              key = 'gas';\n            }\n\n            result[key] = value;\n          });\n          ['from', 'to', 'data'].forEach(function (key) {\n            if (transaction[key] == null) {\n              return;\n            }\n\n            result[key] = bytes_1.hexlify(transaction[key]);\n          });\n          return result;\n        };\n\n        return JsonRpcProvider;\n      }(base_provider_1.BaseProvider);\n\n      exports.JsonRpcProvider = JsonRpcProvider;\n    }, {\n      \"../abstract-signer\": 2,\n      \"../errors\": 5,\n      \"../utils/address\": 59,\n      \"../utils/bytes\": 62,\n      \"../utils/networks\": 70,\n      \"../utils/properties\": 72,\n      \"../utils/transaction\": 81,\n      \"../utils/utf8\": 83,\n      \"../utils/web\": 84,\n      \"./base-provider\": 50\n    }],\n    57: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var json_rpc_provider_1 = require(\"./json-rpc-provider\");\n\n      var properties_1 = require(\"../utils/properties\");\n\n      var errors = __importStar(require(\"../errors\"));\n      /*\n      @TODO\n      utils.defineProperty(Web3Signer, 'onchange', {\n      \n      });\n      \n      */\n\n\n      var Web3Provider =\n      /** @class */\n      function (_super) {\n        __extends(Web3Provider, _super);\n\n        function Web3Provider(web3Provider, network) {\n          var _this = // HTTP has a host; IPC has a path.\n          _super.call(this, web3Provider.host || web3Provider.path || '', network) || this;\n\n          errors.checkNew(_this, Web3Provider);\n\n          if (web3Provider) {\n            if (web3Provider.sendAsync) {\n              _this._sendAsync = web3Provider.sendAsync.bind(web3Provider);\n            } else if (web3Provider.send) {\n              _this._sendAsync = web3Provider.send.bind(web3Provider);\n            }\n          }\n\n          if (!web3Provider || !_this._sendAsync) {\n            errors.throwError('invalid web3Provider', errors.INVALID_ARGUMENT, {\n              arg: 'web3Provider',\n              value: web3Provider\n            });\n          }\n\n          properties_1.defineReadOnly(_this, '_web3Provider', web3Provider);\n          return _this;\n        }\n\n        Web3Provider.prototype.send = function (method, params) {\n          var _this = this; // Metamask complains about eth_sign (and on some versions hangs)\n\n\n          if (method == 'eth_sign' && this._web3Provider.isMetaMask) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = 'personal_sign';\n            params = [params[1], params[0]];\n          }\n\n          return new Promise(function (resolve, reject) {\n            var request = {\n              method: method,\n              params: params,\n              id: 42,\n              jsonrpc: \"2.0\"\n            };\n\n            _this._sendAsync(request, function (error, result) {\n              if (error) {\n                reject(error);\n                return;\n              }\n\n              if (result.error) {\n                // @TODO: not any\n                var error = new Error(result.error.message);\n                error.code = result.error.code;\n                error.data = result.error.data;\n                reject(error);\n                return;\n              }\n\n              resolve(result.result);\n            });\n          });\n        };\n\n        return Web3Provider;\n      }(json_rpc_provider_1.JsonRpcProvider);\n\n      exports.Web3Provider = Web3Provider;\n    }, {\n      \"../errors\": 5,\n      \"../utils/properties\": 72,\n      \"./json-rpc-provider\": 56\n    }],\n    58: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n      var constants_1 = require(\"../constants\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var address_1 = require(\"./address\");\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var properties_1 = require(\"./properties\"); ///////////////////////////////\n\n\n      var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n      var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n      var paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\n      exports.defaultCoerceFunc = function (type, value) {\n        var match = type.match(paramTypeNumber);\n\n        if (match && parseInt(match[2]) <= 48) {\n          return value.toNumber();\n        }\n\n        return value;\n      }; ///////////////////////////////////\n      // Parsing for Solidity Signatures\n\n\n      var regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n      var regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\n\n      function verifyType(type) {\n        // These need to be transformed to their full description\n        if (type.match(/^uint($|[^1-9])/)) {\n          type = 'uint256' + type.substring(4);\n        } else if (type.match(/^int($|[^1-9])/)) {\n          type = 'int256' + type.substring(3);\n        }\n\n        return type;\n      }\n\n      function parseParam(param, allowIndexed) {\n        function throwError(i) {\n          throw new Error('unexpected character \"' + param[i] + '\" at position ' + i + ' in \"' + param + '\"');\n        }\n\n        var parent = {\n          type: '',\n          name: '',\n          state: {\n            allowType: true\n          }\n        };\n        var node = parent;\n\n        for (var i = 0; i < param.length; i++) {\n          var c = param[i];\n\n          switch (c) {\n            case '(':\n              if (!node.state.allowParams) {\n                throwError(i);\n              }\n\n              node.state.allowType = false;\n              node.type = verifyType(node.type);\n              node.components = [{\n                type: '',\n                name: '',\n                parent: node,\n                state: {\n                  allowType: true\n                }\n              }];\n              node = node.components[0];\n              break;\n\n            case ')':\n              delete node.state;\n\n              if (allowIndexed && node.name === 'indexed') {\n                node.indexed = true;\n                node.name = '';\n              }\n\n              node.type = verifyType(node.type);\n              var child = node;\n              node = node.parent;\n\n              if (!node) {\n                throwError(i);\n              }\n\n              delete child.parent;\n              node.state.allowParams = false;\n              node.state.allowName = true;\n              node.state.allowArray = true;\n              break;\n\n            case ',':\n              delete node.state;\n\n              if (allowIndexed && node.name === 'indexed') {\n                node.indexed = true;\n                node.name = '';\n              }\n\n              node.type = verifyType(node.type);\n              var sibling = {\n                type: '',\n                name: '',\n                parent: node.parent,\n                state: {\n                  allowType: true\n                }\n              };\n              node.parent.components.push(sibling);\n              delete node.parent;\n              node = sibling;\n              break;\n            // Hit a space...\n\n            case ' ':\n              // If reading type, the type is done and may read a param or name\n              if (node.state.allowType) {\n                if (node.type !== '') {\n                  node.type = verifyType(node.type);\n                  delete node.state.allowType;\n                  node.state.allowName = true;\n                  node.state.allowParams = true;\n                }\n              } // If reading name, the name is done\n\n\n              if (node.state.allowName) {\n                if (node.name !== '') {\n                  if (allowIndexed && node.name === 'indexed') {\n                    node.indexed = true;\n                    node.name = '';\n                  } else {\n                    node.state.allowName = false;\n                  }\n                }\n              }\n\n              break;\n\n            case '[':\n              if (!node.state.allowArray) {\n                throwError(i);\n              }\n\n              node.type += c;\n              node.state.allowArray = false;\n              node.state.allowName = false;\n              node.state.readArray = true;\n              break;\n\n            case ']':\n              if (!node.state.readArray) {\n                throwError(i);\n              }\n\n              node.type += c;\n              node.state.readArray = false;\n              node.state.allowArray = true;\n              node.state.allowName = true;\n              break;\n\n            default:\n              if (node.state.allowType) {\n                node.type += c;\n                node.state.allowParams = true;\n                node.state.allowArray = true;\n              } else if (node.state.allowName) {\n                node.name += c;\n                delete node.state.allowArray;\n              } else if (node.state.readArray) {\n                node.type += c;\n              } else {\n                throwError(i);\n              }\n\n          }\n        }\n\n        if (node.parent) {\n          throw new Error(\"unexpected eof\");\n        }\n\n        delete parent.state;\n\n        if (allowIndexed && node.name === 'indexed') {\n          node.indexed = true;\n          node.name = '';\n        }\n\n        parent.type = verifyType(parent.type);\n        return parent;\n      } // @TODO: Better return type\n\n\n      function parseSignatureEvent(fragment) {\n        var abi = {\n          anonymous: false,\n          inputs: [],\n          name: '',\n          type: 'event'\n        };\n        var match = fragment.match(regexParen);\n\n        if (!match) {\n          throw new Error('invalid event: ' + fragment);\n        }\n\n        abi.name = match[1].trim();\n        splitNesting(match[2]).forEach(function (param) {\n          param = parseParam(param, true);\n          param.indexed = !!param.indexed;\n          abi.inputs.push(param);\n        });\n        match[3].split(' ').forEach(function (modifier) {\n          switch (modifier) {\n            case 'anonymous':\n              abi.anonymous = true;\n              break;\n\n            case '':\n              break;\n\n            default:\n              console.log('unknown modifier: ' + modifier);\n          }\n        });\n\n        if (abi.name && !abi.name.match(regexIdentifier)) {\n          throw new Error('invalid identifier: \"' + abi.name + '\"');\n        }\n\n        return abi;\n      }\n\n      function parseSignatureFunction(fragment) {\n        var abi = {\n          constant: false,\n          gas: null,\n          inputs: [],\n          name: '',\n          outputs: [],\n          payable: false,\n          stateMutability: null,\n          type: 'function'\n        };\n        var comps = fragment.split('@');\n\n        if (comps.length !== 1) {\n          if (comps.length > 2) {\n            throw new Error('invalid signature');\n          }\n\n          if (!comps[1].match(/^[0-9]+$/)) {\n            throw new Error('invalid signature gas');\n          }\n\n          abi.gas = bignumber_1.bigNumberify(comps[1]);\n          fragment = comps[0];\n        }\n\n        comps = fragment.split(' returns ');\n        var left = comps[0].match(regexParen);\n\n        if (!left) {\n          throw new Error('invalid signature');\n        }\n\n        abi.name = left[1].trim();\n\n        if (!abi.name.match(regexIdentifier)) {\n          throw new Error('invalid identifier: \"' + left[1] + '\"');\n        }\n\n        splitNesting(left[2]).forEach(function (param) {\n          abi.inputs.push(parseParam(param));\n        });\n        left[3].split(' ').forEach(function (modifier) {\n          switch (modifier) {\n            case 'constant':\n              abi.constant = true;\n              break;\n\n            case 'payable':\n              abi.payable = true;\n              abi.stateMutability = 'payable';\n              break;\n\n            case 'pure':\n              abi.constant = true;\n              abi.stateMutability = 'pure';\n              break;\n\n            case 'view':\n              abi.constant = true;\n              abi.stateMutability = 'view';\n              break;\n\n            case 'external':\n            case 'public':\n            case '':\n              break;\n\n            default:\n              console.log('unknown modifier: ' + modifier);\n          }\n        }); // We have outputs\n\n        if (comps.length > 1) {\n          var right = comps[1].match(regexParen);\n\n          if (right[1].trim() != '' || right[3].trim() != '') {\n            throw new Error('unexpected tokens');\n          }\n\n          splitNesting(right[2]).forEach(function (param) {\n            abi.outputs.push(parseParam(param));\n          });\n        }\n\n        if (abi.name === 'constructor') {\n          abi.type = \"constructor\";\n\n          if (abi.outputs.length) {\n            throw new Error('constructor may not have outputs');\n          }\n\n          delete abi.name;\n          delete abi.outputs;\n        }\n\n        return abi;\n      }\n\n      function parseParamType(type) {\n        return parseParam(type, true);\n      }\n\n      exports.parseParamType = parseParamType; // @TODO: Allow a second boolean to expose names\n\n      function formatParamType(paramType) {\n        return getParamCoder(exports.defaultCoerceFunc, paramType).type;\n      }\n\n      exports.formatParamType = formatParamType; // @TODO: Allow a second boolean to expose names and modifiers\n\n      function formatSignature(fragment) {\n        return fragment.name + '(' + fragment.inputs.map(function (i) {\n          return formatParamType(i);\n        }).join(',') + ')';\n      }\n\n      exports.formatSignature = formatSignature;\n\n      function parseSignature(fragment) {\n        if (typeof fragment === 'string') {\n          // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n          fragment = fragment.replace(/\\(/g, ' (').replace(/\\)/g, ') ').replace(/\\s+/g, ' ');\n          fragment = fragment.trim();\n\n          if (fragment.substring(0, 6) === 'event ') {\n            return parseSignatureEvent(fragment.substring(6).trim());\n          } else {\n            if (fragment.substring(0, 9) === 'function ') {\n              fragment = fragment.substring(9);\n            }\n\n            return parseSignatureFunction(fragment.trim());\n          }\n        }\n\n        throw new Error('unknown signature');\n      }\n\n      exports.parseSignature = parseSignature;\n\n      var Coder =\n      /** @class */\n      function () {\n        function Coder(coerceFunc, name, type, localName, dynamic) {\n          this.coerceFunc = coerceFunc;\n          this.name = name;\n          this.type = type;\n          this.localName = localName;\n          this.dynamic = dynamic;\n        }\n\n        return Coder;\n      }(); // Clones the functionality of an existing Coder, but without a localName\n\n\n      var CoderAnonymous =\n      /** @class */\n      function (_super) {\n        __extends(CoderAnonymous, _super);\n\n        function CoderAnonymous(coder) {\n          var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;\n\n          properties_1.defineReadOnly(_this, 'coder', coder);\n          return _this;\n        }\n\n        CoderAnonymous.prototype.encode = function (value) {\n          return this.coder.encode(value);\n        };\n\n        CoderAnonymous.prototype.decode = function (data, offset) {\n          return this.coder.decode(data, offset);\n        };\n\n        return CoderAnonymous;\n      }(Coder);\n\n      var CoderNull =\n      /** @class */\n      function (_super) {\n        __extends(CoderNull, _super);\n\n        function CoderNull(coerceFunc, localName) {\n          return _super.call(this, coerceFunc, 'null', '', localName, false) || this;\n        }\n\n        CoderNull.prototype.encode = function (value) {\n          return bytes_1.arrayify([]);\n        };\n\n        CoderNull.prototype.decode = function (data, offset) {\n          if (offset > data.length) {\n            throw new Error('invalid null');\n          }\n\n          return {\n            consumed: 0,\n            value: this.coerceFunc('null', undefined)\n          };\n        };\n\n        return CoderNull;\n      }(Coder);\n\n      var CoderNumber =\n      /** @class */\n      function (_super) {\n        __extends(CoderNumber, _super);\n\n        function CoderNumber(coerceFunc, size, signed, localName) {\n          var _this = this;\n\n          var name = (signed ? 'int' : 'uint') + size * 8;\n          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;\n          _this.size = size;\n          _this.signed = signed;\n          return _this;\n        }\n\n        CoderNumber.prototype.encode = function (value) {\n          try {\n            var v = bignumber_1.bigNumberify(value);\n\n            if (this.signed) {\n              var bounds = constants_1.MaxUint256.maskn(this.size * 8 - 1);\n\n              if (v.gt(bounds)) {\n                throw new Error('out-of-bounds');\n              }\n\n              bounds = bounds.add(constants_1.One).mul(constants_1.NegativeOne);\n\n              if (v.lt(bounds)) {\n                throw new Error('out-of-bounds');\n              }\n            } else if (v.lt(constants_1.Zero) || v.gt(constants_1.MaxUint256.maskn(this.size * 8))) {\n              throw new Error('out-of-bounds');\n            }\n\n            v = v.toTwos(this.size * 8).maskn(this.size * 8);\n\n            if (this.signed) {\n              v = v.fromTwos(this.size * 8).toTwos(256);\n            }\n\n            return bytes_1.padZeros(bytes_1.arrayify(v), 32);\n          } catch (error) {\n            errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: this.name,\n              value: value\n            });\n          }\n\n          return null;\n        };\n\n        CoderNumber.prototype.decode = function (data, offset) {\n          if (data.length < offset + 32) {\n            errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: this.name,\n              value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n          }\n\n          var junkLength = 32 - this.size;\n          var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));\n\n          if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n          } else {\n            value = value.maskn(this.size * 8);\n          }\n\n          return {\n            consumed: 32,\n            value: this.coerceFunc(this.name, value)\n          };\n        };\n\n        return CoderNumber;\n      }(Coder);\n\n      var uint256Coder = new CoderNumber(function (type, value) {\n        return value;\n      }, 32, false, 'none');\n\n      var CoderBoolean =\n      /** @class */\n      function (_super) {\n        __extends(CoderBoolean, _super);\n\n        function CoderBoolean(coerceFunc, localName) {\n          return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;\n        }\n\n        CoderBoolean.prototype.encode = function (value) {\n          return uint256Coder.encode(!!value ? 1 : 0);\n        };\n\n        CoderBoolean.prototype.decode = function (data, offset) {\n          try {\n            var result = uint256Coder.decode(data, offset);\n          } catch (error) {\n            if (error.reason === 'insufficient data for uint256 type') {\n              errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'boolean',\n                value: error.value\n              });\n            }\n\n            throw error;\n          }\n\n          return {\n            consumed: result.consumed,\n            value: this.coerceFunc('bool', !result.value.isZero())\n          };\n        };\n\n        return CoderBoolean;\n      }(Coder);\n\n      var CoderFixedBytes =\n      /** @class */\n      function (_super) {\n        __extends(CoderFixedBytes, _super);\n\n        function CoderFixedBytes(coerceFunc, length, localName) {\n          var _this = this;\n\n          var name = 'bytes' + length;\n          _this = _super.call(this, coerceFunc, name, name, localName, false) || this;\n          _this.length = length;\n          return _this;\n        }\n\n        CoderFixedBytes.prototype.encode = function (value) {\n          var result = new Uint8Array(32);\n\n          try {\n            var data = bytes_1.arrayify(value);\n\n            if (data.length !== this.length) {\n              throw new Error('incorrect data length');\n            }\n\n            result.set(data);\n          } catch (error) {\n            errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: this.name,\n              value: error.value || value\n            });\n          }\n\n          return result;\n        };\n\n        CoderFixedBytes.prototype.decode = function (data, offset) {\n          if (data.length < offset + 32) {\n            errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: this.name,\n              value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n          }\n\n          return {\n            consumed: 32,\n            value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))\n          };\n        };\n\n        return CoderFixedBytes;\n      }(Coder);\n\n      var CoderAddress =\n      /** @class */\n      function (_super) {\n        __extends(CoderAddress, _super);\n\n        function CoderAddress(coerceFunc, localName) {\n          return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;\n        }\n\n        CoderAddress.prototype.encode = function (value) {\n          var result = new Uint8Array(32);\n\n          try {\n            result.set(bytes_1.arrayify(address_1.getAddress(value)), 12);\n          } catch (error) {\n            errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: 'address',\n              value: value\n            });\n          }\n\n          return result;\n        };\n\n        CoderAddress.prototype.decode = function (data, offset) {\n          if (data.length < offset + 32) {\n            errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: 'address',\n              value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n          }\n\n          return {\n            consumed: 32,\n            value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32))))\n          };\n        };\n\n        return CoderAddress;\n      }(Coder);\n\n      function _encodeDynamicBytes(value) {\n        var dataLength = 32 * Math.ceil(value.length / 32);\n        var padding = new Uint8Array(dataLength - value.length);\n        return bytes_1.concat([uint256Coder.encode(value.length), value, padding]);\n      }\n\n      function _decodeDynamicBytes(data, offset, localName) {\n        if (data.length < offset + 32) {\n          errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: bytes_1.hexlify(data.slice(offset, offset + 32))\n          });\n        }\n\n        var length = uint256Coder.decode(data, offset).value;\n\n        try {\n          length = length.toNumber();\n        } catch (error) {\n          errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: length.toString()\n          });\n        }\n\n        if (data.length < offset + 32 + length) {\n          errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))\n          });\n        }\n\n        return {\n          consumed: 32 + 32 * Math.ceil(length / 32),\n          value: data.slice(offset + 32, offset + 32 + length)\n        };\n      }\n\n      var CoderDynamicBytes =\n      /** @class */\n      function (_super) {\n        __extends(CoderDynamicBytes, _super);\n\n        function CoderDynamicBytes(coerceFunc, localName) {\n          return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;\n        }\n\n        CoderDynamicBytes.prototype.encode = function (value) {\n          try {\n            return _encodeDynamicBytes(bytes_1.arrayify(value));\n          } catch (error) {\n            errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: 'bytes',\n              value: error.value\n            });\n          }\n\n          return null;\n        };\n\n        CoderDynamicBytes.prototype.decode = function (data, offset) {\n          var result = _decodeDynamicBytes(data, offset, this.localName);\n\n          result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));\n          return result;\n        };\n\n        return CoderDynamicBytes;\n      }(Coder);\n\n      var CoderString =\n      /** @class */\n      function (_super) {\n        __extends(CoderString, _super);\n\n        function CoderString(coerceFunc, localName) {\n          return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;\n        }\n\n        CoderString.prototype.encode = function (value) {\n          if (typeof value !== 'string') {\n            errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: 'string',\n              value: value\n            });\n          }\n\n          return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));\n        };\n\n        CoderString.prototype.decode = function (data, offset) {\n          var result = _decodeDynamicBytes(data, offset, this.localName);\n\n          result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));\n          return result;\n        };\n\n        return CoderString;\n      }(Coder);\n\n      function alignSize(size) {\n        return 32 * Math.ceil(size / 32);\n      }\n\n      function pack(coders, values) {\n        if (Array.isArray(values)) {// do nothing\n        } else if (values && typeof values === 'object') {\n          var arrayValues = [];\n          coders.forEach(function (coder) {\n            arrayValues.push(values[coder.localName]);\n          });\n          values = arrayValues;\n        } else {\n          errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {\n            coderType: 'tuple',\n            value: values\n          });\n        }\n\n        if (coders.length !== values.length) {\n          errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {\n            coderType: 'tuple',\n            value: values\n          });\n        }\n\n        var parts = [];\n        coders.forEach(function (coder, index) {\n          parts.push({\n            dynamic: coder.dynamic,\n            value: coder.encode(values[index])\n          });\n        });\n        var staticSize = 0,\n            dynamicSize = 0;\n        parts.forEach(function (part) {\n          if (part.dynamic) {\n            staticSize += 32;\n            dynamicSize += alignSize(part.value.length);\n          } else {\n            staticSize += alignSize(part.value.length);\n          }\n        });\n        var offset = 0,\n            dynamicOffset = staticSize;\n        var data = new Uint8Array(staticSize + dynamicSize);\n        parts.forEach(function (part) {\n          if (part.dynamic) {\n            //uint256Coder.encode(dynamicOffset).copy(data, offset);\n            data.set(uint256Coder.encode(dynamicOffset), offset);\n            offset += 32; //part.value.copy(data, dynamicOffset);  @TODO\n\n            data.set(part.value, dynamicOffset);\n            dynamicOffset += alignSize(part.value.length);\n          } else {\n            //part.value.copy(data, offset);  @TODO\n            data.set(part.value, offset);\n            offset += alignSize(part.value.length);\n          }\n        });\n        return data;\n      }\n\n      function unpack(coders, data, offset) {\n        var baseOffset = offset;\n        var consumed = 0;\n        var value = [];\n        coders.forEach(function (coder) {\n          if (coder.dynamic) {\n            var dynamicOffset = uint256Coder.decode(data, offset);\n            var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber()); // The dynamic part is leap-frogged somewhere else; doesn't count towards size\n\n            result.consumed = dynamicOffset.consumed;\n          } else {\n            var result = coder.decode(data, offset);\n          }\n\n          if (result.value != undefined) {\n            value.push(result.value);\n          }\n\n          offset += result.consumed;\n          consumed += result.consumed;\n        });\n        coders.forEach(function (coder, index) {\n          var name = coder.localName;\n\n          if (!name) {\n            return;\n          }\n\n          if (name === 'length') {\n            name = '_length';\n          }\n\n          if (value[name] != null) {\n            return;\n          }\n\n          value[name] = value[index];\n        });\n        return {\n          value: value,\n          consumed: consumed\n        };\n      }\n\n      var CoderArray =\n      /** @class */\n      function (_super) {\n        __extends(CoderArray, _super);\n\n        function CoderArray(coerceFunc, coder, length, localName) {\n          var _this = this;\n\n          var type = coder.type + '[' + (length >= 0 ? length : '') + ']';\n          var dynamic = length === -1 || coder.dynamic;\n          _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;\n          _this.coder = coder;\n          _this.length = length;\n          return _this;\n        }\n\n        CoderArray.prototype.encode = function (value) {\n          if (!Array.isArray(value)) {\n            errors.throwError('expected array value', errors.INVALID_ARGUMENT, {\n              arg: this.localName,\n              coderType: 'array',\n              value: value\n            });\n          }\n\n          var count = this.length;\n          var result = new Uint8Array(0);\n\n          if (count === -1) {\n            count = value.length;\n            result = uint256Coder.encode(count);\n          }\n\n          errors.checkArgumentCount(count, value.length, 'in coder array' + (this.localName ? \" \" + this.localName : \"\"));\n          var coders = [];\n\n          for (var i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n          }\n\n          return bytes_1.concat([result, pack(coders, value)]);\n        };\n\n        CoderArray.prototype.decode = function (data, offset) {\n          // @TODO:\n          //if (data.length < offset + length * 32) { throw new Error('invalid array'); }\n          var consumed = 0;\n          var count = this.length;\n\n          if (count === -1) {\n            try {\n              var decodedLength = uint256Coder.decode(data, offset);\n            } catch (error) {\n              errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'array',\n                value: error.value\n              });\n            }\n\n            try {\n              count = decodedLength.value.toNumber();\n            } catch (error) {\n              errors.throwError('array count too large', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'array',\n                value: decodedLength.value.toString()\n              });\n            }\n\n            consumed += decodedLength.consumed;\n            offset += decodedLength.consumed;\n          }\n\n          var coders = [];\n\n          for (var i = 0; i < count; i++) {\n            coders.push(new CoderAnonymous(this.coder));\n          }\n\n          var result = unpack(coders, data, offset);\n          result.consumed += consumed;\n          result.value = this.coerceFunc(this.type, result.value);\n          return result;\n        };\n\n        return CoderArray;\n      }(Coder);\n\n      var CoderTuple =\n      /** @class */\n      function (_super) {\n        __extends(CoderTuple, _super);\n\n        function CoderTuple(coerceFunc, coders, localName) {\n          var _this = this;\n\n          var dynamic = false;\n          var types = [];\n          coders.forEach(function (coder) {\n            if (coder.dynamic) {\n              dynamic = true;\n            }\n\n            types.push(coder.type);\n          });\n          var type = 'tuple(' + types.join(',') + ')';\n          _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;\n          _this.coders = coders;\n          return _this;\n        }\n\n        CoderTuple.prototype.encode = function (value) {\n          return pack(this.coders, value);\n        };\n\n        CoderTuple.prototype.decode = function (data, offset) {\n          var result = unpack(this.coders, data, offset);\n          result.value = this.coerceFunc(this.type, result.value);\n          return result;\n        };\n\n        return CoderTuple;\n      }(Coder);\n      /*\n      function getTypes(coders) {\n          var type = coderTuple(coders).type;\n          return type.substring(6, type.length - 1);\n      }\n      */\n\n\n      function splitNesting(value) {\n        value = value.trim();\n        var result = [];\n        var accum = '';\n        var depth = 0;\n\n        for (var offset = 0; offset < value.length; offset++) {\n          var c = value[offset];\n\n          if (c === ',' && depth === 0) {\n            result.push(accum);\n            accum = '';\n          } else {\n            accum += c;\n\n            if (c === '(') {\n              depth++;\n            } else if (c === ')') {\n              depth--;\n\n              if (depth === -1) {\n                throw new Error('unbalanced parenthsis');\n              }\n            }\n          }\n        }\n\n        if (accum) {\n          result.push(accum);\n        }\n\n        return result;\n      } // @TODO: Is there a way to return \"class\"?\n\n\n      var paramTypeSimple = {\n        address: CoderAddress,\n        bool: CoderBoolean,\n        string: CoderString,\n        bytes: CoderDynamicBytes\n      };\n\n      function getTupleParamCoder(coerceFunc, components, localName) {\n        if (!components) {\n          components = [];\n        }\n\n        var coders = [];\n        components.forEach(function (component) {\n          coders.push(getParamCoder(coerceFunc, component));\n        });\n        return new CoderTuple(coerceFunc, coders, localName);\n      }\n\n      function getParamCoder(coerceFunc, param) {\n        var coder = paramTypeSimple[param.type];\n\n        if (coder) {\n          return new coder(coerceFunc, param.name);\n        }\n\n        var match = param.type.match(paramTypeNumber);\n\n        if (match) {\n          var size = parseInt(match[2] || \"256\");\n\n          if (size === 0 || size > 256 || size % 8 !== 0) {\n            errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {\n              arg: 'param',\n              value: param\n            });\n          }\n\n          return new CoderNumber(coerceFunc, size / 8, match[1] === 'int', param.name);\n        }\n\n        var match = param.type.match(paramTypeBytes);\n\n        if (match) {\n          var size = parseInt(match[1]);\n\n          if (size === 0 || size > 32) {\n            errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {\n              arg: 'param',\n              value: param\n            });\n          }\n\n          return new CoderFixedBytes(coerceFunc, size, param.name);\n        }\n\n        var match = param.type.match(paramTypeArray);\n\n        if (match) {\n          var size = parseInt(match[2] || \"-1\");\n          param = properties_1.shallowCopy(param);\n          param.type = match[1];\n          param = properties_1.deepCopy(param);\n          return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);\n        }\n\n        if (param.type.substring(0, 5) === 'tuple') {\n          return getTupleParamCoder(coerceFunc, param.components, param.name);\n        }\n\n        if (param.type === '') {\n          return new CoderNull(coerceFunc, param.name);\n        }\n\n        errors.throwError('invalid type', errors.INVALID_ARGUMENT, {\n          arg: 'type',\n          value: param.type\n        });\n        return null;\n      }\n\n      var AbiCoder =\n      /** @class */\n      function () {\n        function AbiCoder(coerceFunc) {\n          errors.checkNew(this, AbiCoder);\n\n          if (!coerceFunc) {\n            coerceFunc = exports.defaultCoerceFunc;\n          }\n\n          properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);\n        }\n\n        AbiCoder.prototype.encode = function (types, values) {\n          if (types.length !== values.length) {\n            errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {\n              count: {\n                types: types.length,\n                values: values.length\n              },\n              value: {\n                types: types,\n                values: values\n              }\n            });\n          }\n\n          var coders = [];\n          types.forEach(function (type) {\n            // Convert types to type objects\n            //   - \"uint foo\" => { type: \"uint\", name: \"foo\" }\n            //   - \"tuple(uint, uint)\" => { type: \"tuple\", components: [ { type: \"uint\" }, { type: \"uint\" }, ] }\n            var typeObject = null;\n\n            if (typeof type === 'string') {\n              typeObject = parseParam(type);\n            } else {\n              typeObject = type;\n            }\n\n            coders.push(getParamCoder(this.coerceFunc, typeObject));\n          }, this);\n          return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));\n        };\n\n        AbiCoder.prototype.decode = function (types, data) {\n          var coders = [];\n          types.forEach(function (type) {\n            // See encode for details\n            var typeObject = null;\n\n            if (typeof type === 'string') {\n              typeObject = parseParam(type);\n            } else {\n              typeObject = properties_1.deepCopy(type);\n            }\n\n            coders.push(getParamCoder(this.coerceFunc, typeObject));\n          }, this);\n          return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;\n        };\n\n        return AbiCoder;\n      }();\n\n      exports.AbiCoder = AbiCoder;\n      exports.defaultAbiCoder = new AbiCoder();\n    }, {\n      \"../constants\": 3,\n      \"../errors\": 5,\n      \"./address\": 59,\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./properties\": 72,\n      \"./utf8\": 83\n    }],\n    59: [function (require, module, exports) {\n      'use strict';\n\n      var __importDefault = this && this.__importDefault || function (mod) {\n        return mod && mod.__esModule ? mod : {\n          \"default\": mod\n        };\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // We use this for base 36 maths\n\n      var bn_js_1 = __importDefault(require(\"bn.js\"));\n\n      var bytes_1 = require(\"./bytes\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var rlp_1 = require(\"./rlp\");\n\n      var errors = require(\"../errors\"); ///////////////////////////////\n\n\n      function getChecksumAddress(address) {\n        if (typeof address !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {\n          errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n            arg: 'address',\n            value: address\n          });\n        }\n\n        address = address.toLowerCase();\n        var chars = address.substring(2).split('');\n        var hashed = new Uint8Array(40);\n\n        for (var i_1 = 0; i_1 < 40; i_1++) {\n          hashed[i_1] = chars[i_1].charCodeAt(0);\n        }\n\n        hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));\n\n        for (var i = 0; i < 40; i += 2) {\n          if (hashed[i >> 1] >> 4 >= 8) {\n            chars[i] = chars[i].toUpperCase();\n          }\n\n          if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n          }\n        }\n\n        return '0x' + chars.join('');\n      } // Shims for environments that are missing some required constants and functions\n\n\n      var MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\n      function log10(x) {\n        if (Math.log10) {\n          return Math.log10(x);\n        }\n\n        return Math.log(x) / Math.LN10;\n      } // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n      // Create lookup table\n\n\n      var ibanLookup = {};\n\n      for (var i = 0; i < 10; i++) {\n        ibanLookup[String(i)] = String(i);\n      }\n\n      for (var i = 0; i < 26; i++) {\n        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n      } // How many decimal digits can we process? (for 64-bit float, this is 15)\n\n\n      var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\n      function ibanChecksum(address) {\n        address = address.toUpperCase();\n        address = address.substring(4) + address.substring(0, 2) + '00';\n        var expanded = '';\n        address.split('').forEach(function (c) {\n          expanded += ibanLookup[c];\n        }); // Javascript can handle integers safely up to 15 (decimal) digits\n\n        while (expanded.length >= safeDigits) {\n          var block = expanded.substring(0, safeDigits);\n          expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n        }\n\n        var checksum = String(98 - parseInt(expanded, 10) % 97);\n\n        while (checksum.length < 2) {\n          checksum = '0' + checksum;\n        }\n\n        return checksum;\n      }\n\n      ;\n\n      function getAddress(address) {\n        var result = null;\n\n        if (typeof address !== 'string') {\n          errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n            arg: 'address',\n            value: address\n          });\n        }\n\n        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n          // Missing the 0x prefix\n          if (address.substring(0, 2) !== '0x') {\n            address = '0x' + address;\n          }\n\n          result = getChecksumAddress(address); // It is a checksummed address with a bad checksum\n\n          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, {\n              arg: 'address',\n              value: address\n            });\n          } // Maybe ICAP? (we only support direct mode)\n\n        } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n          // It is an ICAP address with a bad checksum\n          if (address.substring(2, 4) !== ibanChecksum(address)) {\n            errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, {\n              arg: 'address',\n              value: address\n            });\n          }\n\n          result = new bn_js_1.default.BN(address.substring(4), 36).toString(16);\n\n          while (result.length < 40) {\n            result = '0' + result;\n          }\n\n          result = getChecksumAddress('0x' + result);\n        } else {\n          errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n            arg: 'address',\n            value: address\n          });\n        }\n\n        return result;\n      }\n\n      exports.getAddress = getAddress;\n\n      function getIcapAddress(address) {\n        var base36 = new bn_js_1.default.BN(getAddress(address).substring(2), 16).toString(36).toUpperCase();\n\n        while (base36.length < 30) {\n          base36 = '0' + base36;\n        }\n\n        return 'XE' + ibanChecksum('XE00' + base36) + base36;\n      }\n\n      exports.getIcapAddress = getIcapAddress; // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n      function getContractAddress(transaction) {\n        if (!transaction.from) {\n          throw new Error('missing from address');\n        }\n\n        var nonce = transaction.nonce;\n        return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([getAddress(transaction.from), bytes_1.stripZeros(bytes_1.hexlify(nonce))])).substring(26));\n      }\n\n      exports.getContractAddress = getContractAddress;\n    }, {\n      \"../errors\": 5,\n      \"./bytes\": 62,\n      \"./keccak256\": 69,\n      \"./rlp\": 74,\n      \"bn.js\": 9\n    }],\n    60: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      module.exports = {\n        decode: function decode(textData) {\n          textData = atob(textData);\n          var data = [];\n\n          for (var i = 0; i < textData.length; i++) {\n            data.push(textData.charCodeAt(i));\n          }\n\n          return bytes_1.arrayify(data);\n        },\n        encode: function encode(data) {\n          data = bytes_1.arrayify(data);\n          var textData = '';\n\n          for (var i = 0; i < data.length; i++) {\n            textData += String.fromCharCode(data[i]);\n          }\n\n          return btoa(textData);\n        }\n      };\n    }, {\n      \"../utils/bytes\": 62\n    }],\n    61: [function (require, module, exports) {\n      'use strict';\n\n      var __importDefault = this && this.__importDefault || function (mod) {\n        return mod && mod.__esModule ? mod : {\n          \"default\": mod\n        };\n      };\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       *  BigNumber\n       *\n       *  A wrapper around the BN.js object. We use the BN.js library\n       *  because it is used by elliptic, so it is required regardles.\n       *\n       */\n\n      var bn_js_1 = __importDefault(require(\"bn.js\"));\n\n      var bytes_1 = require(\"./bytes\");\n\n      var properties_1 = require(\"./properties\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var BN_1 = new bn_js_1.default.BN(-1);\n\n      function toHex(bn) {\n        var value = bn.toString(16);\n\n        if (value[0] === '-') {\n          if (value.length % 2 === 0) {\n            return '-0x0' + value.substring(1);\n          }\n\n          return \"-0x\" + value.substring(1);\n        }\n\n        if (value.length % 2 === 1) {\n          return '0x0' + value;\n        }\n\n        return '0x' + value;\n      }\n\n      function toBN(value) {\n        return _bnify(bigNumberify(value));\n      }\n\n      function toBigNumber(bn) {\n        return new BigNumber(toHex(bn));\n      }\n\n      function _bnify(value) {\n        var hex = value._hex;\n\n        if (hex[0] === '-') {\n          return new bn_js_1.default.BN(hex.substring(3), 16).mul(BN_1);\n        }\n\n        return new bn_js_1.default.BN(hex.substring(2), 16);\n      }\n\n      var BigNumber =\n      /** @class */\n      function () {\n        function BigNumber(value) {\n          errors.checkNew(this, BigNumber);\n          properties_1.setType(this, 'BigNumber');\n\n          if (typeof value === 'string') {\n            if (bytes_1.isHexString(value)) {\n              if (value == '0x') {\n                value = '0x0';\n              }\n\n              properties_1.defineReadOnly(this, '_hex', value);\n            } else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {\n              properties_1.defineReadOnly(this, '_hex', value);\n            } else if (value.match(/^-?[0-9]*$/)) {\n              if (value == '') {\n                value = '0';\n              }\n\n              properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n            } else {\n              errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, {\n                arg: 'value',\n                value: value\n              });\n            }\n          } else if (typeof value === 'number') {\n            if (parseInt(String(value)) !== value) {\n              errors.throwError('underflow', errors.NUMERIC_FAULT, {\n                operation: 'setValue',\n                fault: 'underflow',\n                value: value,\n                outputValue: parseInt(String(value))\n              });\n            }\n\n            try {\n              properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n            } catch (error) {\n              errors.throwError('overflow', errors.NUMERIC_FAULT, {\n                operation: 'setValue',\n                fault: 'overflow',\n                details: error.message\n              });\n            }\n          } else if (value instanceof BigNumber) {\n            properties_1.defineReadOnly(this, '_hex', value._hex);\n          } else if (value.toHexString) {\n            properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));\n          } else if (value._hex && bytes_1.isHexString(value._hex)) {\n            properties_1.defineReadOnly(this, '_hex', value._hex);\n          } else if (bytes_1.isArrayish(value)) {\n            properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));\n          } else {\n            errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n        }\n\n        BigNumber.prototype.fromTwos = function (value) {\n          return toBigNumber(_bnify(this).fromTwos(value));\n        };\n\n        BigNumber.prototype.toTwos = function (value) {\n          return toBigNumber(_bnify(this).toTwos(value));\n        };\n\n        BigNumber.prototype.add = function (other) {\n          return toBigNumber(_bnify(this).add(toBN(other)));\n        };\n\n        BigNumber.prototype.sub = function (other) {\n          return toBigNumber(_bnify(this).sub(toBN(other)));\n        };\n\n        BigNumber.prototype.div = function (other) {\n          var o = bigNumberify(other);\n\n          if (o.isZero()) {\n            errors.throwError('division by zero', errors.NUMERIC_FAULT, {\n              operation: 'divide',\n              fault: 'division by zero'\n            });\n          }\n\n          return toBigNumber(_bnify(this).div(toBN(other)));\n        };\n\n        BigNumber.prototype.mul = function (other) {\n          return toBigNumber(_bnify(this).mul(toBN(other)));\n        };\n\n        BigNumber.prototype.mod = function (other) {\n          return toBigNumber(_bnify(this).mod(toBN(other)));\n        };\n\n        BigNumber.prototype.pow = function (other) {\n          return toBigNumber(_bnify(this).pow(toBN(other)));\n        };\n\n        BigNumber.prototype.maskn = function (value) {\n          return toBigNumber(_bnify(this).maskn(value));\n        };\n\n        BigNumber.prototype.eq = function (other) {\n          return _bnify(this).eq(toBN(other));\n        };\n\n        BigNumber.prototype.lt = function (other) {\n          return _bnify(this).lt(toBN(other));\n        };\n\n        BigNumber.prototype.lte = function (other) {\n          return _bnify(this).lte(toBN(other));\n        };\n\n        BigNumber.prototype.gt = function (other) {\n          return _bnify(this).gt(toBN(other));\n        };\n\n        BigNumber.prototype.gte = function (other) {\n          return _bnify(this).gte(toBN(other));\n        };\n\n        BigNumber.prototype.isZero = function () {\n          return _bnify(this).isZero();\n        };\n\n        BigNumber.prototype.toNumber = function () {\n          try {\n            return _bnify(this).toNumber();\n          } catch (error) {\n            errors.throwError('overflow', errors.NUMERIC_FAULT, {\n              operation: 'setValue',\n              fault: 'overflow',\n              details: error.message\n            });\n          }\n\n          return null;\n        };\n\n        BigNumber.prototype.toString = function () {\n          return _bnify(this).toString(10);\n        };\n\n        BigNumber.prototype.toHexString = function () {\n          return this._hex;\n        };\n\n        BigNumber.isBigNumber = function (value) {\n          return properties_1.isType(value, 'BigNumber');\n        };\n\n        return BigNumber;\n      }();\n\n      exports.BigNumber = BigNumber;\n\n      function bigNumberify(value) {\n        if (BigNumber.isBigNumber(value)) {\n          return value;\n        }\n\n        return new BigNumber(value);\n      }\n\n      exports.bigNumberify = bigNumberify;\n    }, {\n      \"../errors\": 5,\n      \"./bytes\": 62,\n      \"./properties\": 72,\n      \"bn.js\": 9\n    }],\n    62: [function (require, module, exports) {\n      \"use strict\";\n      /**\n       *  Conversion Utilities\n       *\n       */\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\n      function isHexable(value) {\n        return !!value.toHexString;\n      }\n\n      exports.isHexable = isHexable;\n\n      function addSlice(array) {\n        if (array.slice) {\n          return array;\n        }\n\n        array.slice = function () {\n          var args = Array.prototype.slice.call(arguments);\n          return new Uint8Array(Array.prototype.slice.apply(array, args));\n        };\n\n        return array;\n      }\n\n      function isArrayish(value) {\n        if (!value || parseInt(String(value.length)) != value.length || typeof value === 'string') {\n          return false;\n        }\n\n        for (var i = 0; i < value.length; i++) {\n          var v = value[i];\n\n          if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      exports.isArrayish = isArrayish;\n\n      function arrayify(value) {\n        if (value == null) {\n          errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        }\n\n        if (isHexable(value)) {\n          value = value.toHexString();\n        }\n\n        if (typeof value === 'string') {\n          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n          if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n\n          if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n\n          value = value.substring(2);\n\n          if (value.length % 2) {\n            value = '0' + value;\n          }\n\n          var result = [];\n\n          for (var i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n          }\n\n          return addSlice(new Uint8Array(result));\n        }\n\n        if (isArrayish(value)) {\n          return addSlice(new Uint8Array(value));\n        }\n\n        errors.throwError('invalid arrayify value', null, {\n          arg: 'value',\n          value: value,\n          type: typeof value\n        });\n        return null;\n      }\n\n      exports.arrayify = arrayify;\n\n      function concat(objects) {\n        var arrays = [];\n        var length = 0;\n\n        for (var i = 0; i < objects.length; i++) {\n          var object = arrayify(objects[i]);\n          arrays.push(object);\n          length += object.length;\n        }\n\n        var result = new Uint8Array(length);\n        var offset = 0;\n\n        for (var i = 0; i < arrays.length; i++) {\n          result.set(arrays[i], offset);\n          offset += arrays[i].length;\n        }\n\n        return addSlice(result);\n      }\n\n      exports.concat = concat;\n\n      function stripZeros(value) {\n        var result = arrayify(value);\n\n        if (result.length === 0) {\n          return result;\n        } // Find the first non-zero entry\n\n\n        var start = 0;\n\n        while (result[start] === 0) {\n          start++;\n        } // If we started with zeros, strip them\n\n\n        if (start) {\n          result = result.slice(start);\n        }\n\n        return result;\n      }\n\n      exports.stripZeros = stripZeros;\n\n      function padZeros(value, length) {\n        value = arrayify(value);\n\n        if (length < value.length) {\n          throw new Error('cannot pad');\n        }\n\n        var result = new Uint8Array(length);\n        result.set(value, length - value.length);\n        return addSlice(result);\n      }\n\n      exports.padZeros = padZeros;\n\n      function isHexString(value, length) {\n        if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n          return false;\n        }\n\n        if (length && value.length !== 2 + 2 * length) {\n          return false;\n        }\n\n        return true;\n      }\n\n      exports.isHexString = isHexString;\n      var HexCharacters = '0123456789abcdef';\n\n      function hexlify(value) {\n        if (isHexable(value)) {\n          return value.toHexString();\n        }\n\n        if (typeof value === 'number') {\n          if (value < 0) {\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n\n          var hex = '';\n\n          while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n          }\n\n          if (hex.length) {\n            if (hex.length % 2) {\n              hex = '0' + hex;\n            }\n\n            return '0x' + hex;\n          }\n\n          return '0x00';\n        }\n\n        if (typeof value === 'string') {\n          var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n          if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n\n          if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n              arg: 'value',\n              value: value\n            });\n          }\n\n          if (value.length % 2) {\n            value = '0x0' + value.substring(2);\n          }\n\n          return value;\n        }\n\n        if (isArrayish(value)) {\n          var result = [];\n\n          for (var i = 0; i < value.length; i++) {\n            var v = value[i];\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n          }\n\n          return '0x' + result.join('');\n        }\n\n        errors.throwError('invalid hexlify value', null, {\n          arg: 'value',\n          value: value\n        });\n        return 'never';\n      }\n\n      exports.hexlify = hexlify;\n\n      function hexDataLength(data) {\n        if (!isHexString(data) || data.length % 2 !== 0) {\n          return null;\n        }\n\n        return (data.length - 2) / 2;\n      }\n\n      exports.hexDataLength = hexDataLength;\n\n      function hexDataSlice(data, offset, endOffset) {\n        if (!isHexString(data)) {\n          errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: data\n          });\n        }\n\n        if (data.length % 2 !== 0) {\n          errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: data\n          });\n        }\n\n        offset = 2 + 2 * offset;\n\n        if (endOffset != null) {\n          return '0x' + data.substring(offset, 2 + 2 * endOffset);\n        }\n\n        return '0x' + data.substring(offset);\n      }\n\n      exports.hexDataSlice = hexDataSlice;\n\n      function hexStripZeros(value) {\n        if (!isHexString(value)) {\n          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        }\n\n        while (value.length > 3 && value.substring(0, 3) === '0x0') {\n          value = '0x' + value.substring(3);\n        }\n\n        return value;\n      }\n\n      exports.hexStripZeros = hexStripZeros;\n\n      function hexZeroPad(value, length) {\n        if (!isHexString(value)) {\n          errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        }\n\n        while (value.length < 2 * length + 2) {\n          value = '0x0' + value.substring(2);\n        }\n\n        return value;\n      }\n\n      exports.hexZeroPad = hexZeroPad;\n\n      function isSignature(value) {\n        return value && value.r != null && value.s != null;\n      }\n\n      function splitSignature(signature) {\n        var v = 0;\n        var r = '0x',\n            s = '0x';\n\n        if (isSignature(signature)) {\n          if (signature.v == null && signature.recoveryParam == null) {\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, {\n              argument: 'signature',\n              value: signature\n            });\n          }\n\n          r = hexZeroPad(signature.r, 32);\n          s = hexZeroPad(signature.s, 32);\n          v = signature.v;\n\n          if (typeof v === 'string') {\n            v = parseInt(v, 16);\n          }\n\n          var recoveryParam = signature.recoveryParam;\n\n          if (recoveryParam == null && signature.v != null) {\n            recoveryParam = 1 - v % 2;\n          }\n\n          v = 27 + recoveryParam;\n        } else {\n          var bytes = arrayify(signature);\n\n          if (bytes.length !== 65) {\n            throw new Error('invalid signature');\n          }\n\n          r = hexlify(bytes.slice(0, 32));\n          s = hexlify(bytes.slice(32, 64));\n          v = bytes[64];\n\n          if (v !== 27 && v !== 28) {\n            v = 27 + v % 2;\n          }\n        }\n\n        return {\n          r: r,\n          s: s,\n          recoveryParam: v - 27,\n          v: v\n        };\n      }\n\n      exports.splitSignature = splitSignature;\n\n      function joinSignature(signature) {\n        signature = splitSignature(signature);\n        return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? '0x1c' : '0x1b']));\n      }\n\n      exports.joinSignature = joinSignature;\n    }, {\n      \"../errors\": 5\n    }],\n    63: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bytes_1 = require(\"./bytes\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var keccak256_1 = require(\"./keccak256\"); ///////////////////////////////\n\n\n      var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n      var Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\n      var UseSTD3ASCIIRules = new RegExp(\"^[a-z0-9.-]*$\");\n\n      function namehash(name) {\n        name = name.toLowerCase(); // Supporting the full UTF-8 space requires additional (and large)\n        // libraries, so for now we simply do not support them.\n        // It should be fairly easy in the future to support systems with\n        // String.normalize, but that is future work.\n\n        if (!name.match(UseSTD3ASCIIRules)) {\n          throw new Error('contains invalid UseSTD3ASCIIRules characters');\n        }\n\n        var result = Zeros;\n\n        while (name.length) {\n          var partition = name.match(Partition);\n          var label = utf8_1.toUtf8Bytes(partition[3]);\n          result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));\n          name = partition[2] || '';\n        }\n\n        return bytes_1.hexlify(result);\n      }\n\n      exports.namehash = namehash;\n\n      function id(text) {\n        return keccak256_1.keccak256(utf8_1.toUtf8Bytes(text));\n      }\n\n      exports.id = id;\n\n      function hashMessage(message) {\n        var payload = bytes_1.concat([utf8_1.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'), utf8_1.toUtf8Bytes(String(message.length)), typeof message === 'string' ? utf8_1.toUtf8Bytes(message) : message]);\n        return keccak256_1.keccak256(payload);\n      }\n\n      exports.hashMessage = hashMessage;\n    }, {\n      \"./bytes\": 62,\n      \"./keccak256\": 69,\n      \"./utf8\": 83\n    }],\n    64: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n      // See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n      var errors = __importStar(require(\"../errors\")); // The English language word list.\n      // For additional word lists, please see /src.tc/wordlists/\n\n\n      var lang_en_1 = require(\"../wordlists/lang-en\"); // Automatically register English?\n      //import { register } from '../wordlists/wordlist';\n      //register(langEn);\n\n\n      var bytes_1 = require(\"./bytes\");\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var pbkdf2_1 = require(\"./pbkdf2\");\n\n      var hmac_1 = require(\"./hmac\");\n\n      var properties_1 = require(\"./properties\");\n\n      var secp256k1_1 = require(\"./secp256k1\");\n\n      var sha2_1 = require(\"./sha2\");\n\n      var N = bignumber_1.bigNumberify(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\n      var MasterSecret = utf8_1.toUtf8Bytes('Bitcoin seed');\n      var HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\n      function getUpperMask(bits) {\n        return (1 << bits) - 1 << 8 - bits;\n      } // Returns a byte with the LSB bits set\n\n\n      function getLowerMask(bits) {\n        return (1 << bits) - 1;\n      }\n\n      var _constructorGuard = {};\n      exports.defaultPath = \"m/44'/60'/0'/0/0\";\n\n      var HDNode =\n      /** @class */\n      function () {\n        /**\n         *  This constructor should not be called directly.\n         *\n         *  Please use:\n         *   - fromMnemonic\n         *   - fromSeed\n         */\n        function HDNode(constructorGuard, privateKey, chainCode, index, depth, mnemonic, path) {\n          errors.checkNew(this, HDNode);\n\n          if (constructorGuard !== _constructorGuard) {\n            throw new Error('HDNode constructor cannot be called directly');\n          }\n\n          properties_1.defineReadOnly(this, 'keyPair', new secp256k1_1.KeyPair(privateKey));\n          properties_1.defineReadOnly(this, 'privateKey', this.keyPair.privateKey);\n          properties_1.defineReadOnly(this, 'publicKey', this.keyPair.compressedPublicKey);\n          properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.publicKey));\n          properties_1.defineReadOnly(this, 'chainCode', bytes_1.hexlify(chainCode));\n          properties_1.defineReadOnly(this, 'index', index);\n          properties_1.defineReadOnly(this, 'depth', depth);\n          properties_1.defineReadOnly(this, 'mnemonic', mnemonic);\n          properties_1.defineReadOnly(this, 'path', path);\n          properties_1.setType(this, 'HDNode');\n        }\n\n        HDNode.prototype._derive = function (index) {\n          // Public parent key -> public child key\n          if (!this.privateKey) {\n            if (index >= HardenedBit) {\n              throw new Error('cannot derive child of neutered node');\n            }\n\n            throw new Error('not implemented');\n          }\n\n          var data = new Uint8Array(37); // Base path\n\n          var mnemonic = this.mnemonic;\n          var path = this.path;\n\n          if (path) {\n            path += '/' + index;\n          }\n\n          if (index & HardenedBit) {\n            // Data = 0x00 || ser_256(k_par)\n            data.set(bytes_1.arrayify(this.privateKey), 1); // Hardened path\n\n            if (path) {\n              path += \"'\";\n            }\n          } else {\n            // Data = ser_p(point(k_par))\n            data.set(this.keyPair.publicKeyBytes);\n          } // Data += ser_32(i)\n\n\n          for (var i = 24; i >= 0; i -= 8) {\n            data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n          }\n\n          var I = hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, this.chainCode, data);\n          var IL = bignumber_1.bigNumberify(I.slice(0, 32));\n          var IR = I.slice(32);\n          var ki = IL.add(this.keyPair.privateKey).mod(N);\n          return new HDNode(_constructorGuard, bytes_1.arrayify(ki), IR, index, this.depth + 1, mnemonic, path);\n        };\n\n        HDNode.prototype.derivePath = function (path) {\n          var components = path.split('/');\n\n          if (components.length === 0 || components[0] === 'm' && this.depth !== 0) {\n            throw new Error('invalid path');\n          }\n\n          if (components[0] === 'm') {\n            components.shift();\n          }\n\n          var result = this;\n\n          for (var i = 0; i < components.length; i++) {\n            var component = components[i];\n\n            if (component.match(/^[0-9]+'$/)) {\n              var index = parseInt(component.substring(0, component.length - 1));\n\n              if (index >= HardenedBit) {\n                throw new Error('invalid path index - ' + component);\n              }\n\n              result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n              var index = parseInt(component);\n\n              if (index >= HardenedBit) {\n                throw new Error('invalid path index - ' + component);\n              }\n\n              result = result._derive(index);\n            } else {\n              throw new Error('invlaid path component - ' + component);\n            }\n          }\n\n          return result;\n        };\n\n        HDNode.isHDNode = function (value) {\n          return properties_1.isType(value, 'HDNode');\n        };\n\n        return HDNode;\n      }();\n\n      exports.HDNode = HDNode;\n\n      function _fromSeed(seed, mnemonic) {\n        var seedArray = bytes_1.arrayify(seed);\n\n        if (seedArray.length < 16 || seedArray.length > 64) {\n          throw new Error('invalid seed');\n        }\n\n        var I = bytes_1.arrayify(hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, I.slice(0, 32), I.slice(32), 0, 0, mnemonic, 'm');\n      }\n\n      function fromMnemonic(mnemonic, wordlist) {\n        // Check that the checksum s valid (will throw an error)\n        mnemonicToEntropy(mnemonic, wordlist);\n        return _fromSeed(mnemonicToSeed(mnemonic), mnemonic);\n      }\n\n      exports.fromMnemonic = fromMnemonic;\n\n      function fromSeed(seed) {\n        return _fromSeed(seed, null);\n      }\n\n      exports.fromSeed = fromSeed;\n\n      function mnemonicToSeed(mnemonic, password) {\n        if (!password) {\n          password = '';\n        }\n\n        var salt = utf8_1.toUtf8Bytes('mnemonic' + password, utf8_1.UnicodeNormalizationForm.NFKD);\n        return bytes_1.hexlify(pbkdf2_1.pbkdf2(utf8_1.toUtf8Bytes(mnemonic, utf8_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, 'sha512'));\n      }\n\n      exports.mnemonicToSeed = mnemonicToSeed;\n\n      function mnemonicToEntropy(mnemonic, wordlist) {\n        if (!wordlist) {\n          wordlist = lang_en_1.langEn;\n        }\n\n        var words = wordlist.split(mnemonic);\n\n        if (words.length % 3 !== 0) {\n          throw new Error('invalid mnemonic');\n        }\n\n        var entropy = bytes_1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n        var offset = 0;\n\n        for (var i = 0; i < words.length; i++) {\n          var index = wordlist.getWordIndex(words[i].normalize('NFKD'));\n\n          if (index === -1) {\n            throw new Error('invalid mnemonic');\n          }\n\n          for (var bit = 0; bit < 11; bit++) {\n            if (index & 1 << 10 - bit) {\n              entropy[offset >> 3] |= 1 << 7 - offset % 8;\n            }\n\n            offset++;\n          }\n        }\n\n        var entropyBits = 32 * words.length / 3;\n        var checksumBits = words.length / 3;\n        var checksumMask = getUpperMask(checksumBits);\n        var checksum = bytes_1.arrayify(sha2_1.sha256(entropy.slice(0, entropyBits / 8)))[0];\n        checksum &= checksumMask;\n\n        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n          throw new Error('invalid checksum');\n        }\n\n        return bytes_1.hexlify(entropy.slice(0, entropyBits / 8));\n      }\n\n      exports.mnemonicToEntropy = mnemonicToEntropy;\n\n      function entropyToMnemonic(entropy, wordlist) {\n        entropy = bytes_1.arrayify(entropy);\n\n        if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n          throw new Error('invalid entropy');\n        }\n\n        var indices = [0];\n        var remainingBits = 11;\n\n        for (var i = 0; i < entropy.length; i++) {\n          // Consume the whole byte (with still more to go)\n          if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n            remainingBits -= 8; // This byte will complete an 11-bit index\n          } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n            remainingBits += 3;\n          }\n        } // Compute the checksum bits\n\n\n        var checksum = bytes_1.arrayify(sha2_1.sha256(entropy))[0];\n        var checksumBits = entropy.length / 4;\n        checksum &= getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n        indices[indices.length - 1] <<= checksumBits;\n        indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n\n        if (!wordlist) {\n          wordlist = lang_en_1.langEn;\n        }\n\n        return wordlist.join(indices.map(function (index) {\n          return wordlist.getWord(index);\n        }));\n      }\n\n      exports.entropyToMnemonic = entropyToMnemonic;\n\n      function isValidMnemonic(mnemonic, wordlist) {\n        try {\n          mnemonicToEntropy(mnemonic, wordlist);\n          return true;\n        } catch (error) {}\n\n        return false;\n      }\n\n      exports.isValidMnemonic = isValidMnemonic;\n    }, {\n      \"../errors\": 5,\n      \"../wordlists/lang-en\": 88,\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./hmac\": 65,\n      \"./pbkdf2\": 71,\n      \"./properties\": 72,\n      \"./secp256k1\": 75,\n      \"./sha2\": 77,\n      \"./utf8\": 83\n    }],\n    65: [function (require, module, exports) {\n      \"use strict\";\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var hash = __importStar(require(\"hash.js\"));\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\n      var SupportedAlgorithms;\n\n      (function (SupportedAlgorithms) {\n        SupportedAlgorithms[\"sha256\"] = \"sha256\";\n        SupportedAlgorithms[\"sha512\"] = \"sha512\";\n      })(SupportedAlgorithms = exports.SupportedAlgorithms || (exports.SupportedAlgorithms = {}));\n\n      ;\n\n      function computeHmac(algorithm, key, data) {\n        if (!SupportedAlgorithms[algorithm]) {\n          errors.throwError('unsupported algorithm ' + algorithm, errors.UNSUPPORTED_OPERATION, {\n            operation: 'hmac',\n            algorithm: algorithm\n          });\n        }\n\n        return bytes_1.arrayify(hash.hmac(hash[algorithm], bytes_1.arrayify(key)).update(bytes_1.arrayify(data)).digest());\n      }\n\n      exports.computeHmac = computeHmac;\n    }, {\n      \"../errors\": 5,\n      \"../utils/bytes\": 62,\n      \"hash.js\": 27\n    }],\n    66: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var abi_coder_1 = require(\"./abi-coder\");\n\n      exports.AbiCoder = abi_coder_1.AbiCoder;\n      exports.defaultAbiCoder = abi_coder_1.defaultAbiCoder;\n      exports.formatSignature = abi_coder_1.formatSignature;\n      exports.formatParamType = abi_coder_1.formatParamType;\n      exports.parseSignature = abi_coder_1.parseSignature;\n      exports.parseParamType = abi_coder_1.parseParamType;\n\n      var address_1 = require(\"./address\");\n\n      exports.getAddress = address_1.getAddress;\n      exports.getContractAddress = address_1.getContractAddress;\n      exports.getIcapAddress = address_1.getIcapAddress;\n\n      var base64 = __importStar(require(\"./base64\"));\n\n      exports.base64 = base64;\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      exports.BigNumber = bignumber_1.BigNumber;\n      exports.bigNumberify = bignumber_1.bigNumberify;\n\n      var bytes_1 = require(\"./bytes\");\n\n      exports.arrayify = bytes_1.arrayify;\n      exports.concat = bytes_1.concat;\n      exports.hexDataSlice = bytes_1.hexDataSlice;\n      exports.hexDataLength = bytes_1.hexDataLength;\n      exports.hexlify = bytes_1.hexlify;\n      exports.hexStripZeros = bytes_1.hexStripZeros;\n      exports.hexZeroPad = bytes_1.hexZeroPad;\n      exports.joinSignature = bytes_1.joinSignature;\n      exports.padZeros = bytes_1.padZeros;\n      exports.splitSignature = bytes_1.splitSignature;\n      exports.stripZeros = bytes_1.stripZeros;\n\n      var hash_1 = require(\"./hash\");\n\n      exports.hashMessage = hash_1.hashMessage;\n      exports.id = hash_1.id;\n      exports.namehash = hash_1.namehash;\n\n      var HDNode = __importStar(require(\"./hdnode\"));\n\n      exports.HDNode = HDNode;\n\n      var interface_1 = require(\"./interface\");\n\n      exports.Interface = interface_1.Interface;\n\n      var json_wallet_1 = require(\"./json-wallet\");\n\n      exports.getJsonWalletAddress = json_wallet_1.getJsonWalletAddress;\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      exports.keccak256 = keccak256_1.keccak256;\n\n      var sha2_1 = require(\"./sha2\");\n\n      exports.sha256 = sha2_1.sha256;\n\n      var solidity_1 = require(\"./solidity\");\n\n      exports.solidityKeccak256 = solidity_1.keccak256;\n      exports.solidityPack = solidity_1.pack;\n      exports.soliditySha256 = solidity_1.sha256;\n\n      var random_bytes_1 = require(\"./random-bytes\");\n\n      exports.randomBytes = random_bytes_1.randomBytes;\n\n      var networks_1 = require(\"./networks\");\n\n      exports.getNetwork = networks_1.getNetwork;\n\n      var properties_1 = require(\"./properties\");\n\n      exports.checkProperties = properties_1.checkProperties;\n      exports.deepCopy = properties_1.deepCopy;\n      exports.defineReadOnly = properties_1.defineReadOnly;\n      exports.resolveProperties = properties_1.resolveProperties;\n      exports.shallowCopy = properties_1.shallowCopy;\n\n      var RLP = __importStar(require(\"./rlp\"));\n\n      exports.RLP = RLP;\n\n      var secp256k1_1 = require(\"./secp256k1\");\n\n      exports.computeAddress = secp256k1_1.computeAddress;\n      exports.computePublicKey = secp256k1_1.computePublicKey;\n      exports.recoverAddress = secp256k1_1.recoverAddress;\n      exports.recoverPublicKey = secp256k1_1.recoverPublicKey;\n      exports.verifyMessage = secp256k1_1.verifyMessage;\n\n      var signing_key_1 = require(\"./signing-key\");\n\n      exports.SigningKey = signing_key_1.SigningKey;\n\n      var transaction_1 = require(\"./transaction\");\n\n      exports.populateTransaction = transaction_1.populateTransaction;\n\n      var transaction_2 = require(\"./transaction\");\n\n      exports.parseTransaction = transaction_2.parse;\n      exports.serializeTransaction = transaction_2.serialize;\n\n      var utf8_1 = require(\"./utf8\");\n\n      exports.formatBytes32String = utf8_1.formatBytes32String;\n      exports.parseBytes32String = utf8_1.parseBytes32String;\n      exports.toUtf8Bytes = utf8_1.toUtf8Bytes;\n      exports.toUtf8String = utf8_1.toUtf8String;\n\n      var units_1 = require(\"./units\");\n\n      exports.commify = units_1.commify;\n      exports.formatEther = units_1.formatEther;\n      exports.parseEther = units_1.parseEther;\n      exports.formatUnits = units_1.formatUnits;\n      exports.parseUnits = units_1.parseUnits;\n\n      var web_1 = require(\"./web\");\n\n      exports.fetchJson = web_1.fetchJson; ////////////////////////\n      // Enums\n\n      var hmac_1 = require(\"./hmac\");\n\n      exports.SupportedAlgorithms = hmac_1.SupportedAlgorithms;\n\n      var utf8_2 = require(\"./utf8\");\n\n      exports.UnicodeNormalizationForm = utf8_2.UnicodeNormalizationForm;\n\n      var wordlist_1 = require(\"./wordlist\");\n\n      exports.Wordlist = wordlist_1.Wordlist;\n    }, {\n      \"./abi-coder\": 58,\n      \"./address\": 59,\n      \"./base64\": 60,\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./hash\": 63,\n      \"./hdnode\": 64,\n      \"./hmac\": 65,\n      \"./interface\": 67,\n      \"./json-wallet\": 68,\n      \"./keccak256\": 69,\n      \"./networks\": 70,\n      \"./properties\": 72,\n      \"./random-bytes\": 73,\n      \"./rlp\": 74,\n      \"./secp256k1\": 75,\n      \"./sha2\": 77,\n      \"./signing-key\": 79,\n      \"./solidity\": 80,\n      \"./transaction\": 81,\n      \"./units\": 82,\n      \"./utf8\": 83,\n      \"./web\": 84,\n      \"./wordlist\": 85\n    }],\n    67: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      }); // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n      var address_1 = require(\"./address\");\n\n      var abi_coder_1 = require(\"./abi-coder\");\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var hash_1 = require(\"./hash\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var properties_1 = require(\"./properties\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\n      var _Indexed =\n      /** @class */\n      function () {\n        function _Indexed(hash) {\n          properties_1.setType(this, 'Indexed');\n          properties_1.defineReadOnly(this, 'hash', hash);\n        }\n\n        return _Indexed;\n      }();\n\n      var Description =\n      /** @class */\n      function () {\n        function Description(info) {\n          properties_1.setType(this, 'Description');\n\n          for (var key in info) {\n            properties_1.defineReadOnly(this, key, properties_1.deepCopy(info[key], true));\n          }\n\n          Object.freeze(this);\n        }\n\n        return Description;\n      }();\n\n      var _DeployDescription =\n      /** @class */\n      function (_super) {\n        __extends(_DeployDescription, _super);\n\n        function _DeployDescription() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        _DeployDescription.prototype.encode = function (bytecode, params) {\n          if (!bytes_1.isHexString(bytecode)) {\n            errors.throwError('invalid contract bytecode', errors.INVALID_ARGUMENT, {\n              arg: 'bytecode',\n              value: bytecode\n            });\n          }\n\n          errors.checkArgumentCount(params.length, this.inputs.length, 'in Interface constructor');\n\n          try {\n            return bytecode + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);\n          } catch (error) {\n            errors.throwError('invalid constructor argument', errors.INVALID_ARGUMENT, {\n              arg: error.arg,\n              reason: error.reason,\n              value: error.value\n            });\n          }\n\n          return null;\n        };\n\n        return _DeployDescription;\n      }(Description);\n\n      var _FunctionDescription =\n      /** @class */\n      function (_super) {\n        __extends(_FunctionDescription, _super);\n\n        function _FunctionDescription() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        _FunctionDescription.prototype.encode = function (params) {\n          errors.checkArgumentCount(params.length, this.inputs.length, 'in interface function ' + this.name);\n\n          try {\n            return this.sighash + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);\n          } catch (error) {\n            errors.throwError('invalid input argument', errors.INVALID_ARGUMENT, {\n              arg: error.arg,\n              reason: error.reason,\n              value: error.value\n            });\n          }\n\n          return null;\n        };\n\n        _FunctionDescription.prototype.decode = function (data) {\n          try {\n            return abi_coder_1.defaultAbiCoder.decode(this.outputs, bytes_1.arrayify(data));\n          } catch (error) {\n            errors.throwError('invalid data for function output', errors.INVALID_ARGUMENT, {\n              arg: 'data',\n              errorArg: error.arg,\n              errorValue: error.value,\n              value: data,\n              reason: error.reason\n            });\n          }\n        };\n\n        return _FunctionDescription;\n      }(Description);\n\n      var Result =\n      /** @class */\n      function (_super) {\n        __extends(Result, _super);\n\n        function Result() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        return Result;\n      }(Description);\n\n      var _EventDescription =\n      /** @class */\n      function (_super) {\n        __extends(_EventDescription, _super);\n\n        function _EventDescription() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        _EventDescription.prototype.encodeTopics = function (params) {\n          var _this = this;\n\n          if (params.length > this.inputs.length) {\n            errors.throwError('too many arguments for ' + this.name, errors.UNEXPECTED_ARGUMENT, {\n              maxCount: params.length,\n              expectedCount: this.inputs.length\n            });\n          }\n\n          var topics = [];\n\n          if (!this.anonymous) {\n            topics.push(this.topic);\n          }\n\n          params.forEach(function (arg, index) {\n            var param = _this.inputs[index];\n\n            if (!param.indexed) {\n              if (arg != null) {\n                errors.throwError('cannot filter non-indexed parameters; must be null', errors.INVALID_ARGUMENT, {\n                  argument: param.name || index,\n                  value: arg\n                });\n              }\n\n              return;\n            }\n\n            if (arg == null) {\n              topics.push(null);\n            } else if (param.type === 'string') {\n              topics.push(hash_1.id(arg));\n            } else if (param.type === 'bytes') {\n              topics.push(keccak256_1.keccak256(arg));\n            } else if (param.type.indexOf('[') !== -1 || param.type.substring(0, 5) === 'tuple') {\n              errors.throwError('filtering with tuples or arrays not implemented yet; bug us on GitHub', errors.NOT_IMPLEMENTED, {\n                operation: 'filter(array|tuple)'\n              });\n            } else {\n              if (param.type === 'address') {\n                address_1.getAddress(arg);\n              }\n\n              topics.push(bytes_1.hexZeroPad(bytes_1.hexlify(arg), 32).toLowerCase());\n            }\n          }); // Trim off trailing nulls\n\n          while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n          }\n\n          return topics;\n        };\n\n        _EventDescription.prototype.decode = function (data, topics) {\n          // Strip the signature off of non-anonymous topics\n          if (topics != null && !this.anonymous) {\n            topics = topics.slice(1);\n          }\n\n          var inputIndexed = [];\n          var inputNonIndexed = [];\n          var inputDynamic = [];\n          this.inputs.forEach(function (param, index) {\n            if (param.indexed) {\n              if (param.type === 'string' || param.type === 'bytes' || param.type.indexOf('[') >= 0 || param.type.substring(0, 5) === 'tuple') {\n                inputIndexed.push({\n                  type: 'bytes32',\n                  name: param.name || ''\n                });\n                inputDynamic.push(true);\n              } else {\n                inputIndexed.push(param);\n                inputDynamic.push(false);\n              }\n            } else {\n              inputNonIndexed.push(param);\n              inputDynamic.push(false);\n            }\n          });\n\n          if (topics != null) {\n            var resultIndexed = abi_coder_1.defaultAbiCoder.decode(inputIndexed, bytes_1.concat(topics));\n          }\n\n          var resultNonIndexed = abi_coder_1.defaultAbiCoder.decode(inputNonIndexed, bytes_1.arrayify(data));\n          var result = {};\n          var nonIndexedIndex = 0,\n              indexedIndex = 0;\n          this.inputs.forEach(function (input, index) {\n            if (input.indexed) {\n              if (topics == null) {\n                result[index] = new _Indexed(null);\n              } else if (inputDynamic[index]) {\n                result[index] = new _Indexed(resultIndexed[indexedIndex++]);\n              } else {\n                result[index] = resultIndexed[indexedIndex++];\n              }\n            } else {\n              result[index] = resultNonIndexed[nonIndexedIndex++];\n            }\n\n            if (input.name) {\n              result[input.name] = result[index];\n            }\n          });\n          result.length = this.inputs.length;\n          return new Result(result);\n        };\n\n        return _EventDescription;\n      }(Description);\n\n      var _TransactionDescription =\n      /** @class */\n      function (_super) {\n        __extends(_TransactionDescription, _super);\n\n        function _TransactionDescription() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        return _TransactionDescription;\n      }(Description);\n\n      var _LogDescription =\n      /** @class */\n      function (_super) {\n        __extends(_LogDescription, _super);\n\n        function _LogDescription() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        return _LogDescription;\n      }(Description);\n\n      function addMethod(method) {\n        switch (method.type) {\n          case 'constructor':\n            {\n              var description = new _DeployDescription({\n                inputs: method.inputs,\n                payable: method.payable == null || !!method.payable\n              });\n\n              if (!this.deployFunction) {\n                this.deployFunction = description;\n              }\n\n              break;\n            }\n\n          case 'function':\n            {\n              var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');\n              var sighash = hash_1.id(signature).substring(0, 10);\n              var description = new _FunctionDescription({\n                inputs: method.inputs,\n                outputs: method.outputs,\n                gas: method.gas,\n                payable: method.payable == null || !!method.payable,\n                type: method.constant ? 'call' : 'transaction',\n                signature: signature,\n                sighash: sighash\n              }); // Expose the first (and hopefully unique named function\n\n              if (method.name && this.functions[method.name] == null) {\n                properties_1.defineReadOnly(this.functions, method.name, description);\n              } // Expose all methods by their signature, for overloaded functions\n\n\n              if (this.functions[description.signature] == null) {\n                properties_1.defineReadOnly(this.functions, description.signature, description);\n              }\n\n              break;\n            }\n\n          case 'event':\n            {\n              var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');\n              var description = new _EventDescription({\n                name: method.name,\n                signature: signature,\n                inputs: method.inputs,\n                topic: hash_1.id(signature),\n                anonymous: !!method.anonymous\n              }); // Expose the first (and hopefully unique) event name\n\n              if (method.name && this.events[method.name] == null) {\n                properties_1.defineReadOnly(this.events, method.name, description);\n              } // Expose all events by their signature, for overloaded functions\n\n\n              if (this.events[description.signature] == null) {\n                properties_1.defineReadOnly(this.events, description.signature, description);\n              }\n\n              break;\n            }\n\n          case 'fallback':\n            // Nothing to do for fallback\n            break;\n\n          default:\n            console.log('WARNING: unsupported ABI type - ' + method.type);\n            break;\n        }\n      }\n\n      var Interface =\n      /** @class */\n      function () {\n        function Interface(abi) {\n          errors.checkNew(this, Interface);\n\n          if (typeof abi === 'string') {\n            try {\n              abi = JSON.parse(abi);\n            } catch (error) {\n              errors.throwError('could not parse ABI JSON', errors.INVALID_ARGUMENT, {\n                arg: 'abi',\n                errorMessage: error.message,\n                value: abi\n              });\n            }\n\n            if (!Array.isArray(abi)) {\n              errors.throwError('invalid abi', errors.INVALID_ARGUMENT, {\n                arg: 'abi',\n                value: abi\n              });\n              return null;\n            }\n          }\n\n          properties_1.defineReadOnly(this, 'functions', {});\n          properties_1.defineReadOnly(this, 'events', {}); // Convert any supported ABI format into a standard ABI format\n\n          var _abi = [];\n          abi.forEach(function (fragment) {\n            if (typeof fragment === 'string') {\n              fragment = abi_coder_1.parseSignature(fragment);\n            } // @TODO: We should probable do some validation; create abiCoder.formatSignature for checking\n\n\n            _abi.push(fragment);\n          });\n          properties_1.defineReadOnly(this, 'abi', properties_1.deepCopy(_abi, true));\n\n          _abi.forEach(addMethod, this); // If there wasn't a constructor, create the default constructor\n\n\n          if (!this.deployFunction) {\n            addMethod.call(this, {\n              type: 'constructor',\n              inputs: []\n            });\n          }\n\n          properties_1.setType(this, 'Interface');\n        }\n\n        Interface.prototype.parseTransaction = function (tx) {\n          var sighash = tx.data.substring(0, 10).toLowerCase();\n\n          for (var name in this.functions) {\n            if (name.indexOf('(') === -1) {\n              continue;\n            }\n\n            var func = this.functions[name];\n\n            if (func.sighash === sighash) {\n              var result = abi_coder_1.defaultAbiCoder.decode(func.inputs, '0x' + tx.data.substring(10));\n              return new _TransactionDescription({\n                args: result,\n                decode: func.decode,\n                name: name,\n                signature: func.signature,\n                sighash: func.sighash,\n                value: bignumber_1.bigNumberify(tx.value || null)\n              });\n            }\n          }\n\n          return null;\n        };\n\n        Interface.prototype.parseLog = function (log) {\n          for (var name in this.events) {\n            if (name.indexOf('(') === -1) {\n              continue;\n            }\n\n            var event = this.events[name];\n\n            if (event.anonymous) {\n              continue;\n            }\n\n            if (event.topic !== log.topics[0]) {\n              continue;\n            } // @TODO: If anonymous, and the only method, and the input count matches, should we parse and return it?\n\n\n            return new _LogDescription({\n              decode: event.decode,\n              name: event.name,\n              signature: event.signature,\n              topic: event.topic,\n              values: event.decode(log.data, log.topics)\n            });\n          }\n\n          return null;\n        };\n\n        Interface.isInterface = function (value) {\n          return properties_1.isType(value, 'Interface');\n        };\n\n        Interface.isIndexed = function (value) {\n          return properties_1.isType(value, 'Indexed');\n        };\n\n        return Interface;\n      }();\n\n      exports.Interface = Interface;\n    }, {\n      \"../errors\": 5,\n      \"./abi-coder\": 58,\n      \"./address\": 59,\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./hash\": 63,\n      \"./keccak256\": 69,\n      \"./properties\": 72\n    }],\n    68: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var address_1 = require(\"./address\");\n\n      function isCrowdsaleWallet(json) {\n        try {\n          var data = JSON.parse(json);\n        } catch (error) {\n          return false;\n        }\n\n        return data.encseed && data.ethaddr;\n      }\n\n      exports.isCrowdsaleWallet = isCrowdsaleWallet;\n\n      function isSecretStorageWallet(json) {\n        try {\n          var data = JSON.parse(json);\n        } catch (error) {\n          return false;\n        }\n\n        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n          return false;\n        } // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n\n\n        return true;\n      }\n\n      exports.isSecretStorageWallet = isSecretStorageWallet; //export function isJsonWallet(json: string): boolean {\n      //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n      //}\n\n      function getJsonWalletAddress(json) {\n        if (isCrowdsaleWallet(json)) {\n          try {\n            return address_1.getAddress(JSON.parse(json).ethaddr);\n          } catch (error) {\n            return null;\n          }\n        }\n\n        if (isSecretStorageWallet(json)) {\n          try {\n            return address_1.getAddress(JSON.parse(json).address);\n          } catch (error) {\n            return null;\n          }\n        }\n\n        return null;\n      }\n\n      exports.getJsonWalletAddress = getJsonWalletAddress;\n    }, {\n      \"./address\": 59\n    }],\n    69: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var sha3 = require(\"js-sha3\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      function keccak256(data) {\n        return '0x' + sha3.keccak_256(bytes_1.arrayify(data));\n      }\n\n      exports.keccak256 = keccak256;\n    }, {\n      \"./bytes\": 62,\n      \"js-sha3\": 40\n    }],\n    70: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var homestead = {\n        chainId: 1,\n        ensAddress: \"0x314159265dd8dbb310642f98f50c066173c1259b\",\n        name: \"homestead\"\n      };\n      var ropsten = {\n        chainId: 3,\n        ensAddress: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\",\n        name: \"ropsten\"\n      };\n      var networks = {\n        unspecified: {\n          chainId: 0\n        },\n        homestead: homestead,\n        mainnet: homestead,\n        morden: {\n          chainId: 2\n        },\n        ropsten: ropsten,\n        testnet: ropsten,\n        rinkeby: {\n          chainId: 4,\n          ensAddress: \"0xe7410170f87102DF0055eB195163A03B7F2Bff4A\"\n        },\n        kovan: {\n          chainId: 42\n        },\n        classic: {\n          chainId: 61\n        },\n        classicTestnet: {\n          chainId: 62\n        }\n      };\n      /**\n       *  getNetwork\n       *\n       *  Converts a named common networks or chain ID (network ID) to a Network\n       *  and verifies a network is a valid Network..\n       */\n\n      function getNetwork(network) {\n        // No network (null) or unspecified (chainId = 0)\n        if (!network) {\n          return null;\n        }\n\n        if (typeof network === 'number') {\n          for (var name in networks) {\n            var n_1 = networks[name];\n\n            if (n_1.chainId === network) {\n              return {\n                name: name,\n                chainId: n_1.chainId,\n                ensAddress: n_1.ensAddress\n              };\n            }\n          }\n\n          return {\n            chainId: network,\n            name: 'unknown'\n          };\n        }\n\n        if (typeof network === 'string') {\n          var n_2 = networks[network];\n\n          if (n_2 == null) {\n            return null;\n          }\n\n          return {\n            name: network,\n            chainId: n_2.chainId,\n            ensAddress: n_2.ensAddress\n          };\n        }\n\n        var n = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n        if (!n) {\n          if (typeof network.chainId !== 'number') {\n            errors.throwError('invalid network chainId', errors.INVALID_ARGUMENT, {\n              arg: 'network',\n              value: network\n            });\n          }\n\n          return network;\n        } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n        if (network.chainId !== 0 && network.chainId !== n.chainId) {\n          errors.throwError('network chainId mismatch', errors.INVALID_ARGUMENT, {\n            arg: 'network',\n            value: network\n          });\n        } // Standard Network\n\n\n        return {\n          name: network.name,\n          chainId: n.chainId,\n          ensAddress: n.ensAddress\n        };\n      }\n\n      exports.getNetwork = getNetwork;\n    }, {\n      \"../errors\": 5\n    }],\n    71: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bytes_1 = require(\"../utils/bytes\");\n\n      var hmac_1 = require(\"./hmac\");\n\n      function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n        password = bytes_1.arrayify(password);\n        salt = bytes_1.arrayify(salt);\n        var hLen;\n        var l = 1;\n        var DK = new Uint8Array(keylen);\n        var block1 = new Uint8Array(salt.length + 4);\n        block1.set(salt); //salt.copy(block1, 0, 0, salt.length)\n\n        var r;\n        var T;\n\n        for (var i = 1; i <= l; i++) {\n          //block1.writeUInt32BE(i, salt.length)\n          block1[salt.length] = i >> 24 & 0xff;\n          block1[salt.length + 1] = i >> 16 & 0xff;\n          block1[salt.length + 2] = i >> 8 & 0xff;\n          block1[salt.length + 3] = i & 0xff; //var U = createHmac(password).update(block1).digest();\n\n          var U = hmac_1.computeHmac(hashAlgorithm, password, block1);\n\n          if (!hLen) {\n            hLen = U.length;\n            T = new Uint8Array(hLen);\n            l = Math.ceil(keylen / hLen);\n            r = keylen - (l - 1) * hLen;\n          } //U.copy(T, 0, 0, hLen)\n\n\n          T.set(U);\n\n          for (var j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = hmac_1.computeHmac(hashAlgorithm, password, U);\n\n            for (var k = 0; k < hLen; k++) {\n              T[k] ^= U[k];\n            }\n          }\n\n          var destPos = (i - 1) * hLen;\n          var len = i === l ? r : hLen; //T.copy(DK, destPos, 0, len)\n\n          DK.set(bytes_1.arrayify(T).slice(0, len), destPos);\n        }\n\n        return bytes_1.arrayify(DK);\n      }\n\n      exports.pbkdf2 = pbkdf2;\n    }, {\n      \"../utils/bytes\": 62,\n      \"./hmac\": 65\n    }],\n    72: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var errors = __importStar(require(\"../errors\"));\n\n      function defineReadOnly(object, name, value) {\n        Object.defineProperty(object, name, {\n          enumerable: true,\n          value: value,\n          writable: false\n        });\n      }\n\n      exports.defineReadOnly = defineReadOnly; // There are some issues with instanceof with npm link, so we use this\n      // to ensure types are what we expect.\n\n      function setType(object, type) {\n        Object.defineProperty(object, '_ethersType', {\n          configurable: false,\n          value: type,\n          writable: false\n        });\n      }\n\n      exports.setType = setType;\n\n      function isType(object, type) {\n        return object && object._ethersType === type;\n      }\n\n      exports.isType = isType;\n\n      function resolveProperties(object) {\n        var result = {};\n        var promises = [];\n        Object.keys(object).forEach(function (key) {\n          var value = object[key];\n\n          if (value instanceof Promise) {\n            promises.push(value.then(function (value) {\n              result[key] = value;\n              return null;\n            }));\n          } else {\n            result[key] = value;\n          }\n        });\n        return Promise.all(promises).then(function () {\n          return result;\n        });\n      }\n\n      exports.resolveProperties = resolveProperties;\n\n      function checkProperties(object, properties) {\n        if (!object || typeof object !== 'object') {\n          errors.throwError('invalid object', errors.INVALID_ARGUMENT, {\n            argument: 'object',\n            value: object\n          });\n        }\n\n        Object.keys(object).forEach(function (key) {\n          if (!properties[key]) {\n            errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {\n              argument: 'transaction',\n              value: object,\n              key: key\n            });\n          }\n        });\n      }\n\n      exports.checkProperties = checkProperties;\n\n      function shallowCopy(object) {\n        var result = {};\n\n        for (var key in object) {\n          result[key] = object[key];\n        }\n\n        return result;\n      }\n\n      exports.shallowCopy = shallowCopy;\n      var opaque = {\n        boolean: true,\n        number: true,\n        string: true\n      };\n\n      function deepCopy(object, frozen) {\n        // Opaque objects are not mutable, so safe to copy by assignment\n        if (object === undefined || object === null || opaque[typeof object]) {\n          return object;\n        } // Arrays are mutable, so we need to create a copy\n\n\n        if (Array.isArray(object)) {\n          var result = object.map(function (item) {\n            return deepCopy(item, frozen);\n          });\n\n          if (frozen) {\n            Object.freeze(result);\n          }\n\n          return result;\n        }\n\n        if (typeof object === 'object') {\n          // Some internal objects, which are already immutable\n          if (isType(object, 'BigNumber')) {\n            return object;\n          }\n\n          if (isType(object, 'Description')) {\n            return object;\n          }\n\n          if (isType(object, 'Indexed')) {\n            return object;\n          }\n\n          var result = {};\n\n          for (var key in object) {\n            var value = object[key];\n\n            if (value === undefined) {\n              continue;\n            }\n\n            defineReadOnly(result, key, deepCopy(value, frozen));\n          }\n\n          if (frozen) {\n            Object.freeze(result);\n          }\n\n          return result;\n        } // The function type is also immutable, so safe to copy by assignment\n\n\n        if (typeof object === 'function') {\n          return object;\n        }\n\n        throw new Error('Cannot deepCopy ' + typeof object);\n      }\n\n      exports.deepCopy = deepCopy; // See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js\n\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        ctor.prototype = Object.create(superCtor.prototype, {\n          constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n      }\n\n      function inheritable(parent) {\n        return function (child) {\n          inherits(child, parent);\n          defineReadOnly(child, 'inherits', inheritable(child));\n        };\n      }\n\n      exports.inheritable = inheritable;\n    }, {\n      \"../errors\": 5\n    }],\n    73: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n\n        var bytes_1 = require(\"../utils/bytes\");\n\n        var properties_1 = require(\"../utils/properties\");\n\n        var crypto = global.crypto || global.msCrypto;\n\n        if (!crypto || !crypto.getRandomValues) {\n          console.log('WARNING: Missing strong random number source; using weak randomBytes');\n          crypto = {\n            getRandomValues: function getRandomValues(buffer) {\n              for (var round = 0; round < 20; round++) {\n                for (var i = 0; i < buffer.length; i++) {\n                  if (round) {\n                    buffer[i] ^= Math.trunc(256 * Math.random());\n                  } else {\n                    buffer[i] = Math.trunc(256 * Math.random());\n                  }\n                }\n              }\n\n              return buffer;\n            },\n            _weakCrypto: true\n          };\n        }\n\n        function randomBytes(length) {\n          if (length <= 0 || length > 1024 || parseInt(String(length)) != length) {\n            throw new Error('invalid length');\n          }\n\n          var result = new Uint8Array(length);\n          crypto.getRandomValues(result);\n          return bytes_1.arrayify(result);\n        }\n\n        exports.randomBytes = randomBytes;\n        ;\n\n        if (crypto._weakCrypto === true) {\n          properties_1.defineReadOnly(randomBytes, '_weakCrypto', true);\n        }\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"../utils/bytes\": 62,\n      \"../utils/properties\": 72\n    }],\n    74: [function (require, module, exports) {\n      \"use strict\"; //See: https://github.com/ethereum/wiki/wiki/RLP\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bytes_1 = require(\"./bytes\");\n\n      function arrayifyInteger(value) {\n        var result = [];\n\n        while (value) {\n          result.unshift(value & 0xff);\n          value >>= 8;\n        }\n\n        return result;\n      }\n\n      function unarrayifyInteger(data, offset, length) {\n        var result = 0;\n\n        for (var i = 0; i < length; i++) {\n          result = result * 256 + data[offset + i];\n        }\n\n        return result;\n      }\n\n      function _encode(object) {\n        if (Array.isArray(object)) {\n          var payload = [];\n          object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n          });\n\n          if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n          }\n\n          var length = arrayifyInteger(payload.length);\n          length.unshift(0xf7 + length.length);\n          return length.concat(payload);\n        }\n\n        var data = Array.prototype.slice.call(bytes_1.arrayify(object));\n\n        if (data.length === 1 && data[0] <= 0x7f) {\n          return data;\n        } else if (data.length <= 55) {\n          data.unshift(0x80 + data.length);\n          return data;\n        }\n\n        var length = arrayifyInteger(data.length);\n        length.unshift(0xb7 + length.length);\n        return length.concat(data);\n      }\n\n      function encode(object) {\n        return bytes_1.hexlify(_encode(object));\n      }\n\n      exports.encode = encode;\n\n      function _decodeChildren(data, offset, childOffset, length) {\n        var result = [];\n\n        while (childOffset < offset + 1 + length) {\n          var decoded = _decode(data, childOffset);\n\n          result.push(decoded.result);\n          childOffset += decoded.consumed;\n\n          if (childOffset > offset + 1 + length) {\n            throw new Error('invalid rlp');\n          }\n        }\n\n        return {\n          consumed: 1 + length,\n          result: result\n        };\n      } // returns { consumed: number, result: Object }\n\n\n      function _decode(data, offset) {\n        if (data.length === 0) {\n          throw new Error('invalid rlp data');\n        } // Array with extra length prefix\n\n\n        if (data[offset] >= 0xf8) {\n          var lengthLength = data[offset] - 0xf7;\n\n          if (offset + 1 + lengthLength > data.length) {\n            throw new Error('too short');\n          }\n\n          var length = unarrayifyInteger(data, offset + 1, lengthLength);\n\n          if (offset + 1 + lengthLength + length > data.length) {\n            throw new Error('to short');\n          }\n\n          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n        } else if (data[offset] >= 0xc0) {\n          var length = data[offset] - 0xc0;\n\n          if (offset + 1 + length > data.length) {\n            throw new Error('invalid rlp data');\n          }\n\n          return _decodeChildren(data, offset, offset + 1, length);\n        } else if (data[offset] >= 0xb8) {\n          var lengthLength = data[offset] - 0xb7;\n\n          if (offset + 1 + lengthLength > data.length) {\n            throw new Error('invalid rlp data');\n          }\n\n          var length = unarrayifyInteger(data, offset + 1, lengthLength);\n\n          if (offset + 1 + lengthLength + length > data.length) {\n            throw new Error('invalid rlp data');\n          }\n\n          var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n          return {\n            consumed: 1 + lengthLength + length,\n            result: result\n          };\n        } else if (data[offset] >= 0x80) {\n          var length = data[offset] - 0x80;\n\n          if (offset + 1 + length > data.length) {\n            throw new Error('invlaid rlp data');\n          }\n\n          var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));\n          return {\n            consumed: 1 + length,\n            result: result\n          };\n        }\n\n        return {\n          consumed: 1,\n          result: bytes_1.hexlify(data[offset])\n        };\n      }\n\n      function decode(data) {\n        var bytes = bytes_1.arrayify(data);\n\n        var decoded = _decode(bytes, 0);\n\n        if (decoded.consumed !== bytes.length) {\n          throw new Error('invalid rlp data');\n        }\n\n        return decoded.result;\n      }\n\n      exports.decode = decode;\n    }, {\n      \"./bytes\": 62\n    }],\n    75: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var elliptic_1 = require(\"elliptic\");\n\n      var address_1 = require(\"./address\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var hash_1 = require(\"./hash\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var properties_1 = require(\"./properties\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\n      var _curve = null;\n\n      function getCurve() {\n        if (!_curve) {\n          _curve = new elliptic_1.ec('secp256k1');\n        }\n\n        return _curve;\n      }\n\n      var KeyPair =\n      /** @class */\n      function () {\n        function KeyPair(privateKey) {\n          var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(privateKey));\n          properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(keyPair.priv.toArray('be', 32)));\n          properties_1.defineReadOnly(this, 'publicKey', '0x' + keyPair.getPublic(false, 'hex'));\n          properties_1.defineReadOnly(this, 'compressedPublicKey', '0x' + keyPair.getPublic(true, 'hex'));\n          properties_1.defineReadOnly(this, 'publicKeyBytes', keyPair.getPublic().encode(null, true));\n        }\n\n        KeyPair.prototype.sign = function (digest) {\n          var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n          var signature = keyPair.sign(bytes_1.arrayify(digest), {\n            canonical: true\n          });\n          return {\n            recoveryParam: signature.recoveryParam,\n            r: bytes_1.hexZeroPad('0x' + signature.r.toString(16), 32),\n            s: bytes_1.hexZeroPad('0x' + signature.s.toString(16), 32),\n            v: 27 + signature.recoveryParam\n          };\n        };\n\n        KeyPair.prototype.computeSharedSecret = function (otherKey) {\n          var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n          var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));\n          return bytes_1.hexZeroPad('0x' + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n        };\n\n        return KeyPair;\n      }();\n\n      exports.KeyPair = KeyPair;\n\n      function computePublicKey(key, compressed) {\n        var bytes = bytes_1.arrayify(key);\n\n        if (bytes.length === 32) {\n          var keyPair = new KeyPair(bytes);\n\n          if (compressed) {\n            return keyPair.compressedPublicKey;\n          }\n\n          return keyPair.publicKey;\n        } else if (bytes.length === 33) {\n          if (compressed) {\n            return bytes_1.hexlify(bytes);\n          }\n\n          return '0x' + getCurve().keyFromPublic(bytes).getPublic(false, 'hex');\n        } else if (bytes.length === 65) {\n          if (!compressed) {\n            return bytes_1.hexlify(bytes);\n          }\n\n          return '0x' + getCurve().keyFromPublic(bytes).getPublic(true, 'hex');\n        }\n\n        errors.throwError('invalid public or private key', errors.INVALID_ARGUMENT, {\n          arg: 'key',\n          value: '[REDACTED]'\n        });\n        return null;\n      }\n\n      exports.computePublicKey = computePublicKey;\n\n      function computeAddress(key) {\n        // Strip off the leading \"0x04\"\n        var publicKey = '0x' + computePublicKey(key).slice(4);\n        return address_1.getAddress('0x' + keccak256_1.keccak256(publicKey).substring(26));\n      }\n\n      exports.computeAddress = computeAddress;\n\n      function recoverPublicKey(digest, signature) {\n        var sig = bytes_1.splitSignature(signature);\n        var rs = {\n          r: bytes_1.arrayify(sig.r),\n          s: bytes_1.arrayify(sig.s)\n        };\n        return '0x' + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode('hex', false);\n      }\n\n      exports.recoverPublicKey = recoverPublicKey;\n\n      function recoverAddress(digest, signature) {\n        return computeAddress(recoverPublicKey(bytes_1.arrayify(digest), signature));\n      }\n\n      exports.recoverAddress = recoverAddress;\n\n      function verifyMessage(message, signature) {\n        return recoverAddress(hash_1.hashMessage(message), signature);\n      }\n\n      exports.verifyMessage = verifyMessage;\n    }, {\n      \"../errors\": 5,\n      \"./address\": 59,\n      \"./bytes\": 62,\n      \"./hash\": 63,\n      \"./keccak256\": 69,\n      \"./properties\": 72,\n      \"elliptic\": 12\n    }],\n    76: [function (require, module, exports) {\n      'use strict';\n\n      var __importDefault = this && this.__importDefault || function (mod) {\n        return mod && mod.__esModule ? mod : {\n          \"default\": mod\n        };\n      };\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var aes_js_1 = __importDefault(require(\"aes-js\"));\n\n      var scrypt_js_1 = __importDefault(require(\"scrypt-js\"));\n\n      var uuid_1 = __importDefault(require(\"uuid\"));\n\n      var signing_key_1 = require(\"./signing-key\");\n\n      var HDNode = __importStar(require(\"./hdnode\"));\n\n      var address_1 = require(\"./address\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var pbkdf2_1 = require(\"./pbkdf2\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var random_bytes_1 = require(\"./random-bytes\");\n\n      function looseArrayify(hexString) {\n        if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n          hexString = '0x' + hexString;\n        }\n\n        return bytes_1.arrayify(hexString);\n      }\n\n      function zpad(value, length) {\n        value = String(value);\n\n        while (value.length < length) {\n          value = '0' + value;\n        }\n\n        return value;\n      }\n\n      function getPassword(password) {\n        if (typeof password === 'string') {\n          return utf8_1.toUtf8Bytes(password, utf8_1.UnicodeNormalizationForm.NFKC);\n        }\n\n        return bytes_1.arrayify(password);\n      } // Search an Object and its children recursively, caselessly.\n\n\n      function searchPath(object, path) {\n        var currentChild = object;\n        var comps = path.toLowerCase().split('/');\n\n        for (var i = 0; i < comps.length; i++) {\n          // Search for a child object with a case-insensitive matching key\n          var matchingChild = null;\n\n          for (var key in currentChild) {\n            if (key.toLowerCase() === comps[i]) {\n              matchingChild = currentChild[key];\n              break;\n            }\n          } // Didn't find one. :'(\n\n\n          if (matchingChild === null) {\n            return null;\n          } // Now check this child...\n\n\n          currentChild = matchingChild;\n        }\n\n        return currentChild;\n      } // @TODO: Make a type for string or arrayish\n      // See: https://github.com/ethereum/pyethsaletool\n\n\n      function decryptCrowdsale(json, password) {\n        var data = JSON.parse(json);\n        password = getPassword(password); // Ethereum Address\n\n        var ethaddr = address_1.getAddress(searchPath(data, 'ethaddr')); // Encrypted Seed\n\n        var encseed = looseArrayify(searchPath(data, 'encseed'));\n\n        if (!encseed || encseed.length % 16 !== 0) {\n          throw new Error('invalid encseed');\n        }\n\n        var key = pbkdf2_1.pbkdf2(password, password, 2000, 32, 'sha256').slice(0, 16);\n        var iv = encseed.slice(0, 16);\n        var encryptedSeed = encseed.slice(16); // Decrypt the seed\n\n        var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n        var seed = bytes_1.arrayify(aesCbc.decrypt(encryptedSeed));\n        seed = aes_js_1.default.padding.pkcs7.strip(seed); // This wallet format is weird... Convert the binary encoded hex to a string.\n\n        var seedHex = '';\n\n        for (var i = 0; i < seed.length; i++) {\n          seedHex += String.fromCharCode(seed[i]);\n        }\n\n        var seedHexBytes = utf8_1.toUtf8Bytes(seedHex);\n        var signingKey = new signing_key_1.SigningKey(keccak256_1.keccak256(seedHexBytes));\n\n        if (signingKey.address !== ethaddr) {\n          throw new Error('corrupt crowdsale wallet');\n        }\n\n        return signingKey;\n      }\n\n      exports.decryptCrowdsale = decryptCrowdsale; //@TODO: string or arrayish\n\n      function decrypt(json, password, progressCallback) {\n        var data = JSON.parse(json);\n        var passwordBytes = getPassword(password);\n\n        var decrypt = function decrypt(key, ciphertext) {\n          var cipher = searchPath(data, 'crypto/cipher');\n\n          if (cipher === 'aes-128-ctr') {\n            var iv = looseArrayify(searchPath(data, 'crypto/cipherparams/iv'));\n            var counter = new aes_js_1.default.Counter(iv);\n            var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);\n            return bytes_1.arrayify(aesCtr.decrypt(ciphertext));\n          }\n\n          return null;\n        };\n\n        var computeMAC = function computeMAC(derivedHalf, ciphertext) {\n          return keccak256_1.keccak256(bytes_1.concat([derivedHalf, ciphertext]));\n        };\n\n        var getSigningKey = function getSigningKey(key, reject) {\n          var ciphertext = looseArrayify(searchPath(data, 'crypto/ciphertext'));\n          var computedMAC = bytes_1.hexlify(computeMAC(key.slice(16, 32), ciphertext)).substring(2);\n\n          if (computedMAC !== searchPath(data, 'crypto/mac').toLowerCase()) {\n            reject(new Error('invalid password'));\n            return null;\n          }\n\n          var privateKey = decrypt(key.slice(0, 16), ciphertext);\n          var mnemonicKey = key.slice(32, 64);\n\n          if (!privateKey) {\n            reject(new Error('unsupported cipher'));\n            return null;\n          }\n\n          var signingKey = new signing_key_1.SigningKey(privateKey);\n\n          if (signingKey.address !== address_1.getAddress(data.address)) {\n            reject(new Error('address mismatch'));\n            return null;\n          } // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\n\n          if (searchPath(data, 'x-ethers/version') === '0.1') {\n            var mnemonicCiphertext = looseArrayify(searchPath(data, 'x-ethers/mnemonicCiphertext'));\n            var mnemonicIv = looseArrayify(searchPath(data, 'x-ethers/mnemonicCounter'));\n            var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n            var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            var path = searchPath(data, 'x-ethers/path') || HDNode.defaultPath;\n            var entropy = bytes_1.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n            var mnemonic = HDNode.entropyToMnemonic(entropy);\n            var node = HDNode.fromMnemonic(mnemonic).derivePath(path);\n\n            if (node.privateKey != bytes_1.hexlify(privateKey)) {\n              reject(new Error('mnemonic mismatch'));\n              return null;\n            }\n\n            signingKey = new signing_key_1.SigningKey(node);\n          }\n\n          return signingKey;\n        };\n\n        return new Promise(function (resolve, reject) {\n          var kdf = searchPath(data, 'crypto/kdf');\n\n          if (kdf && typeof kdf === 'string') {\n            if (kdf.toLowerCase() === 'scrypt') {\n              var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));\n              var N = parseInt(searchPath(data, 'crypto/kdfparams/n'));\n              var r = parseInt(searchPath(data, 'crypto/kdfparams/r'));\n              var p = parseInt(searchPath(data, 'crypto/kdfparams/p'));\n\n              if (!N || !r || !p) {\n                reject(new Error('unsupported key-derivation function parameters'));\n                return;\n              } // Make sure N is a power of 2\n\n\n              if ((N & N - 1) !== 0) {\n                reject(new Error('unsupported key-derivation function parameter value for N'));\n                return;\n              }\n\n              var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));\n\n              if (dkLen !== 32) {\n                reject(new Error('unsupported key-derivation derived-key length'));\n                return;\n              }\n\n              if (progressCallback) {\n                progressCallback(0);\n              }\n\n              scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {\n                if (error) {\n                  error.progress = progress;\n                  reject(error);\n                } else if (key) {\n                  key = bytes_1.arrayify(key);\n                  var signingKey = getSigningKey(key, reject);\n\n                  if (!signingKey) {\n                    return;\n                  }\n\n                  if (progressCallback) {\n                    progressCallback(1);\n                  }\n\n                  resolve(signingKey);\n                } else if (progressCallback) {\n                  return progressCallback(progress);\n                }\n              });\n            } else if (kdf.toLowerCase() === 'pbkdf2') {\n              var salt = looseArrayify(searchPath(data, 'crypto/kdfparams/salt'));\n              var prfFunc = null;\n              var prf = searchPath(data, 'crypto/kdfparams/prf');\n\n              if (prf === 'hmac-sha256') {\n                prfFunc = 'sha256';\n              } else if (prf === 'hmac-sha512') {\n                prfFunc = 'sha512';\n              } else {\n                reject(new Error('unsupported prf'));\n                return;\n              }\n\n              var c = parseInt(searchPath(data, 'crypto/kdfparams/c'));\n              var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));\n\n              if (dkLen !== 32) {\n                reject(new Error('unsupported key-derivation derived-key length'));\n                return;\n              }\n\n              var key = pbkdf2_1.pbkdf2(passwordBytes, salt, c, dkLen, prfFunc);\n              var signingKey = getSigningKey(key, reject);\n\n              if (!signingKey) {\n                return;\n              }\n\n              resolve(signingKey);\n            } else {\n              reject(new Error('unsupported key-derivation function'));\n            }\n          } else {\n            reject(new Error('unsupported key-derivation function'));\n          }\n        });\n      }\n\n      exports.decrypt = decrypt;\n\n      function encrypt(privateKey, password, options, progressCallback) {\n        // the options are optional, so adjust the call as needed\n        if (typeof options === 'function' && !progressCallback) {\n          progressCallback = options;\n          options = {};\n        }\n\n        if (!options) {\n          options = {};\n        } // Check the private key\n\n\n        var privateKeyBytes = null;\n\n        if (signing_key_1.SigningKey.isSigningKey(privateKey)) {\n          privateKeyBytes = bytes_1.arrayify(privateKey.privateKey);\n        } else {\n          privateKeyBytes = bytes_1.arrayify(privateKey);\n        }\n\n        if (privateKeyBytes.length !== 32) {\n          throw new Error('invalid private key');\n        }\n\n        var passwordBytes = getPassword(password);\n        var entropy = null;\n\n        if (options.entropy) {\n          entropy = bytes_1.arrayify(options.entropy);\n        }\n\n        if (options.mnemonic) {\n          if (entropy) {\n            if (HDNode.entropyToMnemonic(entropy) !== options.mnemonic) {\n              throw new Error('entropy and mnemonic mismatch');\n            }\n          } else {\n            entropy = bytes_1.arrayify(HDNode.mnemonicToEntropy(options.mnemonic));\n          }\n        }\n\n        var path = options.path;\n\n        if (entropy && !path) {\n          path = HDNode.defaultPath;\n        }\n\n        var client = options.client;\n\n        if (!client) {\n          client = \"ethers.js\";\n        } // Check/generate the salt\n\n\n        var salt = null;\n\n        if (options.salt) {\n          salt = bytes_1.arrayify(options.salt);\n        } else {\n          salt = random_bytes_1.randomBytes(32);\n          ;\n        } // Override initialization vector\n\n\n        var iv = null;\n\n        if (options.iv) {\n          iv = bytes_1.arrayify(options.iv);\n\n          if (iv.length !== 16) {\n            throw new Error('invalid iv');\n          }\n        } else {\n          iv = random_bytes_1.randomBytes(16);\n        } // Override the uuid\n\n\n        var uuidRandom = null;\n\n        if (options.uuid) {\n          uuidRandom = bytes_1.arrayify(options.uuid);\n\n          if (uuidRandom.length !== 16) {\n            throw new Error('invalid uuid');\n          }\n        } else {\n          uuidRandom = random_bytes_1.randomBytes(16);\n        } // Override the scrypt password-based key derivation function parameters\n\n\n        var N = 1 << 17,\n            r = 8,\n            p = 1;\n\n        if (options.scrypt) {\n          if (options.scrypt.N) {\n            N = options.scrypt.N;\n          }\n\n          if (options.scrypt.r) {\n            r = options.scrypt.r;\n          }\n\n          if (options.scrypt.p) {\n            p = options.scrypt.p;\n          }\n        }\n\n        return new Promise(function (resolve, reject) {\n          if (progressCallback) {\n            progressCallback(0);\n          } // We take 64 bytes:\n          //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n          //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\n\n          scrypt_js_1.default(passwordBytes, salt, N, r, p, 64, function (error, progress, key) {\n            if (error) {\n              error.progress = progress;\n              reject(error);\n            } else if (key) {\n              key = bytes_1.arrayify(key); // This will be used to encrypt the wallet (as per Web3 secret storage)\n\n              var derivedKey = key.slice(0, 16);\n              var macPrefix = key.slice(16, 32); // This will be used to encrypt the mnemonic phrase (if any)\n\n              var mnemonicKey = key.slice(32, 64); // Get the address for this private key\n\n              var address = new signing_key_1.SigningKey(privateKeyBytes).address; // Encrypt the private key\n\n              var counter = new aes_js_1.default.Counter(iv);\n              var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);\n              var ciphertext = bytes_1.arrayify(aesCtr.encrypt(privateKeyBytes)); // Compute the message authentication code, used to check the password\n\n              var mac = keccak256_1.keccak256(bytes_1.concat([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\n              var data = {\n                address: address.substring(2).toLowerCase(),\n                id: uuid_1.default.v4({\n                  random: uuidRandom\n                }),\n                version: 3,\n                Crypto: {\n                  cipher: 'aes-128-ctr',\n                  cipherparams: {\n                    iv: bytes_1.hexlify(iv).substring(2)\n                  },\n                  ciphertext: bytes_1.hexlify(ciphertext).substring(2),\n                  kdf: 'scrypt',\n                  kdfparams: {\n                    salt: bytes_1.hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                  },\n                  mac: mac.substring(2)\n                }\n              }; // If we have a mnemonic, encrypt it into the JSON wallet\n\n              if (entropy) {\n                var mnemonicIv = random_bytes_1.randomBytes(16);\n                var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n                var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n                var mnemonicCiphertext = bytes_1.arrayify(mnemonicAesCtr.encrypt(entropy));\n                var now = new Date();\n                var timestamp = now.getUTCFullYear() + '-' + zpad(now.getUTCMonth() + 1, 2) + '-' + zpad(now.getUTCDate(), 2) + 'T' + zpad(now.getUTCHours(), 2) + '-' + zpad(now.getUTCMinutes(), 2) + '-' + zpad(now.getUTCSeconds(), 2) + '.0Z';\n                data['x-ethers'] = {\n                  client: client,\n                  gethFilename: 'UTC--' + timestamp + '--' + data.address,\n                  mnemonicCounter: bytes_1.hexlify(mnemonicIv).substring(2),\n                  mnemonicCiphertext: bytes_1.hexlify(mnemonicCiphertext).substring(2),\n                  version: \"0.1\"\n                };\n              }\n\n              if (progressCallback) {\n                progressCallback(1);\n              }\n\n              resolve(JSON.stringify(data));\n            } else if (progressCallback) {\n              return progressCallback(progress);\n            }\n          });\n        });\n      }\n\n      exports.encrypt = encrypt;\n    }, {\n      \"./address\": 59,\n      \"./bytes\": 62,\n      \"./hdnode\": 64,\n      \"./keccak256\": 69,\n      \"./pbkdf2\": 71,\n      \"./random-bytes\": 73,\n      \"./signing-key\": 79,\n      \"./utf8\": 83,\n      \"aes-js\": 8,\n      \"scrypt-js\": 43,\n      \"uuid\": 47\n    }],\n    77: [function (require, module, exports) {\n      'use strict';\n\n      var __importDefault = this && this.__importDefault || function (mod) {\n        return mod && mod.__esModule ? mod : {\n          \"default\": mod\n        };\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var hash_js_1 = __importDefault(require(\"hash.js\"));\n\n      var bytes_1 = require(\"./bytes\");\n\n      function sha256(data) {\n        return '0x' + hash_js_1.default.sha256().update(bytes_1.arrayify(data)).digest('hex');\n      }\n\n      exports.sha256 = sha256;\n\n      function sha512(data) {\n        return '0x' + hash_js_1.default.sha512().update(bytes_1.arrayify(data)).digest('hex');\n      }\n\n      exports.sha512 = sha512;\n    }, {\n      \"./bytes\": 62,\n      \"hash.js\": 27\n    }],\n    78: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      require('setimmediate');\n\n      exports.platform = \"browser\";\n    }, {\n      \"setimmediate\": 44\n    }],\n    79: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      /**\n       *  SigningKey\n       *\n       *\n       */\n\n      var hdnode_1 = require(\"./hdnode\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var properties_1 = require(\"./properties\");\n\n      var secp256k1_1 = require(\"./secp256k1\");\n\n      var errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\n      var SigningKey =\n      /** @class */\n      function () {\n        function SigningKey(privateKey) {\n          errors.checkNew(this, SigningKey);\n          var privateKeyBytes = null;\n\n          if (hdnode_1.HDNode.isHDNode(privateKey)) {\n            properties_1.defineReadOnly(this, 'mnemonic', privateKey.mnemonic);\n            properties_1.defineReadOnly(this, 'path', privateKey.path);\n            privateKeyBytes = bytes_1.arrayify(privateKey.privateKey);\n          } else {\n            // A lot of common tools do not prefix private keys with a 0x\n            if (typeof privateKey === 'string' && privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n              privateKey = '0x' + privateKey;\n            }\n\n            privateKeyBytes = bytes_1.arrayify(privateKey);\n          }\n\n          try {\n            if (privateKeyBytes.length !== 32) {\n              errors.throwError('exactly 32 bytes required', errors.INVALID_ARGUMENT, {\n                arg: 'privateKey',\n                value: '[REDACTED]'\n              });\n            }\n          } catch (error) {\n            var params = {\n              arg: 'privateKey',\n              reason: error.reason,\n              value: '[REDACTED]'\n            };\n\n            if (error.value) {\n              if (typeof error.value.length === 'number') {\n                params.length = error.value.length;\n              }\n\n              params.type = typeof error.value;\n            }\n\n            errors.throwError('invalid private key', error.code, params);\n          }\n\n          properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(privateKeyBytes));\n          properties_1.defineReadOnly(this, 'keyPair', new secp256k1_1.KeyPair(privateKeyBytes));\n          properties_1.defineReadOnly(this, 'publicKey', this.keyPair.publicKey);\n          properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.keyPair.publicKey));\n          properties_1.setType(this, 'SigningKey');\n        }\n\n        SigningKey.prototype.signDigest = function (digest) {\n          return this.keyPair.sign(digest);\n        };\n\n        SigningKey.prototype.computeSharedSecret = function (key) {\n          return this.keyPair.computeSharedSecret(bytes_1.arrayify(key));\n        };\n\n        SigningKey.isSigningKey = function (value) {\n          return properties_1.isType(value, 'SigningKey');\n        };\n\n        return SigningKey;\n      }();\n\n      exports.SigningKey = SigningKey;\n    }, {\n      \"../errors\": 5,\n      \"./bytes\": 62,\n      \"./hdnode\": 64,\n      \"./properties\": 72,\n      \"./secp256k1\": 75\n    }],\n    80: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var sha2_1 = require(\"./sha2\");\n\n      var regexBytes = new RegExp(\"^bytes([0-9]+)$\");\n      var regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\n      var regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n      var Zeros = '0000000000000000000000000000000000000000000000000000000000000000';\n\n      function _pack(type, value, isArray) {\n        switch (type) {\n          case 'address':\n            if (isArray) {\n              return bytes_1.padZeros(value, 32);\n            }\n\n            return bytes_1.arrayify(value);\n\n          case 'string':\n            return utf8_1.toUtf8Bytes(value);\n\n          case 'bytes':\n            return bytes_1.arrayify(value);\n\n          case 'bool':\n            value = value ? '0x01' : '0x00';\n\n            if (isArray) {\n              return bytes_1.padZeros(value, 32);\n            }\n\n            return bytes_1.arrayify(value);\n        }\n\n        var match = type.match(regexNumber);\n\n        if (match) {\n          //var signed = (match[1] === 'int')\n          var size = parseInt(match[2] || \"256\");\n\n          if (size % 8 != 0 || size === 0 || size > 256) {\n            throw new Error('invalid number type - ' + type);\n          }\n\n          if (isArray) {\n            size = 256;\n          }\n\n          value = bignumber_1.bigNumberify(value).toTwos(size);\n          return bytes_1.padZeros(value, size / 8);\n        }\n\n        match = type.match(regexBytes);\n\n        if (match) {\n          var size = parseInt(match[1]);\n\n          if (String(size) != match[1] || size === 0 || size > 32) {\n            throw new Error('invalid number type - ' + type);\n          }\n\n          if (bytes_1.arrayify(value).byteLength !== size) {\n            throw new Error('invalid value for ' + type);\n          }\n\n          if (isArray) {\n            return bytes_1.arrayify((value + Zeros).substring(0, 66));\n          }\n\n          return value;\n        }\n\n        match = type.match(regexArray);\n\n        if (match && Array.isArray(value)) {\n          var baseType = match[1];\n          var count = parseInt(match[2] || String(value.length));\n\n          if (count != value.length) {\n            throw new Error('invalid value for ' + type);\n          }\n\n          var result = [];\n          value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n          });\n          return bytes_1.concat(result);\n        }\n\n        throw new Error('unknown type - ' + type);\n      } // @TODO: Array Enum\n\n\n      function pack(types, values) {\n        if (types.length != values.length) {\n          throw new Error('type/value count mismatch');\n        }\n\n        var tight = [];\n        types.forEach(function (type, index) {\n          tight.push(_pack(type, values[index]));\n        });\n        return bytes_1.hexlify(bytes_1.concat(tight));\n      }\n\n      exports.pack = pack;\n\n      function keccak256(types, values) {\n        return keccak256_1.keccak256(pack(types, values));\n      }\n\n      exports.keccak256 = keccak256;\n\n      function sha256(types, values) {\n        return sha2_1.sha256(pack(types, values));\n      }\n\n      exports.sha256 = sha256;\n    }, {\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./keccak256\": 69,\n      \"./sha2\": 77,\n      \"./utf8\": 83\n    }],\n    81: [function (require, module, exports) {\n      \"use strict\";\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var constants_1 = require(\"../constants\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var secp256k1_1 = require(\"./secp256k1\");\n\n      var address_1 = require(\"./address\");\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var bytes_1 = require(\"./bytes\");\n\n      var keccak256_1 = require(\"./keccak256\");\n\n      var properties_1 = require(\"./properties\");\n\n      var RLP = __importStar(require(\"./rlp\"));\n\n      var abstract_provider_1 = require(\"../providers/abstract-provider\"); ///////////////////////////////\n\n\n      function handleAddress(value) {\n        if (value === '0x') {\n          return null;\n        }\n\n        return address_1.getAddress(value);\n      }\n\n      function handleNumber(value) {\n        if (value === '0x') {\n          return constants_1.Zero;\n        }\n\n        return bignumber_1.bigNumberify(value);\n      }\n\n      var transactionFields = [{\n        name: 'nonce',\n        maxLength: 32\n      }, {\n        name: 'gasPrice',\n        maxLength: 32\n      }, {\n        name: 'gasLimit',\n        maxLength: 32\n      }, {\n        name: 'to',\n        length: 20\n      }, {\n        name: 'value',\n        maxLength: 32\n      }, {\n        name: 'data'\n      }];\n      var allowedTransactionKeys = {\n        chainId: true,\n        data: true,\n        gasLimit: true,\n        gasPrice: true,\n        nonce: true,\n        to: true,\n        value: true\n      };\n\n      function serialize(transaction, signature) {\n        properties_1.checkProperties(transaction, allowedTransactionKeys);\n        var raw = [];\n        transactionFields.forEach(function (fieldInfo) {\n          var value = transaction[fieldInfo.name] || [];\n          value = bytes_1.arrayify(bytes_1.hexlify(value)); // Fixed-width field\n\n          if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, {\n              arg: 'transaction' + fieldInfo.name,\n              value: value\n            });\n          } // Variable-width (with a maximum)\n\n\n          if (fieldInfo.maxLength) {\n            value = bytes_1.stripZeros(value);\n\n            if (value.length > fieldInfo.maxLength) {\n              errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, {\n                arg: 'transaction' + fieldInfo.name,\n                value: value\n              });\n            }\n          }\n\n          raw.push(bytes_1.hexlify(value));\n        });\n\n        if (transaction.chainId != null && transaction.chainId !== 0) {\n          raw.push(bytes_1.hexlify(transaction.chainId));\n          raw.push('0x');\n          raw.push('0x');\n        }\n\n        var unsignedTransaction = RLP.encode(raw); // Requesting an unsigned transation\n\n        if (!signature) {\n          return unsignedTransaction;\n        } // The splitSignature will ensure the transaction has a recoveryParam in the\n        // case that the signTransaction function only adds a v.\n\n\n        var sig = bytes_1.splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n        var v = 27 + sig.recoveryParam;\n\n        if (raw.length === 9) {\n          raw.pop();\n          raw.pop();\n          raw.pop();\n          v += transaction.chainId * 2 + 8;\n        }\n\n        raw.push(bytes_1.hexlify(v));\n        raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.r)));\n        raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.s)));\n        return RLP.encode(raw);\n      }\n\n      exports.serialize = serialize;\n\n      function parse(rawTransaction) {\n        var transaction = RLP.decode(rawTransaction);\n\n        if (transaction.length !== 9 && transaction.length !== 6) {\n          errors.throwError('invalid raw transaction', errors.INVALID_ARGUMENT, {\n            arg: 'rawTransactin',\n            value: rawTransaction\n          });\n        }\n\n        var tx = {\n          nonce: handleNumber(transaction[0]).toNumber(),\n          gasPrice: handleNumber(transaction[1]),\n          gasLimit: handleNumber(transaction[2]),\n          to: handleAddress(transaction[3]),\n          value: handleNumber(transaction[4]),\n          data: transaction[5],\n          chainId: 0\n        }; // Legacy unsigned transaction\n\n        if (transaction.length === 6) {\n          return tx;\n        }\n\n        try {\n          tx.v = bignumber_1.bigNumberify(transaction[6]).toNumber();\n        } catch (error) {\n          console.log(error);\n          return tx;\n        }\n\n        tx.r = bytes_1.hexZeroPad(transaction[7], 32);\n        tx.s = bytes_1.hexZeroPad(transaction[8], 32);\n\n        if (bignumber_1.bigNumberify(tx.r).isZero() && bignumber_1.bigNumberify(tx.s).isZero()) {\n          // EIP-155 unsigned transaction\n          tx.chainId = tx.v;\n          tx.v = 0;\n        } else {\n          // Signed Tranasaction\n          tx.chainId = Math.floor((tx.v - 35) / 2);\n\n          if (tx.chainId < 0) {\n            tx.chainId = 0;\n          }\n\n          var recoveryParam = tx.v - 27;\n          var raw = transaction.slice(0, 6);\n\n          if (tx.chainId !== 0) {\n            raw.push(bytes_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n          }\n\n          var digest = keccak256_1.keccak256(RLP.encode(raw));\n\n          try {\n            tx.from = secp256k1_1.recoverAddress(digest, {\n              r: bytes_1.hexlify(tx.r),\n              s: bytes_1.hexlify(tx.s),\n              recoveryParam: recoveryParam\n            });\n          } catch (error) {\n            console.log(error);\n          }\n\n          tx.hash = keccak256_1.keccak256(rawTransaction);\n        }\n\n        return tx;\n      }\n\n      exports.parse = parse;\n\n      function populateTransaction(transaction, provider, from) {\n        if (!abstract_provider_1.Provider.isProvider(provider)) {\n          errors.throwError('missing provider', errors.INVALID_ARGUMENT, {\n            argument: 'provider',\n            value: provider\n          });\n        }\n\n        properties_1.checkProperties(transaction, allowedTransactionKeys);\n        var tx = properties_1.shallowCopy(transaction);\n\n        if (tx.to != null) {\n          tx.to = provider.resolveName(tx.to);\n        }\n\n        if (tx.gasPrice == null) {\n          tx.gasPrice = provider.getGasPrice();\n        }\n\n        if (tx.nonce == null) {\n          tx.nonce = provider.getTransactionCount(from);\n        }\n\n        if (tx.gasLimit == null) {\n          var estimate = properties_1.shallowCopy(tx);\n          estimate.from = from;\n          tx.gasLimit = provider.estimateGas(estimate);\n        }\n\n        if (tx.chainId == null) {\n          tx.chainId = provider.getNetwork().then(function (network) {\n            return network.chainId;\n          });\n        }\n\n        return properties_1.resolveProperties(tx);\n      }\n\n      exports.populateTransaction = populateTransaction;\n    }, {\n      \"../constants\": 3,\n      \"../errors\": 5,\n      \"../providers/abstract-provider\": 49,\n      \"./address\": 59,\n      \"./bignumber\": 61,\n      \"./bytes\": 62,\n      \"./keccak256\": 69,\n      \"./properties\": 72,\n      \"./rlp\": 74,\n      \"./secp256k1\": 75\n    }],\n    82: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var constants_1 = require(\"../constants\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      var bignumber_1 = require(\"./bignumber\");\n\n      var names = ['wei', 'kwei', 'Mwei', 'Gwei', 'szabo', 'finney', 'ether'];\n      var unitInfos = {};\n\n      function _getUnitInfo(value) {\n        return {\n          decimals: value.length - 1,\n          tenPower: bignumber_1.bigNumberify(value)\n        };\n      } // Build cache of common units\n\n\n      (function () {\n        // Cache the common units\n        var value = '1';\n        names.forEach(function (name) {\n          var info = _getUnitInfo(value);\n\n          unitInfos[name.toLowerCase()] = info;\n          unitInfos[String(info.decimals)] = info;\n          value += '000';\n        });\n      })();\n\n      function getUnitInfo(name) {\n        // Try the cache\n        var info = unitInfos[String(name).toLowerCase()];\n\n        if (!info && typeof name === 'number' && parseInt(String(name)) == name && name >= 0 && name <= 256) {\n          var value = '1';\n\n          for (var i = 0; i < name; i++) {\n            value += '0';\n          }\n\n          info = _getUnitInfo(value);\n        } // Make sure we got something\n\n\n        if (!info) {\n          errors.throwError('invalid unitType', errors.INVALID_ARGUMENT, {\n            argument: 'name',\n            value: name\n          });\n        }\n\n        return info;\n      } // Some environments have issues with RegEx that contain back-tracking, so we cannot\n      // use them.\n\n\n      function commify(value) {\n        var comps = String(value).split('.');\n\n        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === '.' || value === '-.') {\n          errors.throwError('invalid value', errors.INVALID_ARGUMENT, {\n            argument: 'value',\n            value: value\n          });\n        } // Make sure we have at least one whole digit (0 if none)\n\n\n        var whole = comps[0];\n        var negative = '';\n\n        if (whole.substring(0, 1) === '-') {\n          negative = '-';\n          whole = whole.substring(1);\n        } // Make sure we have at least 1 whole digit with no leading zeros\n\n\n        while (whole.substring(0, 1) === '0') {\n          whole = whole.substring(1);\n        }\n\n        if (whole === '') {\n          whole = '0';\n        }\n\n        var suffix = '';\n\n        if (comps.length === 2) {\n          suffix = '.' + (comps[1] || '0');\n        }\n\n        var formatted = [];\n\n        while (whole.length) {\n          if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n          } else {\n            var index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n          }\n        }\n\n        return negative + formatted.join(',') + suffix;\n      }\n\n      exports.commify = commify;\n\n      function formatUnits(value, unitType) {\n        var unitInfo = getUnitInfo(unitType); // Make sure wei is a big number (convert as necessary)\n\n        value = bignumber_1.bigNumberify(value);\n        var negative = value.lt(constants_1.Zero);\n\n        if (negative) {\n          value = value.mul(constants_1.NegativeOne);\n        }\n\n        var fraction = value.mod(unitInfo.tenPower).toString();\n\n        while (fraction.length < unitInfo.decimals) {\n          fraction = '0' + fraction;\n        } // Strip training 0\n\n\n        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n        var whole = value.div(unitInfo.tenPower).toString();\n        value = whole + '.' + fraction;\n\n        if (negative) {\n          value = '-' + value;\n        }\n\n        return value;\n      }\n\n      exports.formatUnits = formatUnits;\n\n      function parseUnits(value, unitType) {\n        if (unitType == null) {\n          unitType = 18;\n        }\n\n        var unitInfo = getUnitInfo(unitType);\n\n        if (typeof value !== 'string' || !value.match(/^-?[0-9.,]+$/)) {\n          errors.throwError('invalid decimal value', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        }\n\n        if (unitInfo.decimals === 0) {\n          return bignumber_1.bigNumberify(value);\n        } // Is it negative?\n\n\n        var negative = value.substring(0, 1) === '-';\n\n        if (negative) {\n          value = value.substring(1);\n        }\n\n        if (value === '.') {\n          errors.throwError('missing value', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        } // Split it into a whole and fractional part\n\n\n        var comps = value.split('.');\n\n        if (comps.length > 2) {\n          errors.throwError('too many decimal points', errors.INVALID_ARGUMENT, {\n            arg: 'value',\n            value: value\n          });\n        }\n\n        var whole = comps[0],\n            fraction = comps[1];\n\n        if (!whole) {\n          whole = '0';\n        }\n\n        if (!fraction) {\n          fraction = '0';\n        } // Prevent underflow\n\n\n        if (fraction.length > unitInfo.decimals) {\n          errors.throwError('underflow occurred', errors.NUMERIC_FAULT, {\n            operation: 'division',\n            fault: \"underflow\"\n          });\n        } // Fully pad the string with zeros to get to wei\n\n\n        while (fraction.length < unitInfo.decimals) {\n          fraction += '0';\n        }\n\n        var wholeValue = bignumber_1.bigNumberify(whole);\n        var fractionValue = bignumber_1.bigNumberify(fraction);\n        var wei = wholeValue.mul(unitInfo.tenPower).add(fractionValue);\n\n        if (negative) {\n          wei = wei.mul(constants_1.NegativeOne);\n        }\n\n        return wei;\n      }\n\n      exports.parseUnits = parseUnits;\n\n      function formatEther(wei) {\n        return formatUnits(wei, 18);\n      }\n\n      exports.formatEther = formatEther;\n\n      function parseEther(ether) {\n        return parseUnits(ether, 18);\n      }\n\n      exports.parseEther = parseEther;\n    }, {\n      \"../constants\": 3,\n      \"../errors\": 5,\n      \"./bignumber\": 61\n    }],\n    83: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var constants_1 = require(\"../constants\");\n\n      var bytes_1 = require(\"./bytes\"); ///////////////////////////////\n\n\n      var UnicodeNormalizationForm;\n\n      (function (UnicodeNormalizationForm) {\n        UnicodeNormalizationForm[\"current\"] = \"\";\n        UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n        UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n        UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n        UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n      })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n\n      ; // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n      function toUtf8Bytes(str, form) {\n        if (form === void 0) {\n          form = UnicodeNormalizationForm.current;\n        }\n\n        if (form != UnicodeNormalizationForm.current) {\n          str = str.normalize(form);\n        }\n\n        var result = [];\n\n        for (var i = 0; i < str.length; i++) {\n          var c = str.charCodeAt(i);\n\n          if (c < 0x80) {\n            result.push(c);\n          } else if (c < 0x800) {\n            result.push(c >> 6 | 0xc0);\n            result.push(c & 0x3f | 0x80);\n          } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            var c2 = str.charCodeAt(i);\n\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n              throw new Error('invalid utf-8 string');\n            } // Surrogate Pair\n\n\n            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push(c >> 18 | 0xf0);\n            result.push(c >> 12 & 0x3f | 0x80);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n          } else {\n            result.push(c >> 12 | 0xe0);\n            result.push(c >> 6 & 0x3f | 0x80);\n            result.push(c & 0x3f | 0x80);\n          }\n        }\n\n        return bytes_1.arrayify(result);\n      }\n\n      exports.toUtf8Bytes = toUtf8Bytes;\n      ; // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\n      function toUtf8String(bytes, ignoreErrors) {\n        bytes = bytes_1.arrayify(bytes);\n        var result = '';\n        var i = 0; // Invalid bytes are ignored\n\n        while (i < bytes.length) {\n          var c = bytes[i++]; // 0xxx xxxx\n\n          if (c >> 7 === 0) {\n            result += String.fromCharCode(c);\n            continue;\n          } // Multibyte; how many bytes left for this character?\n\n\n          var extraLength = null;\n          var overlongMask = null; // 110x xxxx 10xx xxxx\n\n          if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n          } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n          } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n          } else {\n            if (!ignoreErrors) {\n              if ((c & 0xc0) === 0x80) {\n                throw new Error('invalid utf8 byte sequence; unexpected continuation byte');\n              }\n\n              throw new Error('invalid utf8 byte sequence; invalid prefix');\n            }\n\n            continue;\n          } // Do we have enough bytes in our data?\n\n\n          if (i + extraLength > bytes.length) {\n            if (!ignoreErrors) {\n              throw new Error('invalid utf8 byte sequence; too short');\n            } // If there is an invalid unprocessed byte, skip continuation bytes\n\n\n            for (; i < bytes.length; i++) {\n              if (bytes[i] >> 6 !== 0x02) {\n                break;\n              }\n            }\n\n            continue;\n          } // Remove the length prefix from the char\n\n\n          var res = c & (1 << 8 - extraLength - 1) - 1;\n\n          for (var j = 0; j < extraLength; j++) {\n            var nextChar = bytes[i]; // Invalid continuation byte\n\n            if ((nextChar & 0xc0) != 0x80) {\n              res = null;\n              break;\n            }\n\n            ;\n            res = res << 6 | nextChar & 0x3f;\n            i++;\n          }\n\n          if (res === null) {\n            if (!ignoreErrors) {\n              throw new Error('invalid utf8 byte sequence; invalid continuation byte');\n            }\n\n            continue;\n          } // Check for overlong seuences (more bytes than needed)\n\n\n          if (res <= overlongMask) {\n            if (!ignoreErrors) {\n              throw new Error('invalid utf8 byte sequence; overlong');\n            }\n\n            continue;\n          } // Maximum code point\n\n\n          if (res > 0x10ffff) {\n            if (!ignoreErrors) {\n              throw new Error('invalid utf8 byte sequence; out-of-range');\n            }\n\n            continue;\n          } // Reserved for UTF-16 surrogate halves\n\n\n          if (res >= 0xd800 && res <= 0xdfff) {\n            if (!ignoreErrors) {\n              throw new Error('invalid utf8 byte sequence; utf-16 surrogate');\n            }\n\n            continue;\n          }\n\n          if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n          }\n\n          res -= 0x10000;\n          result += String.fromCharCode((res >> 10 & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n        }\n\n        return result;\n      }\n\n      exports.toUtf8String = toUtf8String;\n\n      function formatBytes32String(text) {\n        // Get the bytes\n        var bytes = toUtf8Bytes(text); // Check we have room for null-termination\n\n        if (bytes.length > 31) {\n          throw new Error('bytes32 string must be less than 32 bytes');\n        } // Zero-pad (implicitly null-terminates)\n\n\n        return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));\n      }\n\n      exports.formatBytes32String = formatBytes32String;\n\n      function parseBytes32String(bytes) {\n        var data = bytes_1.arrayify(bytes); // Must be 32 bytes with a null-termination\n\n        if (data.length !== 32) {\n          throw new Error('invalid bytes32 - not 32 bytes long');\n        }\n\n        if (data[31] !== 0) {\n          throw new Error('invalid bytes32 sdtring - no null terminator');\n        } // Find the null termination\n\n\n        var length = 31;\n\n        while (data[length - 1] === 0) {\n          length--;\n        } // Determine the string value\n\n\n        return toUtf8String(data.slice(0, length));\n      }\n\n      exports.parseBytes32String = parseBytes32String;\n    }, {\n      \"../constants\": 3,\n      \"./bytes\": 62\n    }],\n    84: [function (require, module, exports) {\n      'use strict';\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var xmlhttprequest_1 = require(\"xmlhttprequest\");\n\n      var base64_1 = require(\"./base64\");\n\n      var properties_1 = require(\"./properties\");\n\n      var utf8_1 = require(\"./utf8\");\n\n      var errors = __importStar(require(\"../errors\"));\n\n      function fetchJson(connection, json, processFunc) {\n        var headers = {};\n        var url = null;\n        var timeout = 2 * 60 * 1000;\n\n        if (typeof connection === 'string') {\n          url = connection;\n        } else if (typeof connection === 'object') {\n          if (connection.url == null) {\n            errors.throwError('missing URL', errors.MISSING_ARGUMENT, {\n              arg: 'url'\n            });\n          }\n\n          url = connection.url;\n\n          if (typeof connection.timeout === 'number' && connection.timeout > 0) {\n            timeout = connection.timeout;\n          }\n\n          if (connection.headers) {\n            for (var key in connection.headers) {\n              headers[key.toLowerCase()] = {\n                key: key,\n                value: String(connection.headers[key])\n              };\n            }\n          }\n\n          if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== 'https:' && connection.allowInsecure !== true) {\n              errors.throwError('basic authentication requires a secure https url', errors.INVALID_ARGUMENT, {\n                arg: 'url',\n                url: url,\n                user: connection.user,\n                password: '[REDACTED]'\n              });\n            }\n\n            var authorization = connection.user + ':' + connection.password;\n            headers['authorization'] = {\n              key: 'Authorization',\n              value: 'Basic ' + base64_1.encode(utf8_1.toUtf8Bytes(authorization))\n            };\n          }\n        }\n\n        return new Promise(function (resolve, reject) {\n          var request = new xmlhttprequest_1.XMLHttpRequest();\n          var timer = null;\n          timer = setTimeout(function () {\n            if (timer == null) {\n              return;\n            }\n\n            timer = null;\n            reject(new Error('timeout'));\n            setTimeout(function () {\n              request.abort();\n            }, 0);\n          }, timeout);\n\n          var cancelTimeout = function cancelTimeout() {\n            if (timer == null) {\n              return;\n            }\n\n            clearTimeout(timer);\n            timer = null;\n          };\n\n          if (json) {\n            request.open('POST', url, true);\n            headers['content-type'] = {\n              key: 'Content-Type',\n              value: 'application/json'\n            };\n          } else {\n            request.open('GET', url, true);\n          }\n\n          Object.keys(headers).forEach(function (key) {\n            var header = headers[key];\n            request.setRequestHeader(header.key, header.value);\n          });\n\n          request.onreadystatechange = function () {\n            if (request.readyState !== 4) {\n              return;\n            }\n\n            if (request.status != 200) {\n              cancelTimeout(); // @TODO: not any!\n\n              var error = new Error('invalid response - ' + request.status);\n              error.statusCode = request.status;\n\n              if (request.responseText) {\n                error.responseText = request.responseText;\n              }\n\n              reject(error);\n              return;\n            }\n\n            var result = null;\n\n            try {\n              result = JSON.parse(request.responseText);\n            } catch (error) {\n              cancelTimeout(); // @TODO: not any!\n\n              var jsonError = new Error('invalid json response');\n              jsonError.orginialError = error;\n              jsonError.responseText = request.responseText;\n              jsonError.url = url;\n              reject(jsonError);\n              return;\n            }\n\n            if (processFunc) {\n              try {\n                result = processFunc(result);\n              } catch (error) {\n                cancelTimeout();\n                error.url = url;\n                error.body = json;\n                error.responseText = request.responseText;\n                reject(error);\n                return;\n              }\n            }\n\n            cancelTimeout();\n            resolve(result);\n          };\n\n          request.onerror = function (error) {\n            cancelTimeout();\n            reject(error);\n          };\n\n          try {\n            if (json) {\n              request.send(json);\n            } else {\n              request.send();\n            }\n          } catch (error) {\n            cancelTimeout(); // @TODO: not any!\n\n            var connectionError = new Error('connection error');\n            connectionError.error = error;\n            reject(connectionError);\n          }\n        });\n      }\n\n      exports.fetchJson = fetchJson;\n\n      function poll(func, options) {\n        if (!options) {\n          options = {};\n        }\n\n        options = properties_1.shallowCopy(options);\n\n        if (options.floor == null) {\n          options.floor = 0;\n        }\n\n        if (options.ceiling == null) {\n          options.ceiling = 10000;\n        }\n\n        if (options.interval == null) {\n          options.interval = 250;\n        }\n\n        return new Promise(function (resolve, reject) {\n          var timer = null;\n          var done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n          var cancel = function cancel() {\n            if (done) {\n              return false;\n            }\n\n            done = true;\n\n            if (timer) {\n              clearTimeout(timer);\n            }\n\n            return true;\n          };\n\n          if (options.timeout) {\n            timer = setTimeout(function () {\n              if (cancel()) {\n                reject(new Error('timeout'));\n              }\n            }, options.timeout);\n          }\n\n          var attempt = 0;\n\n          function check() {\n            return func().then(function (result) {\n              // If we have a result, or are allowed null then we're done\n              if (result !== undefined) {\n                if (cancel()) {\n                  resolve(result);\n                }\n              } else if (options.onceBlock) {\n                options.onceBlock.once('block', check); // Otherwise, exponential back-off (up to 10s) our next request\n              } else if (!done) {\n                attempt++;\n                var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n                if (timeout < options.floor) {\n                  timeout = options.floor;\n                }\n\n                if (timeout > options.ceiling) {\n                  timeout = options.ceiling;\n                }\n\n                setTimeout(check, timeout);\n              }\n\n              return null;\n            }, function (error) {\n              if (cancel()) {\n                reject(error);\n              }\n            });\n          }\n\n          check();\n        });\n      }\n\n      exports.poll = poll;\n    }, {\n      \"../errors\": 5,\n      \"./base64\": 60,\n      \"./properties\": 72,\n      \"./utf8\": 83,\n      \"xmlhttprequest\": 48\n    }],\n    85: [function (require, module, exports) {\n      (function (global) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        }); // This gets overriddenby gulp during bip39-XX\n\n        var exportWordlist = false;\n\n        var hash_1 = require(\"../utils/hash\");\n\n        var properties_1 = require(\"../utils/properties\");\n\n        function check(wordlist) {\n          var words = [];\n\n          for (var i = 0; i < 2048; i++) {\n            var word = wordlist.getWord(i);\n\n            if (i !== wordlist.getWordIndex(word)) {\n              return '0x';\n            }\n\n            words.push(word);\n          }\n\n          return hash_1.id(words.join('\\n') + '\\n');\n        }\n\n        exports.check = check;\n\n        var Wordlist =\n        /** @class */\n        function () {\n          function Wordlist(locale) {\n            properties_1.defineReadOnly(this, 'locale', locale);\n          } // Subclasses may override this\n\n\n          Wordlist.prototype.split = function (mnemonic) {\n            return mnemonic.toLowerCase().split(/ +/g);\n          }; // Subclasses may override this\n\n\n          Wordlist.prototype.join = function (words) {\n            return words.join(' ');\n          };\n\n          return Wordlist;\n        }();\n\n        exports.Wordlist = Wordlist;\n\n        function register(lang, name) {\n          if (!name) {\n            name = lang.locale;\n          }\n\n          if (exportWordlist) {\n            var g = global;\n\n            if (!g.wordlists) {\n              properties_1.defineReadOnly(g, 'wordlists', {});\n            }\n\n            if (!g.wordlists[name]) {\n              properties_1.defineReadOnly(g.wordlists, name, lang);\n            }\n\n            if (g.ethers && g.ethers.wordlists) {\n              if (!g.ethers.wordlists[name]) {\n                properties_1.defineReadOnly(g.ethers.wordlists, name, lang);\n              }\n            }\n          }\n        }\n\n        exports.register = register;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"../utils/hash\": 63,\n      \"../utils/properties\": 72\n    }],\n    86: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      var __importStar = this && this.__importStar || function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k in mod) {\n          if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n        }\n        result[\"default\"] = mod;\n        return result;\n      };\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var bytes_1 = require(\"./utils/bytes\");\n\n      var hash_1 = require(\"./utils/hash\");\n\n      var hdnode_1 = require(\"./utils/hdnode\");\n\n      var json_wallet_1 = require(\"./utils/json-wallet\");\n\n      var keccak256_1 = require(\"./utils/keccak256\");\n\n      var properties_1 = require(\"./utils/properties\");\n\n      var random_bytes_1 = require(\"./utils/random-bytes\");\n\n      var secretStorage = __importStar(require(\"./utils/secret-storage\"));\n\n      var signing_key_1 = require(\"./utils/signing-key\");\n\n      var transaction_1 = require(\"./utils/transaction\"); // Imported Abstracts\n\n\n      var abstract_signer_1 = require(\"./abstract-signer\");\n\n      var abstract_provider_1 = require(\"./providers/abstract-provider\");\n\n      var errors = __importStar(require(\"./errors\"));\n\n      var Wallet =\n      /** @class */\n      function (_super) {\n        __extends(Wallet, _super);\n\n        function Wallet(privateKey, provider) {\n          var _this = _super.call(this) || this;\n\n          errors.checkNew(_this, Wallet); // Make sure we have a valid signing key\n\n          if (signing_key_1.SigningKey.isSigningKey(privateKey)) {\n            properties_1.defineReadOnly(_this, 'signingKey', privateKey);\n          } else {\n            properties_1.defineReadOnly(_this, 'signingKey', new signing_key_1.SigningKey(privateKey));\n          }\n\n          properties_1.defineReadOnly(_this, 'provider', provider);\n          return _this;\n        }\n\n        Object.defineProperty(Wallet.prototype, \"address\", {\n          get: function get() {\n            return this.signingKey.address;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Wallet.prototype, \"mnemonic\", {\n          get: function get() {\n            return this.signingKey.mnemonic;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Wallet.prototype, \"path\", {\n          get: function get() {\n            return this.signingKey.mnemonic;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        Object.defineProperty(Wallet.prototype, \"privateKey\", {\n          get: function get() {\n            return this.signingKey.privateKey;\n          },\n          enumerable: true,\n          configurable: true\n        });\n        /**\n         *  Create a new instance of this Wallet connected to provider.\n         */\n\n        Wallet.prototype.connect = function (provider) {\n          if (!abstract_provider_1.Provider.isProvider(provider)) {\n            errors.throwError('invalid provider', errors.INVALID_ARGUMENT, {\n              argument: 'provider',\n              value: provider\n            });\n          }\n\n          return new Wallet(this.signingKey, provider);\n        };\n\n        Wallet.prototype.getAddress = function () {\n          return Promise.resolve(this.address);\n        };\n\n        Wallet.prototype.sign = function (transaction) {\n          var _this = this;\n\n          return properties_1.resolveProperties(transaction).then(function (tx) {\n            var rawTx = transaction_1.serialize(tx);\n\n            var signature = _this.signingKey.signDigest(keccak256_1.keccak256(rawTx));\n\n            return transaction_1.serialize(tx, signature);\n          });\n        };\n\n        Wallet.prototype.signMessage = function (message) {\n          return Promise.resolve(bytes_1.joinSignature(this.signingKey.signDigest(hash_1.hashMessage(message))));\n        };\n\n        Wallet.prototype.getBalance = function (blockTag) {\n          if (!this.provider) {\n            throw new Error('missing provider');\n          }\n\n          return this.provider.getBalance(this.address, blockTag);\n        };\n\n        Wallet.prototype.getTransactionCount = function (blockTag) {\n          if (!this.provider) {\n            throw new Error('missing provider');\n          }\n\n          return this.provider.getTransactionCount(this.address, blockTag);\n        };\n\n        Wallet.prototype.sendTransaction = function (transaction) {\n          var _this = this;\n\n          return transaction_1.populateTransaction(transaction, this.provider, this.address).then(function (tx) {\n            return _this.sign(tx).then(function (signedTransaction) {\n              return _this.provider.sendTransaction(signedTransaction);\n            });\n          });\n        };\n\n        Wallet.prototype.encrypt = function (password, options, progressCallback) {\n          if (typeof options === 'function' && !progressCallback) {\n            progressCallback = options;\n            options = {};\n          }\n\n          if (progressCallback && typeof progressCallback !== 'function') {\n            throw new Error('invalid callback');\n          }\n\n          if (!options) {\n            options = {};\n          }\n\n          if (this.mnemonic) {\n            // Make sure we don't accidentally bubble the mnemonic up the call-stack\n            options = properties_1.shallowCopy(options); // Set the mnemonic and path\n\n            options.mnemonic = this.mnemonic;\n            options.path = this.path;\n          }\n\n          return secretStorage.encrypt(this.privateKey, password, options, progressCallback);\n        };\n        /**\n         *  Static methods to create Wallet instances.\n         */\n\n\n        Wallet.createRandom = function (options) {\n          var entropy = random_bytes_1.randomBytes(16);\n\n          if (!options) {\n            options = {};\n          }\n\n          if (options.extraEntropy) {\n            entropy = bytes_1.arrayify(keccak256_1.keccak256(bytes_1.concat([entropy, options.extraEntropy])).substring(0, 34));\n          }\n\n          var mnemonic = hdnode_1.entropyToMnemonic(entropy, options.locale);\n          return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n        };\n\n        Wallet.fromEncryptedJson = function (json, password, progressCallback) {\n          if (json_wallet_1.isCrowdsaleWallet(json)) {\n            try {\n              if (progressCallback) {\n                progressCallback(0);\n              }\n\n              var privateKey = secretStorage.decryptCrowdsale(json, password);\n\n              if (progressCallback) {\n                progressCallback(1);\n              }\n\n              return Promise.resolve(new Wallet(privateKey));\n            } catch (error) {\n              return Promise.reject(error);\n            }\n          } else if (json_wallet_1.isSecretStorageWallet(json)) {\n            return secretStorage.decrypt(json, password, progressCallback).then(function (signingKey) {\n              return new Wallet(signingKey);\n            });\n          }\n\n          return Promise.reject('invalid wallet JSON');\n        };\n\n        Wallet.fromMnemonic = function (mnemonic, path, wordlist) {\n          if (!path) {\n            path = hdnode_1.defaultPath;\n          }\n\n          return new Wallet(hdnode_1.fromMnemonic(mnemonic, wordlist).derivePath(path));\n        };\n\n        return Wallet;\n      }(abstract_signer_1.Signer);\n\n      exports.Wallet = Wallet;\n    }, {\n      \"./abstract-signer\": 2,\n      \"./errors\": 5,\n      \"./providers/abstract-provider\": 49,\n      \"./utils/bytes\": 62,\n      \"./utils/hash\": 63,\n      \"./utils/hdnode\": 64,\n      \"./utils/json-wallet\": 68,\n      \"./utils/keccak256\": 69,\n      \"./utils/properties\": 72,\n      \"./utils/random-bytes\": 73,\n      \"./utils/secret-storage\": 76,\n      \"./utils/signing-key\": 79,\n      \"./utils/transaction\": 81\n    }],\n    87: [function (require, module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var lang_en_1 = require(\"../wordlists/lang-en\");\n\n      var en = lang_en_1.langEn;\n      exports.en = en;\n    }, {\n      \"../wordlists/lang-en\": 88\n    }],\n    88: [function (require, module, exports) {\n      'use strict';\n\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) {\n            if (b.hasOwnProperty(p)) d[p] = b[p];\n          }\n        };\n\n        return function (d, b) {\n          extendStatics(d, b);\n\n          function __() {\n            this.constructor = d;\n          }\n\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var wordlist_1 = require(\"../utils/wordlist\");\n\n      var words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n      var wordlist = null;\n\n      function loadWords(lang) {\n        if (wordlist != null) {\n          return;\n        }\n\n        wordlist = words.replace(/([A-Z])/g, ' $1').toLowerCase().substring(1).split(' ');\n\n        if (wordlist_1.check(lang) !== '0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60') {\n          wordlist = null;\n          throw new Error('BIP39 Wordlist for en (English) FAILED');\n        }\n      }\n\n      var LangEn =\n      /** @class */\n      function (_super) {\n        __extends(LangEn, _super);\n\n        function LangEn() {\n          return _super.call(this, 'en') || this;\n        }\n\n        LangEn.prototype.getWord = function (index) {\n          loadWords(this);\n          return wordlist[index];\n        };\n\n        LangEn.prototype.getWordIndex = function (word) {\n          loadWords(this);\n          return wordlist.indexOf(word);\n        };\n\n        return LangEn;\n      }(wordlist_1.Wordlist);\n\n      var langEn = new LangEn();\n      exports.langEn = langEn;\n      wordlist_1.register(langEn);\n    }, {\n      \"../utils/wordlist\": 85\n    }]\n  }, {}, [7])(7);\n});","map":null,"metadata":{},"sourceType":"script"}