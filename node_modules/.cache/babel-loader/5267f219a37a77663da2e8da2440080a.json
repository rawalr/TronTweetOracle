{"ast":null,"code":"import _toConsumableArray from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/roshni16/TronLink-Demo-Messages/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar contractAddress = 'TEoSQnZnAHudMC3bNnXRuaDVesxFZpoYJN';\nvar utils = {\n  tronWeb: false,\n  contract: false,\n  setTronWeb: function () {\n    var _setTronWeb = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(tronWeb) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.tronWeb = tronWeb;\n              _context.next = 3;\n              return tronWeb.contract().at(contractAddress);\n\n            case 3:\n              this.contract = _context.sent;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function setTronWeb(_x) {\n      return _setTronWeb.apply(this, arguments);\n    };\n  }(),\n  transformMessage: function transformMessage(message) {\n    return {\n      tips: {\n        amount: message.tips,\n        count: message.tippers.toNumber()\n      },\n      owner: this.tronWeb.address.fromHex(message.creator),\n      timestamp: message.time.toNumber(),\n      message: message.message\n    };\n  },\n  fetchMessages: function () {\n    var _fetchMessages = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _this = this;\n\n      var recent,\n          featured,\n          i,\n          message,\n          totalMessages,\n          min,\n          messageIDs,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              recent = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n              featured = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : [];\n              i = 0;\n\n            case 3:\n              if (!(i < 20)) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 6;\n              return this.contract.topPosts(i).call();\n\n            case 6:\n              message = _context2.sent;\n\n              if (!(message.toNumber() === 0)) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 13);\n\n            case 9:\n              // End of tips array\n              featured.push(message.toNumber());\n\n            case 10:\n              i++;\n              _context2.next = 3;\n              break;\n\n            case 13:\n              _context2.next = 15;\n              return this.contract.current().call();\n\n            case 15:\n              totalMessages = _context2.sent.toNumber();\n              min = Math.max(1, totalMessages - 30);\n              messageIDs = _toConsumableArray(new Set(_toConsumableArray(new Array(totalMessages - min).fill().map(function (_, index) {\n                return min + index;\n              })).concat(_toConsumableArray(featured))));\n              _context2.next = 20;\n              return Promise.all(messageIDs.map(function (messageID) {\n                return _this.contract.messages(messageID).call();\n              })).then(function (messages) {\n                return messages.forEach(function (message, index) {\n                  var messageID = +messageIDs[index];\n                  recent[messageID] = _this.transformMessage(message);\n                });\n              });\n\n            case 20:\n              return _context2.abrupt(\"return\", {\n                featured: featured,\n                recent: recent\n              });\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function fetchMessages() {\n      return _fetchMessages.apply(this, arguments);\n    };\n  }(),\n  fetchMessage: function () {\n    var _fetchMessage = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(messageID, _ref) {\n      var _ref$recent, recent, _ref$featured, featured, message, vulnerable, removed;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _ref$recent = _ref.recent, recent = _ref$recent === void 0 ? {} : _ref$recent, _ref$featured = _ref.featured, featured = _ref$featured === void 0 ? [] : _ref$featured;\n              _context3.next = 3;\n              return this.contract.messages(messageID).call();\n\n            case 3:\n              message = _context3.sent;\n              vulnerable = Object.keys(recent).filter(function (messageID) {\n                return !featured.includes(messageID);\n              }).sort(function (a, b) {\n                return recent[b].timestamp - recent[a].timestamp;\n              });\n              recent[messageID] = this.transformMessage(message);\n\n              if (vulnerable.length > 30) {\n                removed = vulnerable.splice(0, vulnerable.length - 30);\n                removed.forEach(function (messageID) {\n                  delete recent[messageID];\n                });\n              }\n\n              return _context3.abrupt(\"return\", {\n                message: recent[messageID],\n                recent: recent,\n                featured: featured\n              });\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function fetchMessage(_x2, _x3) {\n      return _fetchMessage.apply(this, arguments);\n    };\n  }()\n};\nexport default utils;","map":{"version":3,"sources":["/Users/roshni16/TronLink-Demo-Messages/src/utils/index.js"],"names":["contractAddress","utils","tronWeb","contract","setTronWeb","at","transformMessage","message","tips","amount","count","tippers","toNumber","owner","address","fromHex","creator","timestamp","time","fetchMessages","recent","featured","i","topPosts","call","push","current","totalMessages","min","Math","max","messageIDs","Set","Array","fill","map","_","index","Promise","all","messageID","messages","then","forEach","fetchMessage","vulnerable","Object","keys","filter","includes","sort","a","b","length","removed","splice"],"mappings":"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","sourcesContent":["const contractAddress = 'TEoSQnZnAHudMC3bNnXRuaDVesxFZpoYJN'\n\nconst utils = {\n    tronWeb: false,\n    contract: false,\n\n    async setTronWeb(tronWeb) {\n        this.tronWeb = tronWeb;\n        this.contract = await tronWeb.contract().at(contractAddress)\n    },\n\n    transformMessage(message) {\n        return {\n            tips: {\n                amount: message.tips,\n                count: message.tippers.toNumber()\n            },\n            owner: this.tronWeb.address.fromHex(message.creator),\n            timestamp: message.time.toNumber(),\n            message: message.message\n        }\n    },\n\n    async fetchMessages(recent = {}, featured = []) {\n        // Try to fetch messageID's of top 20 tipped messages (or until there are no more)\n        for(let i = 0; i < 20; i++) {\n            const message = await this.contract.topPosts(i).call();\n\n            if(message.toNumber() === 0)\n                break; // End of tips array\n\n            featured.push(\n                message.toNumber()\n            );\n        }\n\n        // Fetch Max(30) most recent messages\n        const totalMessages = (await this.contract.current().call()).toNumber();\n        const min = Math.max(1, totalMessages - 30);\n\n        const messageIDs = [ ...new Set([\n            ...new Array(totalMessages - min).fill().map((_, index) => min + index),\n            ...featured\n        ])];\n\n        await Promise.all(messageIDs.map(messageID => (\n            this.contract.messages(messageID).call()\n        ))).then(messages => messages.forEach((message, index) => {\n            const messageID = +messageIDs[index];\n\n            recent[messageID] = this.transformMessage(message);\n        }));\n\n        return {\n            featured,\n            recent\n        };\n    },\n\n    async fetchMessage(messageID, { recent = {}, featured = [] }) {\n        const message = await this.contract.messages(messageID).call();\n        const vulnerable = Object.keys(recent).filter(messageID => (\n            !featured.includes(messageID)\n        )).sort((a, b) => (\n            recent[b].timestamp - recent[a].timestamp\n        ));\n\n        recent[messageID] = this.transformMessage(message);\n\n        if(vulnerable.length > 30) {\n            const removed = vulnerable.splice(0, vulnerable.length - 30);\n\n            removed.forEach(messageID => {\n                delete recent[messageID];\n            });\n        }\n\n        return {\n            message: recent[messageID],\n            recent,\n            featured\n        };\n    }\n};\n\nexport default utils;"]},"metadata":{},"sourceType":"module"}